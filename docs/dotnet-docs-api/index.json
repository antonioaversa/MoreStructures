{
  "api/index.html": {
    "href": "api/index.html",
    "title": "PLACEHOLDER",
    "keywords": "PLACEHOLDER TODO: Add .NET projects to the src folder and run docfx to generate REAL API Documentation !"
  },
  "api/StringAlgorithms.html": {
    "href": "api/StringAlgorithms.html",
    "title": "Namespace StringAlgorithms",
    "keywords": "Namespace StringAlgorithms Classes StringUtilities Generic utilities and extensions for strings. TextWithTerminator A text string with a terminator character, not present in the text. Interfaces TextWithTerminator.ISelector A selector of a part of a text with terminator."
  },
  "api/StringAlgorithms.StringUtilities.html": {
    "href": "api/StringAlgorithms.StringUtilities.html",
    "title": "Class StringUtilities",
    "keywords": "Class StringUtilities Generic utilities and extensions for strings. Inheritance System.Object StringUtilities Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : StringAlgorithms Assembly : StringAlgorithms.dll Syntax public class StringUtilities Methods | Improve this Doc View Source LongestPrefixInCommon(String, String) Returns the length of the longest prefix in common between the provided strings. Declaration public static int LongestPrefixInCommon(string s1, string s2) Parameters Type Name Description System.String s1 System.String s2 Returns Type Description System.Int32 An integer betwen 0 and the length of the shortest of the strings provided."
  },
  "api/StringAlgorithms.SuffixStructures.AdjacencyOrder.html": {
    "href": "api/StringAlgorithms.SuffixStructures.AdjacencyOrder.html",
    "title": "Enum AdjacencyOrder",
    "keywords": "Enum AdjacencyOrder The possible adjacency order relationships between two edges by the parts they refer to in the text: non-adjacent (overlapping on more than an extreme or not at all), adjacent with a specific order, or adjacent with any order. Namespace : StringAlgorithms.SuffixStructures Assembly : StringAlgorithms.dll Syntax public enum AdjacencyOrder Fields Name Description After Before BeforeOrAfter None"
  },
  "api/StringAlgorithms.SuffixStructures.html": {
    "href": "api/StringAlgorithms.SuffixStructures.html",
    "title": "Namespace StringAlgorithms.SuffixStructures",
    "keywords": "Namespace StringAlgorithms.SuffixStructures Classes SuffixStructureBuilderExtensions Extension methods for all ISuffixStructureBuilder<TEdge, TNode, TPath, TBuilder> concretions. SuffixStructureEdgeExtensions Extension methods for all ISuffixStructureEdge<TEdge, TNode, TPath, TBuilder> edge concretions. SuffixStructureMatch<TPath> The result of matching a against a concretion. SuffixStructureMatcher Exposes utility methods to match a against a ISuffixStructureNode<TEdge, TNode, TPath, TBuilder> concretion. SuffixStructureNodeExtensions Extension methods for all ISuffixStructureNode<TEdge, TNode, TPath, TBuilder> node concretions. SuffixStructurePathExtensions Extension methods for all ISuffixStructurePath<TEdge, TNode, TPath, TBuilder> path concretions. SuffixStructuresConverter Conversion utilities between suffix data structures, such as Suffix Tree and Tries. Interfaces ISuffixStructureBuilder<TEdge, TNode, TPath, TBuilder> Builds objects, such as edges, nodes and paths, for the Suffix Structure concretion it is the builder of. ISuffixStructureEdge<TEdge, TNode, TPath, TBuilder> An edge of a Suffix Structure, directionally linking two nodes and forming a path hop. Represents prefix matching. ISuffixStructureNode<TEdge, TNode, TPath, TBuilder> The node of a Suffix Structure, linked by edges and forming paths. Represents pattern matching state. ISuffixStructurePath<TEdge, TNode, TPath, TBuilder> A path of a Suffix Structure, a sequence of nodes and their incoming edges. Represents multi-step pattern matching. Enums AdjacencyOrder The possible adjacency order relationships between two edges by the parts they refer to in the text: non-adjacent (overlapping on more than an extreme or not at all), adjacent with a specific order, or adjacent with any order."
  },
  "api/StringAlgorithms.SuffixStructures.ISuffixStructureBuilder-4.html": {
    "href": "api/StringAlgorithms.SuffixStructures.ISuffixStructureBuilder-4.html",
    "title": "Interface ISuffixStructureBuilder<TEdge, TNode, TPath, TBuilder>",
    "keywords": "Interface ISuffixStructureBuilder<TEdge, TNode, TPath, TBuilder> Builds objects, such as edges, nodes and paths, for the Suffix Structure concretion it is the builder of. Namespace : StringAlgorithms.SuffixStructures Assembly : StringAlgorithms.dll Syntax public interface ISuffixStructureBuilder<TEdge, TNode, TPath, TBuilder> where TEdge : ISuffixStructureEdge<TEdge, TNode, TPath, TBuilder> where TNode : ISuffixStructureNode<TEdge, TNode, TPath, TBuilder> where TPath : ISuffixStructurePath<TEdge, TNode, TPath, TBuilder> where TBuilder : ISuffixStructureBuilder<TEdge, TNode, TPath, TBuilder> Type Parameters Name Description TEdge The type of edges of the specific Suffix Structure. TNode The type of nodes of the specific Suffix Structure. TPath The type of paths of the specific Suffix Structure. TBuilder The type of builder for the specific Suffix Structure. Remarks This interface allows to have a shared construction interface for objects among all Suffix Structure. It is a workaround to the limitation of not having constructor signatures in interfaces. See https://codeblog.jonskeet.uk/2008/08/29/lessons-learned-from-protocol-buffers-part-4-static-interfaces/ Methods | Improve this Doc View Source BuildTree(TextWithTerminator) Build a Suffix Structure of the provided text, which is a n-ary search tree in which edges coming out of a node are substrings of text which identify edges shared by all paths to leaves, starting from the node. Declaration TNode BuildTree(TextWithTerminator text) Parameters Type Name Description TextWithTerminator text The text to build the Suffix Structure of, with its terminator (required for traversal). Returns Type Description TNode The root node of the Suffix Structure. Remarks Substrings of text are identified by their start position in text and their length. | Improve this Doc View Source EmptyPath() Builds an empty path, i.e. an empty sequence of nodes. Declaration TPath EmptyPath() Returns Type Description TPath | Improve this Doc View Source MultistepsPath(IEnumerable<KeyValuePair<TEdge, TNode>>) Builds a path composed of the provided sequence of key-value pairs of edges and nodes. Declaration TPath MultistepsPath(IEnumerable<KeyValuePair<TEdge, TNode>> pathNodes) Parameters Type Name Description IEnumerable < KeyValuePair <TEdge, TNode>> pathNodes A sequence of key-value pairs (edge, node). Returns Type Description TPath | Improve this Doc View Source MultistepsPath((TEdge edge, TNode node)[]) Builds a path composed of the provided couples of edges and nodes. Declaration TPath MultistepsPath(params (TEdge edge, TNode node)[] pathNodes) Parameters Type Name Description System.ValueTuple <TEdge, TNode>[] pathNodes An array of couples (edge, node). Returns Type Description TPath | Improve this Doc View Source SingletonPath(TEdge, TNode) Builds a path composed of a single node with its incoming edge. Declaration TPath SingletonPath(TEdge edge, TNode node) Parameters Type Name Description TEdge edge The edge leading to the node. TNode node The node defining the singleton path. Returns Type Description TPath Extension Methods SuffixStructureBuilderExtensions.BuildTree<TEdge, TNode, TPath, TBuilder>(ISuffixStructureBuilder<TEdge, TNode, TPath, TBuilder>, String)"
  },
  "api/StringAlgorithms.SuffixStructures.ISuffixStructureEdge-4.html": {
    "href": "api/StringAlgorithms.SuffixStructures.ISuffixStructureEdge-4.html",
    "title": "Interface ISuffixStructureEdge<TEdge, TNode, TPath, TBuilder>",
    "keywords": "Interface ISuffixStructureEdge<TEdge, TNode, TPath, TBuilder> An edge of a Suffix Structure, directionally linking two nodes and forming a path hop. Represents prefix matching. Inherited Members TextWithTerminator.ISelector.Of(TextWithTerminator) Namespace : StringAlgorithms.SuffixStructures Assembly : StringAlgorithms.dll Syntax public interface ISuffixStructureEdge<TEdge, TNode, TPath, TBuilder> : TextWithTerminator.ISelector where TEdge : ISuffixStructureEdge<TEdge, TNode, TPath, TBuilder> where TNode : ISuffixStructureNode<TEdge, TNode, TPath, TBuilder> where TPath : ISuffixStructurePath<TEdge, TNode, TPath, TBuilder> where TBuilder : ISuffixStructureBuilder<TEdge, TNode, TPath, TBuilder> Type Parameters Name Description TEdge The type of edges of the specific Suffix Structure. TNode The type of nodes of the specific Suffix Structure. TPath The type of paths of the specific Suffix Structure. TBuilder The type of builder for the specific Suffix Structure. Properties | Improve this Doc View Source Length The length of the edge string. Declaration int Length { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Start The index of the first character of the edge string in the text. Declaration int Start { get; } Property Value Type Description System.Int32 Extension Methods SuffixStructureEdgeExtensions.IsAdjacentTo<TEdge, TNode, TPath, TBuilder>(ISuffixStructureEdge<TEdge, TNode, TPath, TBuilder>, TEdge, AdjacencyOrder)"
  },
  "api/StringAlgorithms.SuffixStructures.ISuffixStructureNode-4.html": {
    "href": "api/StringAlgorithms.SuffixStructures.ISuffixStructureNode-4.html",
    "title": "Interface ISuffixStructureNode<TEdge, TNode, TPath, TBuilder>",
    "keywords": "Interface ISuffixStructureNode<TEdge, TNode, TPath, TBuilder> The node of a Suffix Structure, linked by edges and forming paths. Represents pattern matching state. Namespace : StringAlgorithms.SuffixStructures Assembly : StringAlgorithms.dll Syntax public interface ISuffixStructureNode<TEdge, TNode, TPath, TBuilder> where TEdge : ISuffixStructureEdge<TEdge, TNode, TPath, TBuilder> where TNode : ISuffixStructureNode<TEdge, TNode, TPath, TBuilder> where TPath : ISuffixStructurePath<TEdge, TNode, TPath, TBuilder> where TBuilder : ISuffixStructureBuilder<TEdge, TNode, TPath, TBuilder> Type Parameters Name Description TEdge The type of edges of the specific Suffix Structure. TNode The type of nodes of the specific Suffix Structure. TPath The type of paths of the specific Suffix Structure. TBuilder The type of builder for the specific Suffix Structure. Properties | Improve this Doc View Source Children A readonly view of the children private collection of this node. Empty for leaves. Declaration IDictionary<TEdge, TNode> Children { get; } Property Value Type Description IDictionary <TEdge, TNode> | Improve this Doc View Source Start The index of the character, the path from the root leading to this leaf starts with. Non-null for leaves only. Declaration int? Start { get; } Property Value Type Description System.Nullable < System.Int32 >"
  },
  "api/StringAlgorithms.SuffixStructures.ISuffixStructurePath-4.html": {
    "href": "api/StringAlgorithms.SuffixStructures.ISuffixStructurePath-4.html",
    "title": "Interface ISuffixStructurePath<TEdge, TNode, TPath, TBuilder>",
    "keywords": "Interface ISuffixStructurePath<TEdge, TNode, TPath, TBuilder> A path of a Suffix Structure, a sequence of nodes and their incoming edges. Represents multi-step pattern matching. Namespace : StringAlgorithms.SuffixStructures Assembly : StringAlgorithms.dll Syntax public interface ISuffixStructurePath<TEdge, TNode, TPath, TBuilder> where TEdge : ISuffixStructureEdge<TEdge, TNode, TPath, TBuilder> where TNode : ISuffixStructureNode<TEdge, TNode, TPath, TBuilder> where TPath : ISuffixStructurePath<TEdge, TNode, TPath, TBuilder> where TBuilder : ISuffixStructureBuilder<TEdge, TNode, TPath, TBuilder> Type Parameters Name Description TEdge The type of edges of the specific Suffix Structure. TNode The type of nodes of the specific Suffix Structure. TPath The type of paths of the specific Suffix Structure. TBuilder The type of builder for the specific Suffix Structure. Properties | Improve this Doc View Source PathNodes A readonly view of the private collection of path nodes. Declaration IEnumerable<KeyValuePair<TEdge, TNode>> PathNodes { get; } Property Value Type Description IEnumerable < KeyValuePair <TEdge, TNode>>"
  },
  "api/StringAlgorithms.SuffixStructures.SuffixStructureBuilderExtensions.html": {
    "href": "api/StringAlgorithms.SuffixStructures.SuffixStructureBuilderExtensions.html",
    "title": "Class SuffixStructureBuilderExtensions",
    "keywords": "Class SuffixStructureBuilderExtensions Extension methods for all ISuffixStructureBuilder<TEdge, TNode, TPath, TBuilder> concretions. Inheritance System.Object SuffixStructureBuilderExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : StringAlgorithms.SuffixStructures Assembly : StringAlgorithms.dll Syntax public static class SuffixStructureBuilderExtensions Methods | Improve this Doc View Source BuildTree<TEdge, TNode, TPath, TBuilder>(ISuffixStructureBuilder<TEdge, TNode, TPath, TBuilder>, String) Declaration public static TNode BuildTree<TEdge, TNode, TPath, TBuilder>(this ISuffixStructureBuilder<TEdge, TNode, TPath, TBuilder> builder, string text) where TEdge : ISuffixStructureEdge<TEdge, TNode, TPath, TBuilder> where TNode : ISuffixStructureNode<TEdge, TNode, TPath, TBuilder> where TPath : ISuffixStructurePath<TEdge, TNode, TPath, TBuilder> where TBuilder : ISuffixStructureBuilder<TEdge, TNode, TPath, TBuilder> Parameters Type Name Description ISuffixStructureBuilder <TEdge, TNode, TPath, TBuilder> builder System.String text The text to build the Suffix Structure of, without any terminator (automatically added). Returns Type Description TNode Type Parameters Name Description TEdge TNode TPath TBuilder"
  },
  "api/StringAlgorithms.SuffixStructures.SuffixStructureEdgeExtensions.html": {
    "href": "api/StringAlgorithms.SuffixStructures.SuffixStructureEdgeExtensions.html",
    "title": "Class SuffixStructureEdgeExtensions",
    "keywords": "Class SuffixStructureEdgeExtensions Extension methods for all ISuffixStructureEdge<TEdge, TNode, TPath, TBuilder> edge concretions. Inheritance System.Object SuffixStructureEdgeExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : StringAlgorithms.SuffixStructures Assembly : StringAlgorithms.dll Syntax public static class SuffixStructureEdgeExtensions Methods | Improve this Doc View Source IsAdjacentTo<TEdge, TNode, TPath, TBuilder>(ISuffixStructureEdge<TEdge, TNode, TPath, TBuilder>, TEdge, AdjacencyOrder) Whether the first edge is in adjacency order w.r.t. the second edge. Declaration public static bool IsAdjacentTo<TEdge, TNode, TPath, TBuilder>(this ISuffixStructureEdge<TEdge, TNode, TPath, TBuilder> first, TEdge second, AdjacencyOrder order = AdjacencyOrder.BeforeOrAfter) where TEdge : ISuffixStructureEdge<TEdge, TNode, TPath, TBuilder> where TNode : ISuffixStructureNode<TEdge, TNode, TPath, TBuilder> where TPath : ISuffixStructurePath<TEdge, TNode, TPath, TBuilder> where TBuilder : ISuffixStructureBuilder<TEdge, TNode, TPath, TBuilder> Parameters Type Name Description ISuffixStructureEdge <TEdge, TNode, TPath, TBuilder> first The edge to be compared for adjacency. TEdge second The edge to compare the first edge against. AdjacencyOrder order The adjacency relationship order to use for comparison. Returns Type Description System.Boolean True if the specified adjacency relationship is respected. Type Parameters Name Description TEdge TNode TPath TBuilder"
  },
  "api/StringAlgorithms.SuffixStructures.SuffixStructureMatch-1.html": {
    "href": "api/StringAlgorithms.SuffixStructures.SuffixStructureMatch-1.html",
    "title": "Class SuffixStructureMatch<TPath>",
    "keywords": "Class SuffixStructureMatch<TPath> The result of matching a against a concretion. Inheritance System.Object SuffixStructureMatch<TPath> Implements System.IEquatable < SuffixStructureMatch <TPath>> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : StringAlgorithms.SuffixStructures Assembly : StringAlgorithms.dll Syntax public sealed class SuffixStructureMatch<TPath> : IEquatable<SuffixStructureMatch<TPath>> Type Parameters Name Description TPath Constructors | Improve this Doc View Source SuffixStructureMatch(Boolean, Int32, Int32, TPath) The result of matching a against a concretion. Declaration public SuffixStructureMatch(bool Success, int Begin, int MatchedChars, TPath Path) Parameters Type Name Description System.Boolean Success Whether the text has been completely matched or not. System.Int32 Begin The index in text of the best match in the Suffix Tree. System.Int32 MatchedChars The number of chars matched from the text. TPath Path The path of nodes visited by the matching algorithm, from the root downwards. Properties | Improve this Doc View Source Begin Declaration public int Begin { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source MatchedChars Declaration public int MatchedChars { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source Path Declaration public TPath Path { get; set; } Property Value Type Description TPath | Improve this Doc View Source Success Declaration public bool Success { get; set; } Property Value Type Description System.Boolean Implements System.IEquatable<T>"
  },
  "api/StringAlgorithms.SuffixStructures.SuffixStructureMatcher.html": {
    "href": "api/StringAlgorithms.SuffixStructures.SuffixStructureMatcher.html",
    "title": "Class SuffixStructureMatcher",
    "keywords": "Class SuffixStructureMatcher Exposes utility methods to match a against a ISuffixStructureNode<TEdge, TNode, TPath, TBuilder> concretion. Inheritance System.Object SuffixStructureMatcher Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : StringAlgorithms.SuffixStructures Assembly : StringAlgorithms.dll Syntax public static class SuffixStructureMatcher Methods | Improve this Doc View Source Match<TEdge, TNode, TPath, TBuilder>(ISuffixStructureNode<TEdge, TNode, TPath, TBuilder>, TextWithTerminator, String) Tries to match a pattern against a Suffix Tree built on a text. Declaration public static SuffixStructureMatch<TPath> Match<TEdge, TNode, TPath, TBuilder>(this ISuffixStructureNode<TEdge, TNode, TPath, TBuilder> node, TextWithTerminator text, string pattern) where TEdge : ISuffixStructureEdge<TEdge, TNode, TPath, TBuilder> where TNode : ISuffixStructureNode<TEdge, TNode, TPath, TBuilder> where TPath : ISuffixStructurePath<TEdge, TNode, TPath, TBuilder> where TBuilder : ISuffixStructureBuilder<TEdge, TNode, TPath, TBuilder>, new() Parameters Type Name Description ISuffixStructureNode <TEdge, TNode, TPath, TBuilder> node The root of the Suffix Tree, to match the suffix of text against. TextWithTerminator text The text whose Suffix Tree has to be matched against the pattern. System.String pattern Returns Type Description SuffixStructureMatch <TPath> A successful or non-successful match. Type Parameters Name Description TEdge TNode TPath TBuilder"
  },
  "api/StringAlgorithms.SuffixStructures.SuffixStructureNodeExtensions.html": {
    "href": "api/StringAlgorithms.SuffixStructures.SuffixStructureNodeExtensions.html",
    "title": "Class SuffixStructureNodeExtensions",
    "keywords": "Class SuffixStructureNodeExtensions Extension methods for all ISuffixStructureNode<TEdge, TNode, TPath, TBuilder> node concretions. Inheritance System.Object SuffixStructureNodeExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : StringAlgorithms.SuffixStructures Assembly : StringAlgorithms.dll Syntax public static class SuffixStructureNodeExtensions Methods | Improve this Doc View Source GetAllNodeToLeafPaths<TEdge, TNode, TPath, TBuilder>(ISuffixStructureNode<TEdge, TNode, TPath, TBuilder>) Returns all paths from the provided node to a leaf. Declaration public static IEnumerable<TPath> GetAllNodeToLeafPaths<TEdge, TNode, TPath, TBuilder>(this ISuffixStructureNode<TEdge, TNode, TPath, TBuilder> node) where TEdge : ISuffixStructureEdge<TEdge, TNode, TPath, TBuilder> where TNode : ISuffixStructureNode<TEdge, TNode, TPath, TBuilder> where TPath : ISuffixStructurePath<TEdge, TNode, TPath, TBuilder> where TBuilder : ISuffixStructureBuilder<TEdge, TNode, TPath, TBuilder>, new() Parameters Type Name Description ISuffixStructureNode <TEdge, TNode, TPath, TBuilder> node The node, to start the structure traversal from. Returns Type Description IEnumerable <TPath> A sequence of pairs of node and its incoming edge. Type Parameters Name Description TEdge TNode TPath TBuilder | Improve this Doc View Source GetAllSuffixesFor<TEdge, TNode, TPath, TBuilder>(ISuffixStructureNode<TEdge, TNode, TPath, TBuilder>, TextWithTerminator) Returns all suffixes for the provided text from the node down the structure, up to leaves. Declaration public static IEnumerable<string> GetAllSuffixesFor<TEdge, TNode, TPath, TBuilder>(this ISuffixStructureNode<TEdge, TNode, TPath, TBuilder> node, TextWithTerminator text) where TEdge : ISuffixStructureEdge<TEdge, TNode, TPath, TBuilder> where TNode : ISuffixStructureNode<TEdge, TNode, TPath, TBuilder> where TPath : ISuffixStructurePath<TEdge, TNode, TPath, TBuilder> where TBuilder : ISuffixStructureBuilder<TEdge, TNode, TPath, TBuilder>, new() Parameters Type Name Description ISuffixStructureNode <TEdge, TNode, TPath, TBuilder> node The node, to start the structure traversal from. TextWithTerminator text The text with terminator, whose suffixes have to be extracted. Returns Type Description IEnumerable < System.String > A sequence of strings, each one being a suffix. Type Parameters Name Description TEdge TNode TPath TBuilder | Improve this Doc View Source IsLeaf<TEdge, TNode, TPath, TBuilder>(ISuffixStructureNode<TEdge, TNode, TPath, TBuilder>) Whether the provided node is a leaf (i.e. has no children), or not. Declaration public static bool IsLeaf<TEdge, TNode, TPath, TBuilder>(this ISuffixStructureNode<TEdge, TNode, TPath, TBuilder> node) where TEdge : ISuffixStructureEdge<TEdge, TNode, TPath, TBuilder> where TNode : ISuffixStructureNode<TEdge, TNode, TPath, TBuilder> where TPath : ISuffixStructurePath<TEdge, TNode, TPath, TBuilder> where TBuilder : ISuffixStructureBuilder<TEdge, TNode, TPath, TBuilder>, new() Parameters Type Name Description ISuffixStructureNode <TEdge, TNode, TPath, TBuilder> node The node whose children have to be checked. Returns Type Description System.Boolean Type Parameters Name Description TEdge TNode TPath TBuilder"
  },
  "api/StringAlgorithms.SuffixStructures.SuffixStructurePathExtensions.html": {
    "href": "api/StringAlgorithms.SuffixStructures.SuffixStructurePathExtensions.html",
    "title": "Class SuffixStructurePathExtensions",
    "keywords": "Class SuffixStructurePathExtensions Extension methods for all ISuffixStructurePath<TEdge, TNode, TPath, TBuilder> path concretions. Inheritance System.Object SuffixStructurePathExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : StringAlgorithms.SuffixStructures Assembly : StringAlgorithms.dll Syntax public static class SuffixStructurePathExtensions Methods | Improve this Doc View Source Append<TEdge, TNode, TPath, TBuilder>(ISuffixStructurePath<TEdge, TNode, TPath, TBuilder>, TEdge, TNode) Append the provided node with its incoming edge to the provided path, bulding a new path. Declaration public static TPath Append<TEdge, TNode, TPath, TBuilder>(this ISuffixStructurePath<TEdge, TNode, TPath, TBuilder> path, TEdge edge, TNode node) where TEdge : ISuffixStructureEdge<TEdge, TNode, TPath, TBuilder> where TNode : ISuffixStructureNode<TEdge, TNode, TPath, TBuilder> where TPath : ISuffixStructurePath<TEdge, TNode, TPath, TBuilder> where TBuilder : ISuffixStructureBuilder<TEdge, TNode, TPath, TBuilder>, new() Parameters Type Name Description ISuffixStructurePath <TEdge, TNode, TPath, TBuilder> path TEdge edge The path, to appended the node and the edge to. TNode node The node to be appended. Returns Type Description TPath A new path, whose nodes are the concatenation of the nodes of the provided path and the one appended. Type Parameters Name Description TEdge TNode TPath TBuilder | Improve this Doc View Source Concat<TEdge, TNode, TPath, TBuilder>(ISuffixStructurePath<TEdge, TNode, TPath, TBuilder>, ISuffixStructurePath<TEdge, TNode, TPath, TBuilder>) Builds a new path of nodes, appending the nodes of the second path to the first path. Declaration public static TPath Concat<TEdge, TNode, TPath, TBuilder>(this ISuffixStructurePath<TEdge, TNode, TPath, TBuilder> first, ISuffixStructurePath<TEdge, TNode, TPath, TBuilder> second) where TEdge : ISuffixStructureEdge<TEdge, TNode, TPath, TBuilder> where TNode : ISuffixStructureNode<TEdge, TNode, TPath, TBuilder> where TPath : ISuffixStructurePath<TEdge, TNode, TPath, TBuilder> where TBuilder : ISuffixStructureBuilder<TEdge, TNode, TPath, TBuilder>, new() Parameters Type Name Description ISuffixStructurePath <TEdge, TNode, TPath, TBuilder> first The path, to append nodes to. ISuffixStructurePath <TEdge, TNode, TPath, TBuilder> second The path, whose nodes have to be appended. Returns Type Description TPath A new path, whose nodes are the concatenation of the nodes of the two paths. Type Parameters Name Description TEdge TNode TPath TBuilder | Improve this Doc View Source IsSuffixOf<TEdge, TNode, TPath, TBuilder>(ISuffixStructurePath<TEdge, TNode, TPath, TBuilder>, TextWithTerminator) Whether this path identifies a suffix of the provided text. Declaration public static bool IsSuffixOf<TEdge, TNode, TPath, TBuilder>(this ISuffixStructurePath<TEdge, TNode, TPath, TBuilder> path, TextWithTerminator text) where TEdge : ISuffixStructureEdge<TEdge, TNode, TPath, TBuilder> where TNode : ISuffixStructureNode<TEdge, TNode, TPath, TBuilder> where TPath : ISuffixStructurePath<TEdge, TNode, TPath, TBuilder> where TBuilder : ISuffixStructureBuilder<TEdge, TNode, TPath, TBuilder>, new() Parameters Type Name Description ISuffixStructurePath <TEdge, TNode, TPath, TBuilder> path TextWithTerminator text The text, including the terminator character. Returns Type Description System.Boolean True if a suffix. Type Parameters Name Description TEdge TNode TPath TBuilder | Improve this Doc View Source SuffixFor<TEdge, TNode, TPath, TBuilder>(ISuffixStructurePath<TEdge, TNode, TPath, TBuilder>, TextWithTerminator) Calculate the suffix corresponding to this path on the provided terminator-including text. Declaration public static string SuffixFor<TEdge, TNode, TPath, TBuilder>(this ISuffixStructurePath<TEdge, TNode, TPath, TBuilder> path, TextWithTerminator text) where TEdge : ISuffixStructureEdge<TEdge, TNode, TPath, TBuilder> where TNode : ISuffixStructureNode<TEdge, TNode, TPath, TBuilder> where TPath : ISuffixStructurePath<TEdge, TNode, TPath, TBuilder> where TBuilder : ISuffixStructureBuilder<TEdge, TNode, TPath, TBuilder>, new() Parameters Type Name Description ISuffixStructurePath <TEdge, TNode, TPath, TBuilder> path The path to traverse to build the suffix. TextWithTerminator text The text, including the terminator character. Returns Type Description System.String A string containing the suffix. Type Parameters Name Description TEdge TNode TPath TBuilder"
  },
  "api/StringAlgorithms.SuffixStructures.SuffixStructuresConverter.html": {
    "href": "api/StringAlgorithms.SuffixStructures.SuffixStructuresConverter.html",
    "title": "Class SuffixStructuresConverter",
    "keywords": "Class SuffixStructuresConverter Conversion utilities between suffix data structures, such as Suffix Tree and Tries. Inheritance System.Object SuffixStructuresConverter Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : StringAlgorithms.SuffixStructures Assembly : StringAlgorithms.dll Syntax public static class SuffixStructuresConverter Methods | Improve this Doc View Source TrieToTree(SuffixTrieNode) Converts the provided SuffixTrieNode into a SuffixTreeNode , building its entire structure. Declaration public static SuffixTreeNode TrieToTree(SuffixTrieNode trieNode) Parameters Type Name Description SuffixTrieNode trieNode The node identifying the trie structure to be converted. Returns Type Description SuffixTreeNode A Suffix Tree."
  },
  "api/StringAlgorithms.SuffixStructures.Tests.html": {
    "href": "api/StringAlgorithms.SuffixStructures.Tests.html",
    "title": "Namespace StringAlgorithms.SuffixStructures.Tests",
    "keywords": "Namespace StringAlgorithms.SuffixStructures.Tests Classes SuffixStructuresNodeExtensionsTests"
  },
  "api/StringAlgorithms.SuffixStructures.Tests.SuffixStructuresNodeExtensionsTests.html": {
    "href": "api/StringAlgorithms.SuffixStructures.Tests.SuffixStructuresNodeExtensionsTests.html",
    "title": "Class SuffixStructuresNodeExtensionsTests",
    "keywords": "Class SuffixStructuresNodeExtensionsTests Inheritance System.Object SuffixStructuresNodeExtensionsTests Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : StringAlgorithms.SuffixStructures.Tests Assembly : StringAlgorithms.Tests.dll Syntax public class SuffixStructuresNodeExtensionsTests Methods | Improve this Doc View Source GetAllNodeToLeafPaths_IsCorrect() Declaration public void GetAllNodeToLeafPaths_IsCorrect() | Improve this Doc View Source GetAllNodeToLeafPaths_IsCorrect2() Declaration public void GetAllNodeToLeafPaths_IsCorrect2() | Improve this Doc View Source GetAllSuffixesFor_IsCorrect() Declaration public void GetAllSuffixesFor_IsCorrect() | Improve this Doc View Source GetAllSuffixesFor_IsCorrect2() Declaration public void GetAllSuffixesFor_IsCorrect2() | Improve this Doc View Source IsLeaf_IsCorrectForSuffixTree() Declaration public void IsLeaf_IsCorrectForSuffixTree() | Improve this Doc View Source IsLeaf_IsCorrectForSuffixTrie() Declaration public void IsLeaf_IsCorrectForSuffixTrie()"
  },
  "api/StringAlgorithms.SuffixTrees.html": {
    "href": "api/StringAlgorithms.SuffixTrees.html",
    "title": "Namespace StringAlgorithms.SuffixTrees",
    "keywords": "Namespace StringAlgorithms.SuffixTrees Classes SuffixTreeBuilder SuffixTreeEdge The index key of the collection of children of a Suffix Tree node, which identifies a non-empty substring in text, used as a selector to navigate the Suffix Tree in text pattern matching. SuffixTreeNode An immutable node of an immutable Suffix Tree, recursively pointing to its children node. SuffixTreeNode.Intermediate Builds an intermediate node, i.e. a node with children and their corresponding incoming edges. SuffixTreeNode.Leaf Builds a leaf, i.e. a node with no children and the start index of the suffix in the text. SuffixTreePath An immutable sequence of Suffix Tree nodes, where each node is child of its predecessor and parent of its successor."
  },
  "api/StringAlgorithms.SuffixTrees.SuffixTreeBuilder.html": {
    "href": "api/StringAlgorithms.SuffixTrees.SuffixTreeBuilder.html",
    "title": "Class SuffixTreeBuilder",
    "keywords": "Class SuffixTreeBuilder Inheritance System.Object SuffixTreeBuilder Implements ISuffixStructureBuilder < SuffixTreeEdge , SuffixTreeNode , SuffixTreePath , SuffixTreeBuilder > Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : StringAlgorithms.SuffixTrees Assembly : StringAlgorithms.dll Syntax public class SuffixTreeBuilder : ISuffixStructureBuilder<SuffixTreeEdge, SuffixTreeNode, SuffixTreePath, SuffixTreeBuilder> Methods | Improve this Doc View Source BuildTree(TextWithTerminator) Declaration public SuffixTreeNode BuildTree(TextWithTerminator text) Parameters Type Name Description TextWithTerminator text Returns Type Description SuffixTreeNode | Improve this Doc View Source EmptyPath() Declaration public SuffixTreePath EmptyPath() Returns Type Description SuffixTreePath | Improve this Doc View Source MultistepsPath(IEnumerable<KeyValuePair<SuffixTreeEdge, SuffixTreeNode>>) Declaration public SuffixTreePath MultistepsPath(IEnumerable<KeyValuePair<SuffixTreeEdge, SuffixTreeNode>> pathNodes) Parameters Type Name Description IEnumerable < KeyValuePair < SuffixTreeEdge , SuffixTreeNode >> pathNodes Returns Type Description SuffixTreePath | Improve this Doc View Source MultistepsPath((SuffixTreeEdge edge, SuffixTreeNode node)[]) Declaration public SuffixTreePath MultistepsPath(params (SuffixTreeEdge edge, SuffixTreeNode node)[] pathNodes) Parameters Type Name Description System.ValueTuple < SuffixTreeEdge , SuffixTreeNode >[] pathNodes Returns Type Description SuffixTreePath | Improve this Doc View Source SingletonPath(SuffixTreeEdge, SuffixTreeNode) Declaration public SuffixTreePath SingletonPath(SuffixTreeEdge edge, SuffixTreeNode node) Parameters Type Name Description SuffixTreeEdge edge SuffixTreeNode node Returns Type Description SuffixTreePath Implements ISuffixStructureBuilder<TEdge, TNode, TPath, TBuilder> Extension Methods SuffixStructureBuilderExtensions.BuildTree<TEdge, TNode, TPath, TBuilder>(ISuffixStructureBuilder<TEdge, TNode, TPath, TBuilder>, String)"
  },
  "api/StringAlgorithms.SuffixTrees.SuffixTreeEdge.html": {
    "href": "api/StringAlgorithms.SuffixTrees.SuffixTreeEdge.html",
    "title": "Class SuffixTreeEdge",
    "keywords": "Class SuffixTreeEdge The index key of the collection of children of a Suffix Tree node, which identifies a non-empty substring in text, used as a selector to navigate the Suffix Tree in text pattern matching. Inheritance System.Object SuffixTreeEdge SuffixTrieEdge Implements ISuffixStructureEdge < SuffixTreeEdge , SuffixTreeNode , SuffixTreePath , SuffixTreeBuilder > TextWithTerminator.ISelector System.IEquatable < SuffixTreeEdge > Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : StringAlgorithms.SuffixTrees Assembly : StringAlgorithms.dll Syntax public class SuffixTreeEdge : ISuffixStructureEdge<SuffixTreeEdge, SuffixTreeNode, SuffixTreePath, SuffixTreeBuilder>, TextWithTerminator.ISelector, IEquatable<SuffixTreeEdge> Constructors | Improve this Doc View Source SuffixTreeEdge(Int32, Int32) The index key of the collection of children of a Suffix Tree node, which identifies a non-empty substring in text, used as a selector to navigate the Suffix Tree in text pattern matching. Declaration public SuffixTreeEdge(int Start, int Length) Parameters Type Name Description System.Int32 Start System.Int32 Length Properties | Improve this Doc View Source Length Declaration public int Length { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source Start Declaration public int Start { get; set; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source Of(TextWithTerminator) Declaration public virtual string Of(TextWithTerminator text) Parameters Type Name Description TextWithTerminator text Returns Type Description System.String Implements ISuffixStructureEdge<TEdge, TNode, TPath, TBuilder> TextWithTerminator.ISelector System.IEquatable<T> Extension Methods SuffixStructureEdgeExtensions.IsAdjacentTo<TEdge, TNode, TPath, TBuilder>(ISuffixStructureEdge<TEdge, TNode, TPath, TBuilder>, TEdge, AdjacencyOrder)"
  },
  "api/StringAlgorithms.SuffixTrees.SuffixTreeNode.html": {
    "href": "api/StringAlgorithms.SuffixTrees.SuffixTreeNode.html",
    "title": "Class SuffixTreeNode",
    "keywords": "Class SuffixTreeNode An immutable node of an immutable Suffix Tree, recursively pointing to its children node. Inheritance System.Object SuffixTreeNode SuffixTreeNode.Intermediate SuffixTreeNode.Leaf Implements ISuffixStructureNode < SuffixTreeEdge , SuffixTreeNode , SuffixTreePath , SuffixTreeBuilder > System.IEquatable < SuffixTreeNode > Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : StringAlgorithms.SuffixTrees Assembly : StringAlgorithms.dll Syntax public abstract class SuffixTreeNode : ISuffixStructureNode<SuffixTreeEdge, SuffixTreeNode, SuffixTreePath, SuffixTreeBuilder>, IEquatable<SuffixTreeNode> Remarks Immutability is guaranteed by using ValueReadOnlyCollection<T> . Constructors | Improve this Doc View Source SuffixTreeNode(IDictionary<SuffixTreeEdge, SuffixTreeNode>, Nullable<Int32>) An immutable node of an immutable Suffix Tree, recursively pointing to its children node. Declaration protected SuffixTreeNode(IDictionary<SuffixTreeEdge, SuffixTreeNode> Children, int? Start) Parameters Type Name Description IDictionary < SuffixTreeEdge , SuffixTreeNode > Children The collection of children for the node, indexed by string edges. System.Nullable < System.Int32 > Start Remarks Immutability is guaranteed by using ValueReadOnlyCollection<T> . Properties | Improve this Doc View Source Children Declaration public IDictionary<SuffixTreeEdge, SuffixTreeNode> Children { get; } Property Value Type Description IDictionary < SuffixTreeEdge , SuffixTreeNode > | Improve this Doc View Source Item[SuffixTreeEdge] Indexes into the children of this node, by edge. Declaration public SuffixTreeNode this[SuffixTreeEdge edge] { get; } Parameters Type Name Description SuffixTreeEdge edge Property Value Type Description SuffixTreeNode | Improve this Doc View Source Start Declaration public int? Start { get; } Property Value Type Description System.Nullable < System.Int32 > Implements ISuffixStructureNode<TEdge, TNode, TPath, TBuilder> System.IEquatable<T> Extension Methods SuffixStructureMatcher.Match<TEdge, TNode, TPath, TBuilder>(ISuffixStructureNode<TEdge, TNode, TPath, TBuilder>, TextWithTerminator, String) SuffixStructureNodeExtensions.IsLeaf<TEdge, TNode, TPath, TBuilder>(ISuffixStructureNode<TEdge, TNode, TPath, TBuilder>) SuffixStructureNodeExtensions.GetAllNodeToLeafPaths<TEdge, TNode, TPath, TBuilder>(ISuffixStructureNode<TEdge, TNode, TPath, TBuilder>) SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode, TPath, TBuilder>(ISuffixStructureNode<TEdge, TNode, TPath, TBuilder>, TextWithTerminator)"
  },
  "api/StringAlgorithms.SuffixTrees.SuffixTreeNode.Intermediate.html": {
    "href": "api/StringAlgorithms.SuffixTrees.SuffixTreeNode.Intermediate.html",
    "title": "Class SuffixTreeNode.Intermediate",
    "keywords": "Class SuffixTreeNode.Intermediate Builds an intermediate node, i.e. a node with children and their corresponding incoming edges. Inheritance System.Object SuffixTreeNode SuffixTreeNode.Intermediate Implements ISuffixStructureNode < SuffixTreeEdge , SuffixTreeNode , SuffixTreePath , SuffixTreeBuilder > System.IEquatable < SuffixTreeNode > System.IEquatable < SuffixTreeNode.Intermediate > Inherited Members SuffixTreeNode.Children SuffixTreeNode.Start SuffixTreeNode.Item[SuffixTreeEdge] System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : StringAlgorithms.SuffixTrees Assembly : StringAlgorithms.dll Syntax public class Intermediate : SuffixTreeNode, ISuffixStructureNode<SuffixTreeEdge, SuffixTreeNode, SuffixTreePath, SuffixTreeBuilder>, IEquatable<SuffixTreeNode>, IEquatable<SuffixTreeNode.Intermediate> Constructors | Improve this Doc View Source Intermediate(IDictionary<SuffixTreeEdge, SuffixTreeNode>) Builds an intermediate node, i.e. a node with children and their corresponding incoming edges. Declaration public Intermediate(IDictionary<SuffixTreeEdge, SuffixTreeNode> Children) Parameters Type Name Description IDictionary < SuffixTreeEdge , SuffixTreeNode > Children Implements ISuffixStructureNode<TEdge, TNode, TPath, TBuilder> System.IEquatable<T> System.IEquatable<T> Extension Methods SuffixStructureMatcher.Match<TEdge, TNode, TPath, TBuilder>(ISuffixStructureNode<TEdge, TNode, TPath, TBuilder>, TextWithTerminator, String) SuffixStructureNodeExtensions.IsLeaf<TEdge, TNode, TPath, TBuilder>(ISuffixStructureNode<TEdge, TNode, TPath, TBuilder>) SuffixStructureNodeExtensions.GetAllNodeToLeafPaths<TEdge, TNode, TPath, TBuilder>(ISuffixStructureNode<TEdge, TNode, TPath, TBuilder>) SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode, TPath, TBuilder>(ISuffixStructureNode<TEdge, TNode, TPath, TBuilder>, TextWithTerminator)"
  },
  "api/StringAlgorithms.SuffixTrees.SuffixTreeNode.Leaf.html": {
    "href": "api/StringAlgorithms.SuffixTrees.SuffixTreeNode.Leaf.html",
    "title": "Class SuffixTreeNode.Leaf",
    "keywords": "Class SuffixTreeNode.Leaf Builds a leaf, i.e. a node with no children and the start index of the suffix in the text. Inheritance System.Object SuffixTreeNode SuffixTreeNode.Leaf Implements ISuffixStructureNode < SuffixTreeEdge , SuffixTreeNode , SuffixTreePath , SuffixTreeBuilder > System.IEquatable < SuffixTreeNode > System.IEquatable < SuffixTreeNode.Leaf > Inherited Members SuffixTreeNode.Children SuffixTreeNode.Start SuffixTreeNode.Item[SuffixTreeEdge] System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : StringAlgorithms.SuffixTrees Assembly : StringAlgorithms.dll Syntax public class Leaf : SuffixTreeNode, ISuffixStructureNode<SuffixTreeEdge, SuffixTreeNode, SuffixTreePath, SuffixTreeBuilder>, IEquatable<SuffixTreeNode>, IEquatable<SuffixTreeNode.Leaf> Constructors | Improve this Doc View Source Leaf(Int32) Builds a leaf, i.e. a node with no children and the start index of the suffix in the text. Declaration public Leaf(int LeafStart) Parameters Type Name Description System.Int32 LeafStart Properties | Improve this Doc View Source LeafStart Declaration public int LeafStart { get; set; } Property Value Type Description System.Int32 Implements ISuffixStructureNode<TEdge, TNode, TPath, TBuilder> System.IEquatable<T> System.IEquatable<T> Extension Methods SuffixStructureMatcher.Match<TEdge, TNode, TPath, TBuilder>(ISuffixStructureNode<TEdge, TNode, TPath, TBuilder>, TextWithTerminator, String) SuffixStructureNodeExtensions.IsLeaf<TEdge, TNode, TPath, TBuilder>(ISuffixStructureNode<TEdge, TNode, TPath, TBuilder>) SuffixStructureNodeExtensions.GetAllNodeToLeafPaths<TEdge, TNode, TPath, TBuilder>(ISuffixStructureNode<TEdge, TNode, TPath, TBuilder>) SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode, TPath, TBuilder>(ISuffixStructureNode<TEdge, TNode, TPath, TBuilder>, TextWithTerminator)"
  },
  "api/StringAlgorithms.SuffixTrees.SuffixTreePath.html": {
    "href": "api/StringAlgorithms.SuffixTrees.SuffixTreePath.html",
    "title": "Class SuffixTreePath",
    "keywords": "Class SuffixTreePath An immutable sequence of Suffix Tree nodes, where each node is child of its predecessor and parent of its successor. Inheritance System.Object SuffixTreePath Implements ISuffixStructurePath < SuffixTreeEdge , SuffixTreeNode , SuffixTreePath , SuffixTreeBuilder > System.IEquatable < SuffixTreePath > Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : StringAlgorithms.SuffixTrees Assembly : StringAlgorithms.dll Syntax public class SuffixTreePath : ISuffixStructurePath<SuffixTreeEdge, SuffixTreeNode, SuffixTreePath, SuffixTreeBuilder>, IEquatable<SuffixTreePath> Remarks Immutability is guaranteed by using ValueReadOnlyDictionary<TKey, TValue> . Constructors | Improve this Doc View Source SuffixTreePath(IEnumerable<KeyValuePair<SuffixTreeEdge, SuffixTreeNode>>) An immutable sequence of Suffix Tree nodes, where each node is child of its predecessor and parent of its successor. Declaration public SuffixTreePath(IEnumerable<KeyValuePair<SuffixTreeEdge, SuffixTreeNode>> PathNodes) Parameters Type Name Description IEnumerable < KeyValuePair < SuffixTreeEdge , SuffixTreeNode >> PathNodes The sequence of nodes respecting the parent-child relationship. Remarks Immutability is guaranteed by using ValueReadOnlyDictionary<TKey, TValue> . Properties | Improve this Doc View Source PathNodes Declaration public IEnumerable<KeyValuePair<SuffixTreeEdge, SuffixTreeNode>> PathNodes { get; } Property Value Type Description IEnumerable < KeyValuePair < SuffixTreeEdge , SuffixTreeNode >> Implements ISuffixStructurePath<TEdge, TNode, TPath, TBuilder> System.IEquatable<T> Extension Methods SuffixStructurePathExtensions.SuffixFor<TEdge, TNode, TPath, TBuilder>(ISuffixStructurePath<TEdge, TNode, TPath, TBuilder>, TextWithTerminator) SuffixStructurePathExtensions.IsSuffixOf<TEdge, TNode, TPath, TBuilder>(ISuffixStructurePath<TEdge, TNode, TPath, TBuilder>, TextWithTerminator) SuffixStructurePathExtensions.Concat<TEdge, TNode, TPath, TBuilder>(ISuffixStructurePath<TEdge, TNode, TPath, TBuilder>, ISuffixStructurePath<TEdge, TNode, TPath, TBuilder>) SuffixStructurePathExtensions.Append<TEdge, TNode, TPath, TBuilder>(ISuffixStructurePath<TEdge, TNode, TPath, TBuilder>, TEdge, TNode)"
  },
  "api/StringAlgorithms.SuffixTries.html": {
    "href": "api/StringAlgorithms.SuffixTries.html",
    "title": "Namespace StringAlgorithms.SuffixTries",
    "keywords": "Namespace StringAlgorithms.SuffixTries Classes SuffixTrieBuilder SuffixTrieEdge The index key of the collection of children of a Suffix Trie node, which identifies a single char in text, used as a selector to navigate the Suffix Trie in text pattern matching. SuffixTrieNode An immutable node of an immutable Suffix Trie, recursively pointing to its children node. SuffixTrieNode.Intermediate Builds an intermediate node, i.e. a node with children and their corresponding incoming edges. SuffixTrieNode.Leaf Builds a leaf, i.e. a node with no children and the start index of the suffix in the text. SuffixTriePath An immutable sequence of Suffix Trie nodes, where each node is child of its predecessor and parent of its successor."
  },
  "api/StringAlgorithms.SuffixTries.SuffixTrieBuilder.html": {
    "href": "api/StringAlgorithms.SuffixTries.SuffixTrieBuilder.html",
    "title": "Class SuffixTrieBuilder",
    "keywords": "Class SuffixTrieBuilder Inheritance System.Object SuffixTrieBuilder Implements ISuffixStructureBuilder < SuffixTrieEdge , SuffixTrieNode , SuffixTriePath , SuffixTrieBuilder > Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : StringAlgorithms.SuffixTries Assembly : StringAlgorithms.dll Syntax public class SuffixTrieBuilder : ISuffixStructureBuilder<SuffixTrieEdge, SuffixTrieNode, SuffixTriePath, SuffixTrieBuilder> Methods | Improve this Doc View Source BuildTree(TextWithTerminator) Declaration public SuffixTrieNode BuildTree(TextWithTerminator text) Parameters Type Name Description TextWithTerminator text Returns Type Description SuffixTrieNode | Improve this Doc View Source EmptyPath() Declaration public SuffixTriePath EmptyPath() Returns Type Description SuffixTriePath | Improve this Doc View Source MultistepsPath(IEnumerable<KeyValuePair<SuffixTrieEdge, SuffixTrieNode>>) Declaration public SuffixTriePath MultistepsPath(IEnumerable<KeyValuePair<SuffixTrieEdge, SuffixTrieNode>> pathNodes) Parameters Type Name Description IEnumerable < KeyValuePair < SuffixTrieEdge , SuffixTrieNode >> pathNodes Returns Type Description SuffixTriePath | Improve this Doc View Source MultistepsPath((SuffixTrieEdge edge, SuffixTrieNode node)[]) Declaration public SuffixTriePath MultistepsPath(params (SuffixTrieEdge edge, SuffixTrieNode node)[] pathNodes) Parameters Type Name Description System.ValueTuple < SuffixTrieEdge , SuffixTrieNode >[] pathNodes Returns Type Description SuffixTriePath | Improve this Doc View Source SingletonPath(SuffixTrieEdge, SuffixTrieNode) Declaration public SuffixTriePath SingletonPath(SuffixTrieEdge edge, SuffixTrieNode node) Parameters Type Name Description SuffixTrieEdge edge SuffixTrieNode node Returns Type Description SuffixTriePath Implements ISuffixStructureBuilder<TEdge, TNode, TPath, TBuilder> Extension Methods SuffixStructureBuilderExtensions.BuildTree<TEdge, TNode, TPath, TBuilder>(ISuffixStructureBuilder<TEdge, TNode, TPath, TBuilder>, String)"
  },
  "api/StringAlgorithms.SuffixTries.SuffixTrieEdge.html": {
    "href": "api/StringAlgorithms.SuffixTries.SuffixTrieEdge.html",
    "title": "Class SuffixTrieEdge",
    "keywords": "Class SuffixTrieEdge The index key of the collection of children of a Suffix Trie node, which identifies a single char in text, used as a selector to navigate the Suffix Trie in text pattern matching. Inheritance System.Object SuffixTreeEdge SuffixTrieEdge Implements ISuffixStructureEdge < SuffixTreeEdge , SuffixTreeNode , SuffixTreePath , SuffixTreeBuilder > System.IEquatable < SuffixTreeEdge > ISuffixStructureEdge < SuffixTrieEdge , SuffixTrieNode , SuffixTriePath , SuffixTrieBuilder > TextWithTerminator.ISelector System.IEquatable < SuffixTrieEdge > Inherited Members SuffixTreeEdge.Start SuffixTreeEdge.Length SuffixTreeEdge.Of(TextWithTerminator) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : StringAlgorithms.SuffixTries Assembly : StringAlgorithms.dll Syntax public class SuffixTrieEdge : SuffixTreeEdge, ISuffixStructureEdge<SuffixTreeEdge, SuffixTreeNode, SuffixTreePath, SuffixTreeBuilder>, IEquatable<SuffixTreeEdge>, ISuffixStructureEdge<SuffixTrieEdge, SuffixTrieNode, SuffixTriePath, SuffixTrieBuilder>, TextWithTerminator.ISelector, IEquatable<SuffixTrieEdge> Constructors | Improve this Doc View Source SuffixTrieEdge(Int32) The index key of the collection of children of a Suffix Trie node, which identifies a single char in text, used as a selector to navigate the Suffix Trie in text pattern matching. Declaration public SuffixTrieEdge(int Index) Parameters Type Name Description System.Int32 Index The index of the character in the text. Properties | Improve this Doc View Source Index Declaration public int Index { get; set; } Property Value Type Description System.Int32 Implements ISuffixStructureEdge<TEdge, TNode, TPath, TBuilder> System.IEquatable<T> ISuffixStructureEdge<TEdge, TNode, TPath, TBuilder> TextWithTerminator.ISelector System.IEquatable<T>"
  },
  "api/StringAlgorithms.SuffixTries.SuffixTrieNode.html": {
    "href": "api/StringAlgorithms.SuffixTries.SuffixTrieNode.html",
    "title": "Class SuffixTrieNode",
    "keywords": "Class SuffixTrieNode An immutable node of an immutable Suffix Trie, recursively pointing to its children node. Inheritance System.Object SuffixTrieNode SuffixTrieNode.Intermediate SuffixTrieNode.Leaf Implements ISuffixStructureNode < SuffixTrieEdge , SuffixTrieNode , SuffixTriePath , SuffixTrieBuilder > System.IEquatable < SuffixTrieNode > Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : StringAlgorithms.SuffixTries Assembly : StringAlgorithms.dll Syntax public abstract class SuffixTrieNode : ISuffixStructureNode<SuffixTrieEdge, SuffixTrieNode, SuffixTriePath, SuffixTrieBuilder>, IEquatable<SuffixTrieNode> Remarks Immutability is guaranteed by using ValueReadOnlyCollection<T> . Constructors | Improve this Doc View Source SuffixTrieNode(IDictionary<SuffixTrieEdge, SuffixTrieNode>, Nullable<Int32>) An immutable node of an immutable Suffix Trie, recursively pointing to its children node. Declaration protected SuffixTrieNode(IDictionary<SuffixTrieEdge, SuffixTrieNode> Children, int? Start) Parameters Type Name Description IDictionary < SuffixTrieEdge , SuffixTrieNode > Children The collection of children for the node, indexed by single char edges. System.Nullable < System.Int32 > Start Remarks Immutability is guaranteed by using ValueReadOnlyCollection<T> . Properties | Improve this Doc View Source Children Declaration public IDictionary<SuffixTrieEdge, SuffixTrieNode> Children { get; } Property Value Type Description IDictionary < SuffixTrieEdge , SuffixTrieNode > | Improve this Doc View Source Item[SuffixTrieEdge] Indexes into the children of this node, by edge, which is a single char selector. Declaration public SuffixTrieNode this[SuffixTrieEdge edge] { get; } Parameters Type Name Description SuffixTrieEdge edge Property Value Type Description SuffixTrieNode | Improve this Doc View Source Start Declaration public int? Start { get; } Property Value Type Description System.Nullable < System.Int32 > Implements ISuffixStructureNode<TEdge, TNode, TPath, TBuilder> System.IEquatable<T> Extension Methods SuffixStructureMatcher.Match<TEdge, TNode, TPath, TBuilder>(ISuffixStructureNode<TEdge, TNode, TPath, TBuilder>, TextWithTerminator, String) SuffixStructureNodeExtensions.IsLeaf<TEdge, TNode, TPath, TBuilder>(ISuffixStructureNode<TEdge, TNode, TPath, TBuilder>) SuffixStructureNodeExtensions.GetAllNodeToLeafPaths<TEdge, TNode, TPath, TBuilder>(ISuffixStructureNode<TEdge, TNode, TPath, TBuilder>) SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode, TPath, TBuilder>(ISuffixStructureNode<TEdge, TNode, TPath, TBuilder>, TextWithTerminator)"
  },
  "api/StringAlgorithms.SuffixTries.SuffixTrieNode.Intermediate.html": {
    "href": "api/StringAlgorithms.SuffixTries.SuffixTrieNode.Intermediate.html",
    "title": "Class SuffixTrieNode.Intermediate",
    "keywords": "Class SuffixTrieNode.Intermediate Builds an intermediate node, i.e. a node with children and their corresponding incoming edges. Inheritance System.Object SuffixTrieNode SuffixTrieNode.Intermediate Implements ISuffixStructureNode < SuffixTrieEdge , SuffixTrieNode , SuffixTriePath , SuffixTrieBuilder > System.IEquatable < SuffixTrieNode > System.IEquatable < SuffixTrieNode.Intermediate > Inherited Members SuffixTrieNode.Children SuffixTrieNode.Start SuffixTrieNode.Item[SuffixTrieEdge] System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : StringAlgorithms.SuffixTries Assembly : StringAlgorithms.dll Syntax public class Intermediate : SuffixTrieNode, ISuffixStructureNode<SuffixTrieEdge, SuffixTrieNode, SuffixTriePath, SuffixTrieBuilder>, IEquatable<SuffixTrieNode>, IEquatable<SuffixTrieNode.Intermediate> Constructors | Improve this Doc View Source Intermediate(IDictionary<SuffixTrieEdge, SuffixTrieNode>) Builds an intermediate node, i.e. a node with children and their corresponding incoming edges. Declaration public Intermediate(IDictionary<SuffixTrieEdge, SuffixTrieNode> Children) Parameters Type Name Description IDictionary < SuffixTrieEdge , SuffixTrieNode > Children Implements ISuffixStructureNode<TEdge, TNode, TPath, TBuilder> System.IEquatable<T> System.IEquatable<T> Extension Methods SuffixStructureMatcher.Match<TEdge, TNode, TPath, TBuilder>(ISuffixStructureNode<TEdge, TNode, TPath, TBuilder>, TextWithTerminator, String) SuffixStructureNodeExtensions.IsLeaf<TEdge, TNode, TPath, TBuilder>(ISuffixStructureNode<TEdge, TNode, TPath, TBuilder>) SuffixStructureNodeExtensions.GetAllNodeToLeafPaths<TEdge, TNode, TPath, TBuilder>(ISuffixStructureNode<TEdge, TNode, TPath, TBuilder>) SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode, TPath, TBuilder>(ISuffixStructureNode<TEdge, TNode, TPath, TBuilder>, TextWithTerminator)"
  },
  "api/StringAlgorithms.SuffixTries.SuffixTrieNode.Leaf.html": {
    "href": "api/StringAlgorithms.SuffixTries.SuffixTrieNode.Leaf.html",
    "title": "Class SuffixTrieNode.Leaf",
    "keywords": "Class SuffixTrieNode.Leaf Builds a leaf, i.e. a node with no children and the start index of the suffix in the text. Inheritance System.Object SuffixTrieNode SuffixTrieNode.Leaf Implements ISuffixStructureNode < SuffixTrieEdge , SuffixTrieNode , SuffixTriePath , SuffixTrieBuilder > System.IEquatable < SuffixTrieNode > System.IEquatable < SuffixTrieNode.Leaf > Inherited Members SuffixTrieNode.Children SuffixTrieNode.Start SuffixTrieNode.Item[SuffixTrieEdge] System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : StringAlgorithms.SuffixTries Assembly : StringAlgorithms.dll Syntax public class Leaf : SuffixTrieNode, ISuffixStructureNode<SuffixTrieEdge, SuffixTrieNode, SuffixTriePath, SuffixTrieBuilder>, IEquatable<SuffixTrieNode>, IEquatable<SuffixTrieNode.Leaf> Constructors | Improve this Doc View Source Leaf(Int32) Builds a leaf, i.e. a node with no children and the start index of the suffix in the text. Declaration public Leaf(int LeafStart) Parameters Type Name Description System.Int32 LeafStart Properties | Improve this Doc View Source LeafStart Declaration public int LeafStart { get; set; } Property Value Type Description System.Int32 Implements ISuffixStructureNode<TEdge, TNode, TPath, TBuilder> System.IEquatable<T> System.IEquatable<T> Extension Methods SuffixStructureMatcher.Match<TEdge, TNode, TPath, TBuilder>(ISuffixStructureNode<TEdge, TNode, TPath, TBuilder>, TextWithTerminator, String) SuffixStructureNodeExtensions.IsLeaf<TEdge, TNode, TPath, TBuilder>(ISuffixStructureNode<TEdge, TNode, TPath, TBuilder>) SuffixStructureNodeExtensions.GetAllNodeToLeafPaths<TEdge, TNode, TPath, TBuilder>(ISuffixStructureNode<TEdge, TNode, TPath, TBuilder>) SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode, TPath, TBuilder>(ISuffixStructureNode<TEdge, TNode, TPath, TBuilder>, TextWithTerminator)"
  },
  "api/StringAlgorithms.SuffixTries.SuffixTriePath.html": {
    "href": "api/StringAlgorithms.SuffixTries.SuffixTriePath.html",
    "title": "Class SuffixTriePath",
    "keywords": "Class SuffixTriePath An immutable sequence of Suffix Trie nodes, where each node is child of its predecessor and parent of its successor. Inheritance System.Object SuffixTriePath Implements ISuffixStructurePath < SuffixTrieEdge , SuffixTrieNode , SuffixTriePath , SuffixTrieBuilder > System.IEquatable < SuffixTriePath > Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : StringAlgorithms.SuffixTries Assembly : StringAlgorithms.dll Syntax public class SuffixTriePath : ISuffixStructurePath<SuffixTrieEdge, SuffixTrieNode, SuffixTriePath, SuffixTrieBuilder>, IEquatable<SuffixTriePath> Remarks Immutability is guaranteed by using ValueReadOnlyDictionary<TKey, TValue> . Constructors | Improve this Doc View Source SuffixTriePath(IEnumerable<KeyValuePair<SuffixTrieEdge, SuffixTrieNode>>) An immutable sequence of Suffix Trie nodes, where each node is child of its predecessor and parent of its successor. Declaration public SuffixTriePath(IEnumerable<KeyValuePair<SuffixTrieEdge, SuffixTrieNode>> PathNodes) Parameters Type Name Description IEnumerable < KeyValuePair < SuffixTrieEdge , SuffixTrieNode >> PathNodes The sequence of nodes respecting the parent-child relationship. Remarks Immutability is guaranteed by using ValueReadOnlyDictionary<TKey, TValue> . Properties | Improve this Doc View Source PathNodes Declaration public IEnumerable<KeyValuePair<SuffixTrieEdge, SuffixTrieNode>> PathNodes { get; } Property Value Type Description IEnumerable < KeyValuePair < SuffixTrieEdge , SuffixTrieNode >> Implements ISuffixStructurePath<TEdge, TNode, TPath, TBuilder> System.IEquatable<T> Extension Methods SuffixStructurePathExtensions.SuffixFor<TEdge, TNode, TPath, TBuilder>(ISuffixStructurePath<TEdge, TNode, TPath, TBuilder>, TextWithTerminator) SuffixStructurePathExtensions.IsSuffixOf<TEdge, TNode, TPath, TBuilder>(ISuffixStructurePath<TEdge, TNode, TPath, TBuilder>, TextWithTerminator) SuffixStructurePathExtensions.Concat<TEdge, TNode, TPath, TBuilder>(ISuffixStructurePath<TEdge, TNode, TPath, TBuilder>, ISuffixStructurePath<TEdge, TNode, TPath, TBuilder>) SuffixStructurePathExtensions.Append<TEdge, TNode, TPath, TBuilder>(ISuffixStructurePath<TEdge, TNode, TPath, TBuilder>, TEdge, TNode)"
  },
  "api/StringAlgorithms.Tests.html": {
    "href": "api/StringAlgorithms.Tests.html",
    "title": "Namespace StringAlgorithms.Tests",
    "keywords": "Namespace StringAlgorithms.Tests Classes StringUtilitiesTests TextWithTerminatorTests"
  },
  "api/StringAlgorithms.Tests.StringUtilitiesTests.html": {
    "href": "api/StringAlgorithms.Tests.StringUtilitiesTests.html",
    "title": "Class StringUtilitiesTests",
    "keywords": "Class StringUtilitiesTests Inheritance System.Object StringUtilitiesTests Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : StringAlgorithms.Tests Assembly : StringAlgorithms.Tests.dll Syntax public class StringUtilitiesTests Methods | Improve this Doc View Source LongestPrefixInCommon_IsCorrect() Declaration public void LongestPrefixInCommon_IsCorrect()"
  },
  "api/StringAlgorithms.Tests.SuffixStructures.html": {
    "href": "api/StringAlgorithms.Tests.SuffixStructures.html",
    "title": "Namespace StringAlgorithms.Tests.SuffixStructures",
    "keywords": "Namespace StringAlgorithms.Tests.SuffixStructures Classes SuffixStructuresConverterTests SuffixStructuresEdgeExtensionsTests SuffixStructuresPathExtensionsTests"
  },
  "api/StringAlgorithms.Tests.SuffixStructures.SuffixStructuresConverterTests.html": {
    "href": "api/StringAlgorithms.Tests.SuffixStructures.SuffixStructuresConverterTests.html",
    "title": "Class SuffixStructuresConverterTests",
    "keywords": "Class SuffixStructuresConverterTests Inheritance System.Object SuffixStructuresConverterTests Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : StringAlgorithms.Tests.SuffixStructures Assembly : StringAlgorithms.Tests.dll Syntax public class SuffixStructuresConverterTests Methods | Improve this Doc View Source TrieToTree_BuildsCorrectTree() Declaration public void TrieToTree_BuildsCorrectTree()"
  },
  "api/StringAlgorithms.Tests.SuffixStructures.SuffixStructuresEdgeExtensionsTests.html": {
    "href": "api/StringAlgorithms.Tests.SuffixStructures.SuffixStructuresEdgeExtensionsTests.html",
    "title": "Class SuffixStructuresEdgeExtensionsTests",
    "keywords": "Class SuffixStructuresEdgeExtensionsTests Inheritance System.Object SuffixStructuresEdgeExtensionsTests Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : StringAlgorithms.Tests.SuffixStructures Assembly : StringAlgorithms.Tests.dll Syntax public class SuffixStructuresEdgeExtensionsTests Methods | Improve this Doc View Source IsAdjacentTo_IsCorrect() Declaration public void IsAdjacentTo_IsCorrect()"
  },
  "api/StringAlgorithms.Tests.SuffixStructures.SuffixStructuresPathExtensionsTests.html": {
    "href": "api/StringAlgorithms.Tests.SuffixStructures.SuffixStructuresPathExtensionsTests.html",
    "title": "Class SuffixStructuresPathExtensionsTests",
    "keywords": "Class SuffixStructuresPathExtensionsTests Inheritance System.Object SuffixStructuresPathExtensionsTests Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : StringAlgorithms.Tests.SuffixStructures Assembly : StringAlgorithms.Tests.dll Syntax public class SuffixStructuresPathExtensionsTests Methods | Improve this Doc View Source Append_IsCorrect() Declaration public void Append_IsCorrect() | Improve this Doc View Source Concat_IsCorrectAppendingEmptyPath() Declaration public void Concat_IsCorrectAppendingEmptyPath() | Improve this Doc View Source Concat_IsCorrectPrependingEmptyPath() Declaration public void Concat_IsCorrectPrependingEmptyPath() | Improve this Doc View Source Concat_IsCorrectWithTwoNonEmptyPaths() Declaration public void Concat_IsCorrectWithTwoNonEmptyPaths() | Improve this Doc View Source IsSuffixOf_IsCorrectForNonEmtpyPath() Declaration public void IsSuffixOf_IsCorrectForNonEmtpyPath() | Improve this Doc View Source IsSuffixOf_IsTrueForEmtpyPath() Declaration public void IsSuffixOf_IsTrueForEmtpyPath() | Improve this Doc View Source SuffixFor_IsCorrectForEmptyPath() Declaration public void SuffixFor_IsCorrectForEmptyPath() | Improve this Doc View Source SuffixFor_IsCorrectForNonEmptyPathOnSuffixTree() Declaration public void SuffixFor_IsCorrectForNonEmptyPathOnSuffixTree() | Improve this Doc View Source SuffixFor_IsCorrectForNonEmptyPathOnSuffixTrie() Declaration public void SuffixFor_IsCorrectForNonEmptyPathOnSuffixTrie()"
  },
  "api/StringAlgorithms.Tests.SuffixTrees.html": {
    "href": "api/StringAlgorithms.Tests.SuffixTrees.html",
    "title": "Namespace StringAlgorithms.Tests.SuffixTrees",
    "keywords": "Namespace StringAlgorithms.Tests.SuffixTrees Classes SuffixStructureMatcherTests SuffixTreeBuilderTests SuffixTreeEdgeTests SuffixTreeFactoryTests SuffixTreeNodeTests SuffixTreePathTests"
  },
  "api/StringAlgorithms.Tests.SuffixTrees.SuffixStructureMatcherTests.html": {
    "href": "api/StringAlgorithms.Tests.SuffixTrees.SuffixStructureMatcherTests.html",
    "title": "Class SuffixStructureMatcherTests",
    "keywords": "Class SuffixStructureMatcherTests Inheritance System.Object SuffixStructureMatcherTests Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : StringAlgorithms.Tests.SuffixTrees Assembly : StringAlgorithms.Tests.dll Syntax public class SuffixStructureMatcherTests Methods | Improve this Doc View Source Match_Preconditions() Declaration public void Match_Preconditions() | Improve this Doc View Source Match_SuccessAndMatchedCharsIsCorrect() Declaration public void Match_SuccessAndMatchedCharsIsCorrect() | Improve this Doc View Source Match_SuccessBeginAndPathIsCorrect() Declaration public void Match_SuccessBeginAndPathIsCorrect() | Improve this Doc View Source Match_UnsuccessAndMatchedCharsIsCorrect() Declaration public void Match_UnsuccessAndMatchedCharsIsCorrect()"
  },
  "api/StringAlgorithms.Tests.SuffixTrees.SuffixTreeBuilderTests.html": {
    "href": "api/StringAlgorithms.Tests.SuffixTrees.SuffixTreeBuilderTests.html",
    "title": "Class SuffixTreeBuilderTests",
    "keywords": "Class SuffixTreeBuilderTests Inheritance System.Object SuffixTreeBuilderTests Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : StringAlgorithms.Tests.SuffixTrees Assembly : StringAlgorithms.Tests.dll Syntax public class SuffixTreeBuilderTests Methods | Improve this Doc View Source BuildTree_BuildsExampleTreeFromExampleText() Declaration public void BuildTree_BuildsExampleTreeFromExampleText() | Improve this Doc View Source BuildTree_EmptyString() Declaration public void BuildTree_EmptyString() | Improve this Doc View Source BuildTree_ReturnsAllSuffixes() Declaration public void BuildTree_ReturnsAllSuffixes() | Improve this Doc View Source BuildTree_ReturnsOnlySuffixes() Declaration public void BuildTree_ReturnsOnlySuffixes() | Improve this Doc View Source BuildTree_SingleCharString() Declaration public void BuildTree_SingleCharString() | Improve this Doc View Source BuildTree_StartCorrectlySetAtLeafNodes() Declaration public void BuildTree_StartCorrectlySetAtLeafNodes() | Improve this Doc View Source BuildTree_StartLeftNullAtNonLeafNodes() Declaration public void BuildTree_StartLeftNullAtNonLeafNodes() | Improve this Doc View Source BuildTree_StringIncludingTerminator() Declaration public void BuildTree_StringIncludingTerminator() | Improve this Doc View Source BuildTree_ThreeCharsString_DifferentPrefixes() Declaration public void BuildTree_ThreeCharsString_DifferentPrefixes() | Improve this Doc View Source BuildTree_ThreeCharsString_ExtendingPrefixes() Declaration public void BuildTree_ThreeCharsString_ExtendingPrefixes() | Improve this Doc View Source BuildTree_ThreeCharsString_PartiallySamePrefixes() Declaration public void BuildTree_ThreeCharsString_PartiallySamePrefixes() | Improve this Doc View Source BuildTree_ThreeCharsString_SamePrefixes() Declaration public void BuildTree_ThreeCharsString_SamePrefixes() | Improve this Doc View Source BuildTree_TwoCharsString_DifferentPrefixes() Declaration public void BuildTree_TwoCharsString_DifferentPrefixes() | Improve this Doc View Source BuildTree_TwoCharsString_SamePrefixes() Declaration public void BuildTree_TwoCharsString_SamePrefixes() | Improve this Doc View Source BuildTree_UsesTerminatorForMatchToDistinguishSuffixesFromAnySubstring() Declaration public void BuildTree_UsesTerminatorForMatchToDistinguishSuffixesFromAnySubstring()"
  },
  "api/StringAlgorithms.Tests.SuffixTrees.SuffixTreeEdgeTests.html": {
    "href": "api/StringAlgorithms.Tests.SuffixTrees.SuffixTreeEdgeTests.html",
    "title": "Class SuffixTreeEdgeTests",
    "keywords": "Class SuffixTreeEdgeTests Inheritance System.Object SuffixTreeEdgeTests Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : StringAlgorithms.Tests.SuffixTrees Assembly : StringAlgorithms.Tests.dll Syntax public class SuffixTreeEdgeTests Methods | Improve this Doc View Source Ctor_ValidIndex() Declaration public void Ctor_ValidIndex() | Improve this Doc View Source Of_InboundIndexes() Declaration public void Of_InboundIndexes() | Improve this Doc View Source Of_OutOfBoundsIndexes() Declaration public void Of_OutOfBoundsIndexes()"
  },
  "api/StringAlgorithms.Tests.SuffixTrees.SuffixTreeFactoryTests.html": {
    "href": "api/StringAlgorithms.Tests.SuffixTrees.SuffixTreeFactoryTests.html",
    "title": "Class SuffixTreeFactoryTests",
    "keywords": "Class SuffixTreeFactoryTests Inheritance System.Object SuffixTreeFactoryTests Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : StringAlgorithms.Tests.SuffixTrees Assembly : StringAlgorithms.Tests.dll Syntax public class SuffixTreeFactoryTests Methods | Improve this Doc View Source EmptyPath_IsCorrect() Declaration public void EmptyPath_IsCorrect() | Improve this Doc View Source MultistepPath_IsCorrectWithEnumerable() Declaration public void MultistepPath_IsCorrectWithEnumerable() | Improve this Doc View Source MultistepPath_IsCorrectWithParams() Declaration public void MultistepPath_IsCorrectWithParams() | Improve this Doc View Source SingletonPath_IsCorrect() Declaration public void SingletonPath_IsCorrect()"
  },
  "api/StringAlgorithms.Tests.SuffixTrees.SuffixTreeNodeTests.html": {
    "href": "api/StringAlgorithms.Tests.SuffixTrees.SuffixTreeNodeTests.html",
    "title": "Class SuffixTreeNodeTests",
    "keywords": "Class SuffixTreeNodeTests Inheritance System.Object SuffixTreeNodeTests Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : StringAlgorithms.Tests.SuffixTrees Assembly : StringAlgorithms.Tests.dll Syntax public class SuffixTreeNodeTests Methods | Improve this Doc View Source Children_Immutability_FromCtorParam() Declaration public void Children_Immutability_FromCtorParam() | Improve this Doc View Source Children_Immutability_OnGet() Declaration public void Children_Immutability_OnGet() | Improve this Doc View Source Ctor_InvalidArguments() Declaration public void Ctor_InvalidArguments() | Improve this Doc View Source Indexer_RetrievesChild() Declaration public void Indexer_RetrievesChild()"
  },
  "api/StringAlgorithms.Tests.SuffixTrees.SuffixTreePathTests.html": {
    "href": "api/StringAlgorithms.Tests.SuffixTrees.SuffixTreePathTests.html",
    "title": "Class SuffixTreePathTests",
    "keywords": "Class SuffixTreePathTests Inheritance System.Object SuffixTreePathTests Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : StringAlgorithms.Tests.SuffixTrees Assembly : StringAlgorithms.Tests.dll Syntax public class SuffixTreePathTests Methods | Improve this Doc View Source PathNodes_ImmutabilityOnCtorParam() Declaration public void PathNodes_ImmutabilityOnCtorParam() | Improve this Doc View Source PathNodes_ImmutabilityOnGet() Declaration public void PathNodes_ImmutabilityOnGet()"
  },
  "api/StringAlgorithms.Tests.SuffixTries.html": {
    "href": "api/StringAlgorithms.Tests.SuffixTries.html",
    "title": "Namespace StringAlgorithms.Tests.SuffixTries",
    "keywords": "Namespace StringAlgorithms.Tests.SuffixTries Classes SuffixTrieBuilderTests SuffixTrieEdgeTests SuffixTrieFactoryTests SuffixTrieNodeTests SuffixTriePathTests"
  },
  "api/StringAlgorithms.Tests.SuffixTries.SuffixTrieBuilderTests.html": {
    "href": "api/StringAlgorithms.Tests.SuffixTries.SuffixTrieBuilderTests.html",
    "title": "Class SuffixTrieBuilderTests",
    "keywords": "Class SuffixTrieBuilderTests Inheritance System.Object SuffixTrieBuilderTests Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : StringAlgorithms.Tests.SuffixTries Assembly : StringAlgorithms.Tests.dll Syntax public class SuffixTrieBuilderTests Methods | Improve this Doc View Source BuildTree_BuildsExampleTrieFromExampleText() Declaration public void BuildTree_BuildsExampleTrieFromExampleText() | Improve this Doc View Source BuildTree_EmptyString() Declaration public void BuildTree_EmptyString() | Improve this Doc View Source BuildTree_ReturnsAllSuffixes() Declaration public void BuildTree_ReturnsAllSuffixes() | Improve this Doc View Source BuildTree_ReturnsOnlySuffixes() Declaration public void BuildTree_ReturnsOnlySuffixes() | Improve this Doc View Source BuildTree_SingleCharString() Declaration public void BuildTree_SingleCharString() | Improve this Doc View Source BuildTree_StartCorrectlySetAtLeafNodes() Declaration public void BuildTree_StartCorrectlySetAtLeafNodes() | Improve this Doc View Source BuildTree_StartLeftNullAtNonLeafNodes() Declaration public void BuildTree_StartLeftNullAtNonLeafNodes() | Improve this Doc View Source BuildTree_StringIncludingTerminator() Declaration public void BuildTree_StringIncludingTerminator() | Improve this Doc View Source BuildTree_ThreeCharsString_DifferentPrefixes() Declaration public void BuildTree_ThreeCharsString_DifferentPrefixes() | Improve this Doc View Source BuildTree_ThreeCharsString_PartiallySamePrefixes() Declaration public void BuildTree_ThreeCharsString_PartiallySamePrefixes() | Improve this Doc View Source BuildTree_ThreeCharsString_SamePrefixes() Declaration public void BuildTree_ThreeCharsString_SamePrefixes() | Improve this Doc View Source BuildTree_TwoCharsString_DifferentPrefixes() Declaration public void BuildTree_TwoCharsString_DifferentPrefixes() | Improve this Doc View Source BuildTree_TwoCharsString_SamePrefixes() Declaration public void BuildTree_TwoCharsString_SamePrefixes() | Improve this Doc View Source BuildTree_WithTextWithTerminatorInput() Declaration public void BuildTree_WithTextWithTerminatorInput()"
  },
  "api/StringAlgorithms.Tests.SuffixTries.SuffixTrieEdgeTests.html": {
    "href": "api/StringAlgorithms.Tests.SuffixTries.SuffixTrieEdgeTests.html",
    "title": "Class SuffixTrieEdgeTests",
    "keywords": "Class SuffixTrieEdgeTests Inheritance System.Object SuffixTrieEdgeTests Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : StringAlgorithms.Tests.SuffixTries Assembly : StringAlgorithms.Tests.dll Syntax public class SuffixTrieEdgeTests Methods | Improve this Doc View Source Ctor_ValidIndex() Declaration public void Ctor_ValidIndex() | Improve this Doc View Source Of_InboundIndexes() Declaration public void Of_InboundIndexes() | Improve this Doc View Source Of_OutOfBoundsIndexes() Declaration public void Of_OutOfBoundsIndexes()"
  },
  "api/StringAlgorithms.Tests.SuffixTries.SuffixTrieFactoryTests.html": {
    "href": "api/StringAlgorithms.Tests.SuffixTries.SuffixTrieFactoryTests.html",
    "title": "Class SuffixTrieFactoryTests",
    "keywords": "Class SuffixTrieFactoryTests Inheritance System.Object SuffixTrieFactoryTests Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : StringAlgorithms.Tests.SuffixTries Assembly : StringAlgorithms.Tests.dll Syntax public class SuffixTrieFactoryTests Methods | Improve this Doc View Source EmptyPath_IsCorrect() Declaration public void EmptyPath_IsCorrect() | Improve this Doc View Source MultistepPath_IsCorrectWithEnumerable() Declaration public void MultistepPath_IsCorrectWithEnumerable() | Improve this Doc View Source MultistepPath_IsCorrectWithParams() Declaration public void MultistepPath_IsCorrectWithParams() | Improve this Doc View Source SingletonPath_IsCorrect() Declaration public void SingletonPath_IsCorrect()"
  },
  "api/StringAlgorithms.Tests.SuffixTries.SuffixTrieNodeTests.html": {
    "href": "api/StringAlgorithms.Tests.SuffixTries.SuffixTrieNodeTests.html",
    "title": "Class SuffixTrieNodeTests",
    "keywords": "Class SuffixTrieNodeTests Inheritance System.Object SuffixTrieNodeTests Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : StringAlgorithms.Tests.SuffixTries Assembly : StringAlgorithms.Tests.dll Syntax public class SuffixTrieNodeTests Methods | Improve this Doc View Source Children_Immutability_FromCtorParam() Declaration public void Children_Immutability_FromCtorParam() | Improve this Doc View Source Children_ImmutabilityOnGet() Declaration public void Children_ImmutabilityOnGet() | Improve this Doc View Source Ctor_InvalidArguments() Declaration public void Ctor_InvalidArguments() | Improve this Doc View Source Indexer_RetrievesChild() Declaration public void Indexer_RetrievesChild()"
  },
  "api/StringAlgorithms.Tests.SuffixTries.SuffixTriePathTests.html": {
    "href": "api/StringAlgorithms.Tests.SuffixTries.SuffixTriePathTests.html",
    "title": "Class SuffixTriePathTests",
    "keywords": "Class SuffixTriePathTests Inheritance System.Object SuffixTriePathTests Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : StringAlgorithms.Tests.SuffixTries Assembly : StringAlgorithms.Tests.dll Syntax public class SuffixTriePathTests Methods | Improve this Doc View Source PathNodes_ImmutabilityOnCtorParam() Declaration public void PathNodes_ImmutabilityOnCtorParam() | Improve this Doc View Source PathNodes_ImmutabilityOnGet() Declaration public void PathNodes_ImmutabilityOnGet()"
  },
  "api/StringAlgorithms.Tests.TextWithTerminatorTests.html": {
    "href": "api/StringAlgorithms.Tests.TextWithTerminatorTests.html",
    "title": "Class TextWithTerminatorTests",
    "keywords": "Class TextWithTerminatorTests Inheritance System.Object TextWithTerminatorTests Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : StringAlgorithms.Tests Assembly : StringAlgorithms.Tests.dll Syntax public class TextWithTerminatorTests Methods | Improve this Doc View Source Ctor_Preconditions() Declaration public void Ctor_Preconditions() | Improve this Doc View Source EndsWith_IsCorrect() Declaration public void EndsWith_IsCorrect() | Improve this Doc View Source Indexer_WithIndex() Declaration public void Indexer_WithIndex() | Improve this Doc View Source Indexer_WithRange() Declaration public void Indexer_WithRange() | Improve this Doc View Source Indexer_WithSelector() Declaration public void Indexer_WithSelector() | Improve this Doc View Source Length_IsCorrect() Declaration public void Length_IsCorrect() | Improve this Doc View Source StartsWith_IsCorrect() Declaration public void StartsWith_IsCorrect()"
  },
  "api/StringAlgorithms.Tests.Utilities.html": {
    "href": "api/StringAlgorithms.Tests.Utilities.html",
    "title": "Namespace StringAlgorithms.Tests.Utilities",
    "keywords": "Namespace StringAlgorithms.Tests.Utilities Classes ValueReadOnlyCollectionTests ValueReadOnlyDictionaryTests"
  },
  "api/StringAlgorithms.Tests.Utilities.ValueReadOnlyCollectionTests.html": {
    "href": "api/StringAlgorithms.Tests.Utilities.ValueReadOnlyCollectionTests.html",
    "title": "Class ValueReadOnlyCollectionTests",
    "keywords": "Class ValueReadOnlyCollectionTests Inheritance System.Object ValueReadOnlyCollectionTests Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : StringAlgorithms.Tests.Utilities Assembly : StringAlgorithms.Tests.dll Syntax public class ValueReadOnlyCollectionTests Methods | Improve this Doc View Source Ctor_EmbedInputEnumerable() Declaration public void Ctor_EmbedInputEnumerable() | Improve this Doc View Source Ctor_IndependenceFromInputEnumerable() Declaration public void Ctor_IndependenceFromInputEnumerable() | Improve this Doc View Source DifferentOperator_IsByValue() Declaration public void DifferentOperator_IsByValue() | Improve this Doc View Source Equals_CheckType() Declaration public void Equals_CheckType() | Improve this Doc View Source Equals_IsByValue() Declaration public void Equals_IsByValue() | Improve this Doc View Source EqualsOperator_IsByValue() Declaration public void EqualsOperator_IsByValue() | Improve this Doc View Source GetHashCode_IsByValue_WithPrimitiveType() Declaration public void GetHashCode_IsByValue_WithPrimitiveType() | Improve this Doc View Source GetHashCode_IsByValue_WithRecordType() Declaration public void GetHashCode_IsByValue_WithRecordType() | Improve this Doc View Source ToString_IncludesToStringOfItems() Declaration public void ToString_IncludesToStringOfItems()"
  },
  "api/StringAlgorithms.Tests.Utilities.ValueReadOnlyDictionaryTests.html": {
    "href": "api/StringAlgorithms.Tests.Utilities.ValueReadOnlyDictionaryTests.html",
    "title": "Class ValueReadOnlyDictionaryTests",
    "keywords": "Class ValueReadOnlyDictionaryTests Inheritance System.Object ValueReadOnlyDictionaryTests Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : StringAlgorithms.Tests.Utilities Assembly : StringAlgorithms.Tests.dll Syntax public class ValueReadOnlyDictionaryTests Methods | Improve this Doc View Source Ctor_EmbedInputEnumerable() Declaration public void Ctor_EmbedInputEnumerable() | Improve this Doc View Source Ctor_IndependenceFromInputEnumerable() Declaration public void Ctor_IndependenceFromInputEnumerable() | Improve this Doc View Source DifferentOperator_IsByValue() Declaration public void DifferentOperator_IsByValue() | Improve this Doc View Source Equals_CheckType() Declaration public void Equals_CheckType() | Improve this Doc View Source Equals_IsByValue() Declaration public void Equals_IsByValue() | Improve this Doc View Source EqualsOperator_IsByValue() Declaration public void EqualsOperator_IsByValue() | Improve this Doc View Source GetHashCode_IsByValue_WithPrimitiveType() Declaration public void GetHashCode_IsByValue_WithPrimitiveType() | Improve this Doc View Source GetHashCode_IsByValue_WithRecordType() Declaration public void GetHashCode_IsByValue_WithRecordType() | Improve this Doc View Source ToString_IncludesToStringOfKeysAndValues() Declaration public void ToString_IncludesToStringOfKeysAndValues()"
  },
  "api/StringAlgorithms.TextWithTerminator.html": {
    "href": "api/StringAlgorithms.TextWithTerminator.html",
    "title": "Class TextWithTerminator",
    "keywords": "Class TextWithTerminator A text string with a terminator character, not present in the text. Inheritance System.Object TextWithTerminator Implements System.IEquatable < TextWithTerminator > Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : StringAlgorithms Assembly : StringAlgorithms.dll Syntax public class TextWithTerminator : IEquatable<TextWithTerminator> Remarks A terminator-terminated text is required by data structures like Suffix Trees. This object provides type safety, as it allows to tell apart terminator-terminated strings from generic ones. Constructors | Improve this Doc View Source TextWithTerminator(String, Char) A text string with a terminator character, not present in the text. Declaration public TextWithTerminator(string Text, char Terminator = '$') Parameters Type Name Description System.String Text A text string. System.Char Terminator A terminator character, not present in the text. If not specified DefaultTerminator is used. Remarks A terminator-terminated text is required by data structures like Suffix Trees. This object provides type safety, as it allows to tell apart terminator-terminated strings from generic ones. Fields | Improve this Doc View Source DefaultTerminator The special character used as a default terminator for the text to build the Suffix Tree of, when no custom terminator is specified. Should not be present in the text. Declaration public const char DefaultTerminator = '$' Field Value Type Description System.Char Properties | Improve this Doc View Source Item[Index] Select a part of this text by the provided index. Declaration public char this[Index index] { get; } Parameters Type Name Description Index index Property Value Type Description System.Char A char containing the selected part. | Improve this Doc View Source Item[Range] Select a part of this text by the provided range. Declaration public string this[Range range] { get; } Parameters Type Name Description Range range The range applied to the underlying string. Property Value Type Description System.String A string containing the selected part. | Improve this Doc View Source Item[TextWithTerminator.ISelector] Select a part of this text by the provided selector. Declaration public string this[TextWithTerminator.ISelector selector] { get; } Parameters Type Name Description TextWithTerminator.ISelector selector Any selector acting on a TextWithTerminator . Property Value Type Description System.String A string containing the selected part. | Improve this Doc View Source Length The total length of this text, including the terminator. Declaration public int Length { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Terminator A terminator character, not present in the text. Declaration public char Terminator { get; set; } Property Value Type Description System.Char | Improve this Doc View Source Text A text string. Declaration public string Text { get; set; } Property Value Type Description System.String Methods | Improve this Doc View Source EndsWith(String) Whether this text ends with the provided suffix. Declaration public bool EndsWith(string suffix) Parameters Type Name Description System.String suffix A terminator-included string. Returns Type Description System.Boolean True if this text ends by the suffix. | Improve this Doc View Source StartsWith(String) Whether this text starts with the provided suffix. Declaration public bool StartsWith(string prefix) Parameters Type Name Description System.String prefix A terminator-included string. Returns Type Description System.Boolean True if this text starts by the prefix. Implements System.IEquatable<T>"
  },
  "api/StringAlgorithms.TextWithTerminator.ISelector.html": {
    "href": "api/StringAlgorithms.TextWithTerminator.ISelector.html",
    "title": "Interface TextWithTerminator.ISelector",
    "keywords": "Interface TextWithTerminator.ISelector A selector of a part of a text with terminator. Namespace : StringAlgorithms Assembly : StringAlgorithms.dll Syntax public interface ISelector Methods | Improve this Doc View Source Of(TextWithTerminator) Extract the substring identified by this selector, out of the provided text. Declaration string Of(TextWithTerminator text) Parameters Type Name Description TextWithTerminator text The text with terminator, to extract a substring of. Returns Type Description System.String A substring, whose length depends on the selector."
  },
  "api/StringAlgorithms.Utilities.html": {
    "href": "api/StringAlgorithms.Utilities.html",
    "title": "Namespace StringAlgorithms.Utilities",
    "keywords": "Namespace StringAlgorithms.Utilities Classes ValueReadOnlyCollection<T> A readonly immutable generic collection of non-null items which performs equality by value. ValueReadOnlyCollectionsExtensions Extension methods for value readonly collections. ValueReadOnlyDictionary<TKey, TValue> A readonly immutable generic dictionary of non-null keys and values which performs equality by value."
  },
  "api/StringAlgorithms.Utilities.ValueReadOnlyCollection-1.html": {
    "href": "api/StringAlgorithms.Utilities.ValueReadOnlyCollection-1.html",
    "title": "Class ValueReadOnlyCollection<T>",
    "keywords": "Class ValueReadOnlyCollection<T> A readonly immutable generic collection of non-null items which performs equality by value. Inheritance System.Object System.Collections.ObjectModel.ReadOnlyCollection <T> ValueReadOnlyCollection<T> Implements System.Collections.Generic.IList <T> System.Collections.Generic.ICollection <T> System.Collections.Generic.IReadOnlyList <T> System.Collections.Generic.IReadOnlyCollection <T> System.Collections.Generic.IEnumerable <T> System.Collections.IList System.Collections.ICollection System.Collections.IEnumerable Inherited Members System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.Generic.IList<T>.get_Item(System.Int32) System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.Generic.IList<T>.set_Item(System.Int32, T) System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.IList.get_Item(System.Int32) System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.IList.set_Item(System.Int32, System.Object) System.Collections.ObjectModel.ReadOnlyCollection<T>.Contains(T) System.Collections.ObjectModel.ReadOnlyCollection<T>.CopyTo(T[], System.Int32) System.Collections.ObjectModel.ReadOnlyCollection<T>.GetEnumerator() System.Collections.ObjectModel.ReadOnlyCollection<T>.IndexOf(T) System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.Generic.ICollection<T>.Add(T) System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.Generic.ICollection<T>.Clear() System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.Generic.ICollection<T>.Remove(T) System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.Generic.IList<T>.Insert(System.Int32, T) System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.Generic.IList<T>.RemoveAt(System.Int32) System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.ICollection.CopyTo(System.Array, System.Int32) System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.IEnumerable.GetEnumerator() System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.IList.Add(System.Object) System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.IList.Clear() System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.IList.Contains(System.Object) System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.IList.IndexOf(System.Object) System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.IList.Insert(System.Int32, System.Object) System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.IList.Remove(System.Object) System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.IList.RemoveAt(System.Int32) System.Collections.ObjectModel.ReadOnlyCollection<T>.Count System.Collections.ObjectModel.ReadOnlyCollection<T>.Item[System.Int32] System.Collections.ObjectModel.ReadOnlyCollection<T>.Items System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.Generic.ICollection<T>.IsReadOnly System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.Generic.IList<T>.Item[System.Int32] System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.ICollection.IsSynchronized System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.ICollection.SyncRoot System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.IList.IsFixedSize System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.IList.IsReadOnly System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.IList.Item[System.Int32] System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : StringAlgorithms.Utilities Assembly : StringAlgorithms.dll Syntax public class ValueReadOnlyCollection<T> : ReadOnlyCollection<T>, IList<T>, ICollection<T>, IReadOnlyList<T>, IReadOnlyCollection<T>, IEnumerable<T>, IList, ICollection, IEnumerable Type Parameters Name Description T The type of elements in the collection. Remarks Immutability can be guaranteed by cloning the provided enumerable and exposing a readonly view of it, but only if immutability of underlying is provided, for example, by using immutable records. Constructors | Improve this Doc View Source ValueReadOnlyCollection(IEnumerable<T>) Creates value readonly collection out of the provided enumerable, and independent from it. Declaration public ValueReadOnlyCollection(IEnumerable<T> enumerable) Parameters Type Name Description IEnumerable <T> enumerable The enumerable to be used to build the readonly collection. Methods | Improve this Doc View Source Equals(Object) Equality is calculated by value, i.e. on the collections items directly. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean True if the specified object is equal to the current collection by value; otherwise, false. Overrides System.Object.Equals(System.Object) | Improve this Doc View Source GetHashCode() The hash code is calculated by value, as an aggregate of the hash codes of its items. Declaration public override int GetHashCode() Returns Type Description System.Int32 A 32-bit signed integer hash code. Overrides System.Object.GetHashCode() | Improve this Doc View Source ToString() Format: \"[v1, v2, ...]\". Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Operators | Improve this Doc View Source Equality(ValueReadOnlyCollection<T>, ValueReadOnlyCollection<T>) Compare the two provided value read-only collections for equality by value. Declaration public static bool operator ==(ValueReadOnlyCollection<T> left, ValueReadOnlyCollection<T> right) Parameters Type Name Description ValueReadOnlyCollection <T> left The first term of comparison. ValueReadOnlyCollection <T> right The second term of comparison. Returns Type Description System.Boolean True if the two collections are equal by their items, false otherwise. | Improve this Doc View Source Inequality(ValueReadOnlyCollection<T>, ValueReadOnlyCollection<T>) Compare the two provided value read-only collections for inequality by value. Declaration public static bool operator !=(ValueReadOnlyCollection<T> left, ValueReadOnlyCollection<T> right) Parameters Type Name Description ValueReadOnlyCollection <T> left The first term of comparison. ValueReadOnlyCollection <T> right The second term of comparison. Returns Type Description System.Boolean True if the two collections are different by their items, false otherwise. Implements System.Collections.Generic.IList<T> System.Collections.Generic.ICollection<T> System.Collections.Generic.IReadOnlyList<T> System.Collections.Generic.IReadOnlyCollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IList System.Collections.ICollection System.Collections.IEnumerable"
  },
  "api/StringAlgorithms.Utilities.ValueReadOnlyCollectionsExtensions.html": {
    "href": "api/StringAlgorithms.Utilities.ValueReadOnlyCollectionsExtensions.html",
    "title": "Class ValueReadOnlyCollectionsExtensions",
    "keywords": "Class ValueReadOnlyCollectionsExtensions Extension methods for value readonly collections. Inheritance System.Object ValueReadOnlyCollectionsExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : StringAlgorithms.Utilities Assembly : StringAlgorithms.dll Syntax public static class ValueReadOnlyCollectionsExtensions Methods | Improve this Doc View Source ToValueReadOnlyCollection<T>(IEnumerable<T>) Builds a ValueReadOnlyCollection<T> out of the provided dictionary. Declaration public static ValueReadOnlyCollection<T> ToValueReadOnlyCollection<T>(this IEnumerable<T> enumerable) Parameters Type Name Description IEnumerable <T> enumerable Returns Type Description ValueReadOnlyCollection <T> An instance of ValueReadOnlyCollection<T> , independent from the provided enumerable. Type Parameters Name Description T | Improve this Doc View Source ToValueReadOnlyDictionary<TKey, TValue>(IDictionary<TKey, TValue>) Builds a ValueReadOnlyDictionary<TKey, TValue> out of the provided dictionary. Declaration public static ValueReadOnlyDictionary<TKey, TValue> ToValueReadOnlyDictionary<TKey, TValue>(this IDictionary<TKey, TValue> dictionary) Parameters Type Name Description IDictionary <TKey, TValue> dictionary Returns Type Description ValueReadOnlyDictionary <TKey, TValue> An instance of ValueReadOnlyDictionary<TKey, TValue> , independent from the provided dictionary. Type Parameters Name Description TKey TValue"
  },
  "api/StringAlgorithms.Utilities.ValueReadOnlyDictionary-2.html": {
    "href": "api/StringAlgorithms.Utilities.ValueReadOnlyDictionary-2.html",
    "title": "Class ValueReadOnlyDictionary<TKey, TValue>",
    "keywords": "Class ValueReadOnlyDictionary<TKey, TValue> A readonly immutable generic dictionary of non-null keys and values which performs equality by value. Inheritance System.Object System.Collections.ObjectModel.ReadOnlyDictionary <TKey, TValue> ValueReadOnlyDictionary<TKey, TValue> Implements System.Collections.Generic.IDictionary <TKey, TValue> System.Collections.Generic.ICollection < System.Collections.Generic.KeyValuePair <TKey, TValue>> System.Collections.Generic.IReadOnlyDictionary <TKey, TValue> System.Collections.Generic.IReadOnlyCollection < System.Collections.Generic.KeyValuePair <TKey, TValue>> System.Collections.Generic.IEnumerable < System.Collections.Generic.KeyValuePair <TKey, TValue>> System.Collections.IDictionary System.Collections.ICollection System.Collections.IEnumerable Inherited Members System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.System.Collections.Generic.IDictionary<TKey, TValue>.get_Item(TKey) System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.System.Collections.Generic.IDictionary<TKey, TValue>.set_Item(TKey, TValue) System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.System.Collections.IDictionary.get_Item(System.Object) System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.System.Collections.IDictionary.set_Item(System.Object, System.Object) System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.ContainsKey(TKey) System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.GetEnumerator() System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.Add(System.Collections.Generic.KeyValuePair<TKey, TValue>) System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.Clear() System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.Contains(System.Collections.Generic.KeyValuePair<TKey, TValue>) System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.CopyTo(System.Collections.Generic.KeyValuePair<TKey, TValue>[], System.Int32) System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.Remove(System.Collections.Generic.KeyValuePair<TKey, TValue>) System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.System.Collections.Generic.IDictionary<TKey, TValue>.Add(TKey, TValue) System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.System.Collections.Generic.IDictionary<TKey, TValue>.Remove(TKey) System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.System.Collections.ICollection.CopyTo(System.Array, System.Int32) System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.System.Collections.IDictionary.Add(System.Object, System.Object) System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.System.Collections.IDictionary.Clear() System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.System.Collections.IDictionary.Contains(System.Object) System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.System.Collections.IDictionary.GetEnumerator() System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.System.Collections.IDictionary.Remove(System.Object) System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.System.Collections.IEnumerable.GetEnumerator() System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.TryGetValue(TKey, TValue) System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.Count System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.Dictionary System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.Item[TKey] System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.Keys System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.IsReadOnly System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.System.Collections.Generic.IDictionary<TKey, TValue>.Item[TKey] System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.System.Collections.Generic.IDictionary<TKey, TValue>.Keys System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.System.Collections.Generic.IDictionary<TKey, TValue>.Values System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>.Keys System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>.Values System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.System.Collections.ICollection.IsSynchronized System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.System.Collections.ICollection.SyncRoot System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.System.Collections.IDictionary.IsFixedSize System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.System.Collections.IDictionary.IsReadOnly System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.System.Collections.IDictionary.Item[System.Object] System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.System.Collections.IDictionary.Keys System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.System.Collections.IDictionary.Values System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.Values System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : StringAlgorithms.Utilities Assembly : StringAlgorithms.dll Syntax public class ValueReadOnlyDictionary<TKey, TValue> : ReadOnlyDictionary<TKey, TValue>, IDictionary<TKey, TValue>, ICollection<KeyValuePair<TKey, TValue>>, IReadOnlyDictionary<TKey, TValue>, IReadOnlyCollection<KeyValuePair<TKey, TValue>>, IEnumerable<KeyValuePair<TKey, TValue>>, IDictionary, ICollection, IEnumerable Type Parameters Name Description TKey The type of keys in the dictionary. TValue The type of values in the dictionary. Remarks Immutability can be guaranteed by cloning the provided dictionary and exposing a readonly view of it, but only if immutability of underlying and is provided, for example, by using immutable records. Constructors | Improve this Doc View Source ValueReadOnlyDictionary(IDictionary<TKey, TValue>) Creates value readonly dictionary out of the provided dictionary, and independent from it. Declaration public ValueReadOnlyDictionary(IDictionary<TKey, TValue> dictionary) Parameters Type Name Description IDictionary <TKey, TValue> dictionary The dictionary to be used to build the readonly dictionary. Methods | Improve this Doc View Source Equals(Object) Equality is calculated by value, i.e. on the dictionary key-value pairs directly. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean True if the specified object is equal to the current dictionary by value; otherwise, false. Overrides System.Object.Equals(System.Object) | Improve this Doc View Source GetHashCode() The hash code is calculated by value, as an aggregate of the hash codes of its key value pairs. Declaration public override int GetHashCode() Returns Type Description System.Int32 A 32-bit signed integer hash code. Overrides System.Object.GetHashCode() | Improve this Doc View Source ToString() Format: \"{[k1] = v1, [k2] = v2, ...}\". Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Operators | Improve this Doc View Source Equality(ValueReadOnlyDictionary<TKey, TValue>, ValueReadOnlyDictionary<TKey, TValue>) Compare the two provided value read-only dictionaries for equality by value. Declaration public static bool operator ==(ValueReadOnlyDictionary<TKey, TValue> left, ValueReadOnlyDictionary<TKey, TValue> right) Parameters Type Name Description ValueReadOnlyDictionary <TKey, TValue> left The first term of comparison. ValueReadOnlyDictionary <TKey, TValue> right The second term of comparison. Returns Type Description System.Boolean True if the two dictionaries are equal by their items, false otherwise. | Improve this Doc View Source Inequality(ValueReadOnlyDictionary<TKey, TValue>, ValueReadOnlyDictionary<TKey, TValue>) Compare the two provided value read-only dictionaries for inequality by value. Declaration public static bool operator !=(ValueReadOnlyDictionary<TKey, TValue> left, ValueReadOnlyDictionary<TKey, TValue> right) Parameters Type Name Description ValueReadOnlyDictionary <TKey, TValue> left The first term of comparison. ValueReadOnlyDictionary <TKey, TValue> right The second term of comparison. Returns Type Description System.Boolean True if the two dictionaries are different by their items, false otherwise. Implements System.Collections.Generic.IDictionary<TKey, TValue> System.Collections.Generic.ICollection<T> System.Collections.Generic.IReadOnlyDictionary<TKey, TValue> System.Collections.Generic.IReadOnlyCollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IDictionary System.Collections.ICollection System.Collections.IEnumerable"
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Add your introductions here!",
    "keywords": "Add your introductions here!"
  },
  "index.html": {
    "href": "index.html",
    "title": "This is the HOMEPAGE.",
    "keywords": "This is the HOMEPAGE . Refer to Markdown for how to write markdown files. Quick Start Notes: Add images to the images folder if the file is referencing an image."
  }
}