{
  "api/index.html": {
    "href": "api/index.html",
    "title": "More Structures .NET API Documentation",
    "keywords": "More Structures .NET API Documentation This is the entrypoint of the .NET API documentation of More Structures. More Structures provides: mostly basic, and some more advanced, data structures such as Trees, Tries, Burrows-Wheeler Transform and Matrix wrappers etc. implementation of well-known algorithms running on them, such as Suffix Trie and Tree construction, Hukkonen algorithm, Burrows-Wheeler Transform pattern matching, etc. Functionalities provided Burrows-Wheeler Transform and Matrix : builders, inversion, pattern matching Recursively Defined Trees : descendants counting, stringification Lists : binary search Suffix Tries : builders, pattern matching, conversion into trees Suffix Trees : builders, pattern matching, conversion into tries, Hukkonen algorithm for linear time building Design aspects The library is conceived with a few key aspects in mind: type-safety immutability value-based semantics performance 100% statement and condition coverage extensive auto-generated documentation warnings as errors Type-safety All concepts have wrappers around standard types provided by the framework, enforcing data structure-specific constraints: For example, all terminator-terminated strings used by Suffix Trees and Tries are mapped to a specific record named TextWithTerminator , which ensures that the string is properly formed. Similarly, all cyclic rotations of a text are wrapped into a RotatedTextWithTerminator . This approch allows to avoid in most cases dangerous casting operations, sometimes leading to runtime errors. Type-safety is preserved by generic constraints whenever possible. For example, by binding together interfaces of different objects of the same data structure by some variants of the Curiously recurring template pattern : public interface IRecImmDictIndexedTreeEdge<TEdge, TNode> where TEdge : IRecImmDictIndexedTreeEdge<TEdge, TNode> where TNode : IRecImmDictIndexedTreeNode<TEdge, TNode> { } public interface IRecImmDictIndexedTreeNode<TEdge, TNode> where TEdge : IRecImmDictIndexedTreeEdge<TEdge, TNode> where TNode : IRecImmDictIndexedTreeNode<TEdge, TNode> { IDictionary<TEdge, TNode> Children { get; } } The notation can be heavy at times, especially when defining new data structures implementing such interfaces. public record SuffixTreeEdge(int Start, int Length) : ISuffixStructureEdge<SuffixTreeEdge, SuffixTreeNode>, IComparable<SuffixTreeEdge> { ... } public abstract record SuffixTreeNode(IDictionary<SuffixTreeEdge, SuffixTreeNode> Children, int? Start) : ISuffixStructureNode<SuffixTreeEdge, SuffixTreeNode> { ... } However, the advantages of type-safety more often than not outrun the disadvantages, keeping data structures coherent and predictable at compile time. Another typical source of runtime errors are null reference exceptions. These are avoided by: requiring use of nullable reference types , introduced in C# 8, everywhere in the project; limiting to the maximum extent possible the use of null-forgiving operator ; avoiding the semantic abuse of null . Immutability Whenever possible, structures are kept immutable, meaning that, whenever possible: fields are made readonly , and either assigned in-line or in the constructor; properties are made either { get; } or { get; init; } , and either assigned in-line or in the constructor; methods don't change object state; complex object initialization which may require multiple steps and intermediate incoherent states are externalized to a Builder object. Value-based semantics C# 9 introduced records which are classes or struct with value-based equality . This library makes extensive use of such construct, especially when wrapping other objects, in order to give them a domain-specific semantics: public record TextWithTerminator( IEnumerable<char> Text, char Terminator = TextWithTerminator.DefaultTerminator, bool ValidateInput = true) : IValueEnumerable<char> ... public record BWTransform(TextWithTerminator Text, RotatedTextWithTerminator Content) ... public record BWMatrix(TextWithTerminator Text, IList<string> Content) ... public sealed record CountTreeEdge<TEdge, TNode>(TEdge WrappedEdge) : IRecImmDictIndexedTreeEdge<CountTreeEdge<TEdge, TNode>, CountTreeNode<TEdge, TNode>> where TEdge : IRecImmDictIndexedTreeEdge<TEdge, TNode> where TNode : IRecImmDictIndexedTreeNode<TEdge, TNode> ... Performance While type soundness has the priority in the design of this library, performance is measured and optimized. Due to lack of proper tail-recurse optimization in the .NET runtime, all operations on deep recursive structures are implemented in at least two variants: a fully recursive, typically functional fashion, where no mutation of any type (not even local) happens; an iterative, Stack or Queue based, where some local mutations are allowed; sometimes the two approaches are combined. 100% statement and condition coverage The code is currently covered by tests in its entirety. There is mostly a 1-to-1 mapping between every public class and method, and their corresponding test class and method in the MoreStructures.Test project. Every folder under the MoreStructure project, containing source code, has its counterpart under MoreStructure.Tests ; Most public method MethodX of public class MoreStructures.Package.ClassA have a MethodX_Aspect unit test, defined under the class MoreStructures.Tests.Package.ClassATests . Tests are a great source of documentation, showing working and reproducible examples of how to use this library. When looking for directions about how to use a data structure or invoke an algorithm, it's highly recommended to also have a look at unit tests covering that functionality. Extensive auto-generated documentation All public members and their parameters and generic types are documented. Warnings as errors All warnings according to the Latest .NET analyzer are treated as errors. Coding style File Scoped Namespaces are encouraged, as they reduce the levels of nesting, making the code more readable. They also promote the use of a single namespace per file, which is strongly encouraged."
  },
  "api/MoreStructures.BurrowsWheelerTransform.Builders.html": {
    "href": "api/MoreStructures.BurrowsWheelerTransform.Builders.html",
    "title": "Namespace MoreStructures.BurrowsWheelerTransform.Builders",
    "keywords": "Namespace MoreStructures.BurrowsWheelerTransform.Builders Classes LastFirstPropertyBasedBuilder An extension of NaiveBuilder which takes advantange of the last-first property to reduce the complexity of InvertTransform(RotatedTextWithTerminator) . NaiveBuilder This implementation adopts the simplest approach at BWMatrix building, which results in a more than quadratic time and space. BWTransform is calculated via the BWMatrix , therefore same level of Time and Space Complexity. Interfaces IBuilder Builds Burrows-Wheeler objects, such as BWMatrix and BWTransform of the provided TextWithTerminator ."
  },
  "api/MoreStructures.BurrowsWheelerTransform.Builders.IBuilder.html": {
    "href": "api/MoreStructures.BurrowsWheelerTransform.Builders.IBuilder.html",
    "title": "Interface IBuilder",
    "keywords": "Interface IBuilder Builds Burrows-Wheeler objects, such as BWMatrix and BWTransform of the provided TextWithTerminator . Namespace : MoreStructures.BurrowsWheelerTransform.Builders Assembly : MoreStructures.dll Syntax public interface IBuilder Methods | Improve this Doc View Source BuildMatrix(BWTransform) Rebuilds the original BWMatrix from a BWTransform representing the last column of the Burrows-Wheeler Matrix (which is also the Burrows-Wheeler Transform). Declaration BWMatrix BuildMatrix(BWTransform lastBWMColumn) Parameters Type Name Description BWTransform lastBWMColumn The last column of the Burrows-Wheeler Matrix. Returns Type Description BWMatrix The matrix, wrapped into a BWMatrix object. Remarks Because the entire Burrows-Wheeler Matrix is built from the text with an invertible function, and the same happens for the Burrows-Wheeler Transform of the text, it's possible to get back the entire matrix from its last column. | Improve this Doc View Source BuildMatrix(TextWithTerminator) Build a BWMatrix of the provided text, which is a n-ary search tree in which edges coming out of a node are substrings of text which identify edges shared by all paths to leaves, starting from the node. Declaration BWMatrix BuildMatrix(TextWithTerminator text) Parameters Type Name Description TextWithTerminator text The text to build the BWM, with its terminator (required). Returns Type Description BWMatrix The matrix, wrapped into a BWMatrix object. Remarks Examples Code: var builder = ... builder.BuildMatrix(new(\"mississippi\")).Content Result: { \"$mississippi\", \"i$mississipp\", \"ippi$mississ\", \"issippi$miss\", \"ississippi$m\", \"mississippi$\", \"pi$mississip\", \"ppi$mississi\", \"sippi$missis\", \"sissippi$mis\", \"ssippi$missi\", \"ssissippi$mi\", } | Improve this Doc View Source BuildTransform(BWMatrix) Builds the Burrows-Wheeler Transform from the provided BWMatrix . Declaration BWTransform BuildTransform(BWMatrix matrix) Parameters Type Name Description BWMatrix matrix The matrix, whose BWT has to be calculated. Returns Type Description BWTransform The transform, wrapped into a BWTransform object. Remarks | Improve this Doc View Source BuildTransform(TextWithTerminator) Builds the Burrows-Wheeler Transform from the provided TextWithTerminator . Declaration BWTransform BuildTransform(TextWithTerminator text) Parameters Type Name Description TextWithTerminator text The text, whose BWT has to be calculated. Returns Type Description BWTransform The transform, wrapped into a BWTransform object. Remarks | Improve this Doc View Source InvertMatrix(BWMatrix) Rebuilds the original TextWithTerminator from the BWMatrix . Declaration TextWithTerminator InvertMatrix(BWMatrix matrix) Parameters Type Name Description BWMatrix matrix The matrix, whose original text has to be calculated. Returns Type Description TextWithTerminator The text which corresponds to the provided matrix. | Improve this Doc View Source InvertTransform(RotatedTextWithTerminator) Rebuilds the original TextWithTerminator from a RotatedTextWithTerminator representing the last column of the Burrows-Wheeler Matrix (which is also the Burrows-Wheeler Transform). Declaration TextWithTerminator InvertTransform(RotatedTextWithTerminator lastBWMColumn) Parameters Type Name Description RotatedTextWithTerminator lastBWMColumn The last column of the Burrows-Wheeler Matrix. Returns Type Description TextWithTerminator The text which corresponds to the provided text which produced a BWM whose last column is the one provided. Remarks lastBWMColumn requires a terminator to be specified in order to correctly compare strings, since the terminator should always be considered smaller than any other char. Multiple strategies for inversion are possible: via n-mers construction, via last-first property, ..."
  },
  "api/MoreStructures.BurrowsWheelerTransform.Builders.LastFirstFinders.BinarySearchFinder.html": {
    "href": "api/MoreStructures.BurrowsWheelerTransform.Builders.LastFirstFinders.BinarySearchFinder.html",
    "title": "Class BinarySearchFinder",
    "keywords": "Class BinarySearchFinder A NaiveFinder refinement which iterates over BWT and uses binary search on SortedBWT . Inheritance System.Object NaiveFinder BinarySearchFinder PrecomputedFinder Implements ILastFirstFinder Inherited Members NaiveFinder.CharComparer NaiveFinder.BWT NaiveFinder.SortedBWT NaiveFinder.FindIndexOfNthOccurrenceInBWT(Char, Int32) NaiveFinder.FindOccurrenceRankOfCharInBWT(Int32) NaiveFinder.LastToFirst(Int32) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.BurrowsWheelerTransform.Builders.LastFirstFinders Assembly : MoreStructures.dll Syntax public class BinarySearchFinder : NaiveFinder, ILastFirstFinder Remarks Search over BWT has Time Complexity = O(n). Search over SortedBWT has Time Complexity O(log(n)). Space Complexity = O(1) for both search operations. Constructors | Improve this Doc View Source BinarySearchFinder(RotatedTextWithTerminator, Func<RotatedTextWithTerminator, IComparer<Char>, RotatedTextWithTerminator>) Declaration public BinarySearchFinder(RotatedTextWithTerminator lastBWMColumn, Func<RotatedTextWithTerminator, IComparer<char>, RotatedTextWithTerminator> bwtSorter) Parameters Type Name Description RotatedTextWithTerminator lastBWMColumn Func < RotatedTextWithTerminator , IComparer < System.Char >, RotatedTextWithTerminator > bwtSorter Remarks | Improve this Doc View Source BinarySearchFinder(RotatedTextWithTerminator, RotatedTextWithTerminator) Declaration public BinarySearchFinder(RotatedTextWithTerminator lastBWMColumn, RotatedTextWithTerminator firstBWMColumn) Parameters Type Name Description RotatedTextWithTerminator lastBWMColumn RotatedTextWithTerminator firstBWMColumn Remarks Properties | Improve this Doc View Source OrderedAscListSearch The ISearch implementation to be used when searching for elements in lists sorted in ascending order. Declaration protected static ISearch OrderedAscListSearch { get; } Property Value Type Description ISearch Methods | Improve this Doc View Source FindIndexOfNthOccurrenceInSortedBWT(Char, Int32) Declaration public override int FindIndexOfNthOccurrenceInSortedBWT(char charToFind, int occurrenceRank) Parameters Type Name Description System.Char charToFind System.Int32 occurrenceRank Returns Type Description System.Int32 Overrides NaiveFinder.FindIndexOfNthOccurrenceInSortedBWT(Char, Int32) Remarks This implementation takes advantage of the fact that SortedBWT is sorted. Time Complexity = O(log(n)). Space Complexity = O(1). | Improve this Doc View Source FindOccurrenceRankOfCharInSortedBWT(Int32) Declaration public override int FindOccurrenceRankOfCharInSortedBWT(int indexOfChar) Parameters Type Name Description System.Int32 indexOfChar Returns Type Description System.Int32 Overrides NaiveFinder.FindOccurrenceRankOfCharInSortedBWT(Int32) Remarks This implementation takes advantage of the fact that SortedBWT is sorted. Time Complexity = O(log(n)). Space Complexity = O(1). Implements ILastFirstFinder"
  },
  "api/MoreStructures.BurrowsWheelerTransform.Builders.LastFirstFinders.html": {
    "href": "api/MoreStructures.BurrowsWheelerTransform.Builders.LastFirstFinders.html",
    "title": "Namespace MoreStructures.BurrowsWheelerTransform.Builders.LastFirstFinders",
    "keywords": "Namespace MoreStructures.BurrowsWheelerTransform.Builders.LastFirstFinders Classes BinarySearchFinder A NaiveFinder refinement which iterates over BWT and uses binary search on SortedBWT . NaiveFinder A ILastFirstFinder implementation which just iterate over BWT and its sorted version every time. Each operation has Time Complexity = O(n) and Space Complexity = O(1). PrecomputedFinder A BinarySearchFinder refinement which precalculate an hash-map of all the positions by each char, for both BWT and its sorted version, which takes ~ 2 * n space. Interfaces ILastFirstFinder A stategy used by a IBuilder to find chars in BWT and in its sorted version SortedBWT ."
  },
  "api/MoreStructures.BurrowsWheelerTransform.Builders.LastFirstFinders.ILastFirstFinder.html": {
    "href": "api/MoreStructures.BurrowsWheelerTransform.Builders.LastFirstFinders.ILastFirstFinder.html",
    "title": "Interface ILastFirstFinder",
    "keywords": "Interface ILastFirstFinder A stategy used by a IBuilder to find chars in BWT and in its sorted version SortedBWT . Namespace : MoreStructures.BurrowsWheelerTransform.Builders.LastFirstFinders Assembly : MoreStructures.dll Syntax public interface ILastFirstFinder Fields | Improve this Doc View Source QuickSort A strategy to sort a RotatedTextWithTerminator (tipically containing the BWT ) using , which uses a QuickSort with Time Complexity = O(n * log(n)) in average and O(n^2) in the worst case. Declaration public static readonly Func<RotatedTextWithTerminator, IComparer<char>, RotatedTextWithTerminator> QuickSort Field Value Type Description Func < RotatedTextWithTerminator , IComparer < System.Char >, RotatedTextWithTerminator > Properties | Improve this Doc View Source BWT The Burrows-Wheeler Transform. Declaration RotatedTextWithTerminator BWT { get; } Property Value Type Description RotatedTextWithTerminator | Improve this Doc View Source CharComparer The used to compare chars of BWT or SortedBWT . Declaration IComparer<char> CharComparer { get; } Property Value Type Description IComparer < System.Char > Remarks The of System.Char cannot be used because the terminator in BWT and SortedBWT has to be treated in a special way ( Terminator is always to be considered smaller than any other char). | Improve this Doc View Source SortedBWT The sorted version of the Burrows-Wheeler Transform. Declaration RotatedTextWithTerminator SortedBWT { get; } Property Value Type Description RotatedTextWithTerminator Methods | Improve this Doc View Source FindIndexOfNthOccurrenceInBWT(Char, Int32) Find the index of the n-th occurrence (0-based) of the provided charToFind in BWT . Declaration int FindIndexOfNthOccurrenceInBWT(char charToFind, int occurrenceRank) Parameters Type Name Description System.Char charToFind The char to find in BWT . System.Int32 occurrenceRank The 0-based occurrence rank to find. 0 = 1st occurrence. Returns Type Description System.Int32 The index of the n-th occurrence of charToFind , if it exists. If it doesn't exist, returns -1. | Improve this Doc View Source FindIndexOfNthOccurrenceInSortedBWT(Char, Int32) Find the index of the n-th occurrence (0-based) of the provided charToFind in SortedBWT . Declaration int FindIndexOfNthOccurrenceInSortedBWT(char charToFind, int occurrenceRank) Parameters Type Name Description System.Char charToFind The char to find in SortedBWT . System.Int32 occurrenceRank The 0-based occurrence rank to find. 0 = 1st occurrence. Returns Type Description System.Int32 The index of the n-th occurrence of charToFind . If it doesn't exist, returns -1. | Improve this Doc View Source FindOccurrenceRankOfCharInBWT(Int32) Find the rank of occurrence rank (0-based) of the char at the provided index in BWT . Declaration int FindOccurrenceRankOfCharInBWT(int indexOfChar) Parameters Type Name Description System.Int32 indexOfChar The index of the char, whose occurrence has to be found. Returns Type Description System.Int32 The 0-based occurrence rank of the char at index indexOfChar . | Improve this Doc View Source FindOccurrenceRankOfCharInSortedBWT(Int32) Find the rank of occurrence rank (0-based) of the char at the provided index in SortedBWT . Declaration int FindOccurrenceRankOfCharInSortedBWT(int indexOfChar) Parameters Type Name Description System.Int32 indexOfChar The index of the char, whose occurrence has to be found. Returns Type Description System.Int32 The 0-based occurrence rank of the char at index indexOfChar . | Improve this Doc View Source LastToFirst(Int32) Given the index (0-based) of a char in the BWT , it finds the index of the corresponding char in the SortedBWT and its occurrence rank (0-based). Declaration (int indexInSortedBWT, int occurrenceRank) LastToFirst(int indexOfChar) Parameters Type Name Description System.Int32 indexOfChar The index of the char, to locate in the SortedBWT . Returns Type Description System.ValueTuple < System.Int32 , System.Int32 > The index of the char in the SortedBWT and its occurence rank (0-based)."
  },
  "api/MoreStructures.BurrowsWheelerTransform.Builders.LastFirstFinders.NaiveFinder.html": {
    "href": "api/MoreStructures.BurrowsWheelerTransform.Builders.LastFirstFinders.NaiveFinder.html",
    "title": "Class NaiveFinder",
    "keywords": "Class NaiveFinder A ILastFirstFinder implementation which just iterate over BWT and its sorted version every time. Each operation has Time Complexity = O(n) and Space Complexity = O(1). Inheritance System.Object NaiveFinder BinarySearchFinder Implements ILastFirstFinder Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.BurrowsWheelerTransform.Builders.LastFirstFinders Assembly : MoreStructures.dll Syntax public class NaiveFinder : ILastFirstFinder Constructors | Improve this Doc View Source NaiveFinder(RotatedTextWithTerminator, Func<RotatedTextWithTerminator, IComparer<Char>, RotatedTextWithTerminator>) Builds an instance of this finder, for the provided lastBWMColumn , using bwtSorter to calculate SortedBWT from it. Declaration public NaiveFinder(RotatedTextWithTerminator lastBWMColumn, Func<RotatedTextWithTerminator, IComparer<char>, RotatedTextWithTerminator> bwtSorter) Parameters Type Name Description RotatedTextWithTerminator lastBWMColumn The last column of the Burrows-Wheeler Matrix. Corresponds to the BWT. Func < RotatedTextWithTerminator , IComparer < System.Char >, RotatedTextWithTerminator > bwtSorter A function sorting the provided RotatedTextWithTerminator into a sorted RotatedTextWithTerminator , according to the provided of chars. | Improve this Doc View Source NaiveFinder(RotatedTextWithTerminator, RotatedTextWithTerminator) Builds an instance of this finder, for the provided lastBWMColumn and firstBWMColumn . Because both columns of the BWM are provided, no sorting happens. Declaration public NaiveFinder(RotatedTextWithTerminator lastBWMColumn, RotatedTextWithTerminator firstBWMColumn) Parameters Type Name Description RotatedTextWithTerminator lastBWMColumn The last column of the Burrows-Wheeler Matrix. Corresponds to the BWT. RotatedTextWithTerminator firstBWMColumn The first column of the Burrows-Wheeler Matrix. Corresponds to the Sorted BWT. Properties | Improve this Doc View Source BWT The Burrows-Wheeler Transform. Declaration public RotatedTextWithTerminator BWT { get; } Property Value Type Description RotatedTextWithTerminator | Improve this Doc View Source CharComparer The used to compare chars of BWT or SortedBWT . Declaration public IComparer<char> CharComparer { get; } Property Value Type Description IComparer < System.Char > Remarks The of System.Char cannot be used because the terminator in BWT and SortedBWT has to be treated in a special way ( Terminator is always to be considered smaller than any other char). | Improve this Doc View Source SortedBWT The sorted version of the Burrows-Wheeler Transform. Declaration public RotatedTextWithTerminator SortedBWT { get; } Property Value Type Description RotatedTextWithTerminator Methods | Improve this Doc View Source FindIndexOfNthOccurrenceInBWT(Char, Int32) Declaration public virtual int FindIndexOfNthOccurrenceInBWT(char charToFind, int occurrenceRank) Parameters Type Name Description System.Char charToFind System.Int32 occurrenceRank Returns Type Description System.Int32 Remarks This implementation just iterates over BWT every time. Time Complexity = O(n). Space Complexity = O(1). | Improve this Doc View Source FindIndexOfNthOccurrenceInSortedBWT(Char, Int32) Declaration public virtual int FindIndexOfNthOccurrenceInSortedBWT(char charToFind, int occurrenceRank) Parameters Type Name Description System.Char charToFind System.Int32 occurrenceRank Returns Type Description System.Int32 Remarks This implementation just iterates over SortedBWT every time. Time Complexity = O(n). Space Complexity = O(1). | Improve this Doc View Source FindOccurrenceRankOfCharInBWT(Int32) Declaration public virtual int FindOccurrenceRankOfCharInBWT(int indexOfChar) Parameters Type Name Description System.Int32 indexOfChar Returns Type Description System.Int32 Remarks This implementation just iterates over BWT every time. Time Complexity = O(n). Space Complexity = O(1). | Improve this Doc View Source FindOccurrenceRankOfCharInSortedBWT(Int32) Declaration public virtual int FindOccurrenceRankOfCharInSortedBWT(int indexOfChar) Parameters Type Name Description System.Int32 indexOfChar Returns Type Description System.Int32 Remarks This implementation just iterates over SortedBWT every time. Time Complexity = O(n). Space Complexity = O(1). | Improve this Doc View Source LastToFirst(Int32) Declaration public (int indexInSortedBWT, int occurrenceRank) LastToFirst(int indexOfChar) Parameters Type Name Description System.Int32 indexOfChar Returns Type Description System.ValueTuple < System.Int32 , System.Int32 > Remarks First executes FindOccurrenceRankOfCharInBWT(Int32) , to find the occurrence rank of the char at index indexOfChar and then uses the last-to-first property to find the corresponding char in SortedBWT by using FindIndexOfNthOccurrenceInSortedBWT(Char, Int32) . Time and Space Complexity depends on the implementation of FindOccurrenceRankOfCharInBWT(Int32) and FindIndexOfNthOccurrenceInSortedBWT(Char, Int32) . Implements ILastFirstFinder"
  },
  "api/MoreStructures.BurrowsWheelerTransform.Builders.LastFirstFinders.PrecomputedFinder.html": {
    "href": "api/MoreStructures.BurrowsWheelerTransform.Builders.LastFirstFinders.PrecomputedFinder.html",
    "title": "Class PrecomputedFinder",
    "keywords": "Class PrecomputedFinder A BinarySearchFinder refinement which precalculate an hash-map of all the positions by each char, for both BWT and its sorted version, which takes ~ 2 * n space. Inheritance System.Object NaiveFinder BinarySearchFinder PrecomputedFinder Implements ILastFirstFinder Inherited Members BinarySearchFinder.OrderedAscListSearch NaiveFinder.CharComparer NaiveFinder.BWT NaiveFinder.SortedBWT NaiveFinder.LastToFirst(Int32) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.BurrowsWheelerTransform.Builders.LastFirstFinders Assembly : MoreStructures.dll Syntax public class PrecomputedFinder : BinarySearchFinder, ILastFirstFinder Constructors | Improve this Doc View Source PrecomputedFinder(RotatedTextWithTerminator, Func<RotatedTextWithTerminator, IComparer<Char>, RotatedTextWithTerminator>) Declaration public PrecomputedFinder(RotatedTextWithTerminator lastBWMColumn, Func<RotatedTextWithTerminator, IComparer<char>, RotatedTextWithTerminator> bwtSorter) Parameters Type Name Description RotatedTextWithTerminator lastBWMColumn Func < RotatedTextWithTerminator , IComparer < System.Char >, RotatedTextWithTerminator > bwtSorter Remarks | Improve this Doc View Source PrecomputedFinder(RotatedTextWithTerminator, RotatedTextWithTerminator) Declaration public PrecomputedFinder(RotatedTextWithTerminator lastBWMColumn, RotatedTextWithTerminator firstBWMColumn) Parameters Type Name Description RotatedTextWithTerminator lastBWMColumn RotatedTextWithTerminator firstBWMColumn Remarks Properties | Improve this Doc View Source UnorderedListSearch The ISearch implementation to be used when searching for elements in lists not sorted in any order. Declaration protected static ISearch UnorderedListSearch { get; } Property Value Type Description ISearch Methods | Improve this Doc View Source FindIndexOfNthOccurrenceInBWT(Char, Int32) Declaration public override int FindIndexOfNthOccurrenceInBWT(char charToFind, int occurrenceRank) Parameters Type Name Description System.Char charToFind System.Int32 occurrenceRank Returns Type Description System.Int32 Overrides NaiveFinder.FindIndexOfNthOccurrenceInBWT(Char, Int32) Remarks This implementation úses a precomputed hash-map of all the positions by each char. Time Complexity = O(1). Space Complexity = O(1). | Improve this Doc View Source FindIndexOfNthOccurrenceInSortedBWT(Char, Int32) Declaration public override int FindIndexOfNthOccurrenceInSortedBWT(char charToFind, int occurrenceRank) Parameters Type Name Description System.Char charToFind System.Int32 occurrenceRank Returns Type Description System.Int32 Overrides BinarySearchFinder.FindIndexOfNthOccurrenceInSortedBWT(Char, Int32) Remarks | Improve this Doc View Source FindOccurrenceRankOfCharInBWT(Int32) Declaration public override int FindOccurrenceRankOfCharInBWT(int indexOfChar) Parameters Type Name Description System.Int32 indexOfChar Returns Type Description System.Int32 Overrides NaiveFinder.FindOccurrenceRankOfCharInBWT(Int32) | Improve this Doc View Source FindOccurrenceRankOfCharInSortedBWT(Int32) Declaration public override int FindOccurrenceRankOfCharInSortedBWT(int indexOfChar) Parameters Type Name Description System.Int32 indexOfChar Returns Type Description System.Int32 Overrides BinarySearchFinder.FindOccurrenceRankOfCharInSortedBWT(Int32) Remarks This implementation uses a precomputed hash-map of all the positions by each char. It also takes advantage of the fact that SortedBWT is sorted, by running a Binary Search on it, which takes logarithmic time over the list of indexes for the char at position indexOfChar in SortedBWT . Such list has average size = n / sigma, where n = number of chars in SortedBWT and sigma = size of the alphabet of SortedBWT . If sigma is constant, the list has a size O(n). Therefore, Time Complexity = O(log(n)) and Space Complexity = O(1). Implements ILastFirstFinder"
  },
  "api/MoreStructures.BurrowsWheelerTransform.Builders.LastFirstPropertyBasedBuilder.html": {
    "href": "api/MoreStructures.BurrowsWheelerTransform.Builders.LastFirstPropertyBasedBuilder.html",
    "title": "Class LastFirstPropertyBasedBuilder",
    "keywords": "Class LastFirstPropertyBasedBuilder An extension of NaiveBuilder which takes advantange of the last-first property to reduce the complexity of InvertTransform(RotatedTextWithTerminator) . Inheritance System.Object NaiveBuilder LastFirstPropertyBasedBuilder Implements IBuilder Inherited Members NaiveBuilder.BuildMatrix(TextWithTerminator) NaiveBuilder.BuildMatrix(BWTransform) NaiveBuilder.BuildTransform(BWMatrix) NaiveBuilder.BuildTransform(TextWithTerminator) NaiveBuilder.InvertMatrix(BWMatrix) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.BurrowsWheelerTransform.Builders Assembly : MoreStructures.dll Syntax public class LastFirstPropertyBasedBuilder : NaiveBuilder, IBuilder Remarks A ILastFirstFinder , built by FirstLastFinderBuilder is used to jump between the BWT and its sorted version. Properties | Improve this Doc View Source FirstLastFinderBuilder The strategy by which this builder finds chars in the BWT and its sorted version. Declaration public Func<RotatedTextWithTerminator, ILastFirstFinder> FirstLastFinderBuilder { get; set; } Property Value Type Description Func < RotatedTextWithTerminator , ILastFirstFinder > Methods | Improve this Doc View Source InvertTransform(RotatedTextWithTerminator) Declaration public override TextWithTerminator InvertTransform(RotatedTextWithTerminator lastBWMColumn) Parameters Type Name Description RotatedTextWithTerminator lastBWMColumn Returns Type Description TextWithTerminator Overrides NaiveBuilder.InvertTransform(RotatedTextWithTerminator) Remarks This implementation inverts the BWT by using the last-first property. - First column of the matrix (sBWT) is just the last column (BWT), sorted. - By last-first property, the 1-st (and only) occurrence of terminator in sBWT at sBWT[0] corresponds to the 1st occurrence of terminator in BWT at BWT[i0]. BWTs[i0] is the 1-st char of the text. - Again by last-first property, the n-th occurrence of c in BWTs at sBWTs[i0] corresponds to the n-th occurrence of c in BWT at BWT[i1]. BWTs[i1] is the 2-st char of the text. - And so on, until BWTs[i(n-1)], the terminator, is reached. Complexity: - Before any iteration, Sorted BWT is computed, taking O(n * log(n)) time, where n is the length of lastBWMColumn . If the alphabet is of constant size sigma, Counting Sort reduces the overall Time Complexity of this step to O(n). - After that the finder may also preallocate other supporting structures, to speed up searches (such the dictionary used in PrecomputedFinder . Although it depends on the specific implementation built by FirstLastFinderBuilder , we may assume this cost to also be linear with n. - From terminator to terminator, there are n top-level iterations. Each iteration takes m1 + m2, where m1 is the cost of FindIndexOfNthOccurrenceInBWT(Char, Int32) and m2 is the cost of FindOccurrenceRankOfCharInSortedBWT(Int32) . - Finally, the System.Text.StringBuilder used as accumulator generates the text string. At most O(n). - So total Time Complexity is O(n * (m1 + m2)) and Space Complexity is O(n). Using NaiveFinder , m1 and m2 are both O(n), so Time Complexity is O(n^2). Using BinarySearchFinder , m1 is O(n) and m2 is O(log(n)), so overall Time Complexity is still O(n^2). Using PrecomputedFinder , m1 is O(1), whereas m2 is O(log(n / sigma)) where sigma is the size of the alphabet, so overall Time Complexity is O(n * log(n)) if sigma is constant. Implements IBuilder"
  },
  "api/MoreStructures.BurrowsWheelerTransform.Builders.NaiveBuilder.html": {
    "href": "api/MoreStructures.BurrowsWheelerTransform.Builders.NaiveBuilder.html",
    "title": "Class NaiveBuilder",
    "keywords": "Class NaiveBuilder This implementation adopts the simplest approach at BWMatrix building, which results in a more than quadratic time and space. BWTransform is calculated via the BWMatrix , therefore same level of Time and Space Complexity. Inheritance System.Object NaiveBuilder LastFirstPropertyBasedBuilder Implements IBuilder Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.BurrowsWheelerTransform.Builders Assembly : MoreStructures.dll Syntax public class NaiveBuilder : IBuilder Remarks Check specific builder methods, such as BuildMatrix(TextWithTerminator) , for further information about the complexity of each operation. Methods | Improve this Doc View Source BuildMatrix(BWTransform) Rebuilds the original BWMatrix from a BWTransform representing the last column of the Burrows-Wheeler Matrix (which is also the Burrows-Wheeler Transform). Declaration public BWMatrix BuildMatrix(BWTransform lastBWMColumn) Parameters Type Name Description BWTransform lastBWMColumn The last column of the Burrows-Wheeler Matrix. Returns Type Description BWMatrix The matrix, wrapped into a BWMatrix object. Remarks Because the entire Burrows-Wheeler Matrix is built from the text with an invertible function, and the same happens for the Burrows-Wheeler Transform of the text, it's possible to get back the entire matrix from its last column. | Improve this Doc View Source BuildMatrix(TextWithTerminator) Builds Burrows-Wheeler objects, such as BWMatrix and BWTransform of the provided TextWithTerminator . Declaration public virtual BWMatrix BuildMatrix(TextWithTerminator text) Parameters Type Name Description TextWithTerminator text The text to build the BWM, with its terminator (required). Returns Type Description BWMatrix The matrix, wrapped into a BWMatrix object. Remarks Since this operation requires computing a n * n matrix, where n is the Length of text , it can be intensive operation, both in time: Sorting a large number of strings on a large non-constant alphabet takes n * log(n) * m, where m is the cost of a comparison of two n-sized strings, which is O(n). Therefore Time Complexity is O(n^2 * log(n)). If the alphabet can be considered of constant size and comparison between two strings happens in constant time, the complexity is O(n * log(n)). The output is a n * n matrix of chars (all cyclic rotations of a n-sized string). Therefore Space Complexity is O(n^2 * m), when no assumption is made on the size of a char being constant, where m = log(w, M), with w = size of a word in memory and M = size of the alphabet. If the alphabet can be considered of constant size, the complexity is O(n^2). | Improve this Doc View Source BuildTransform(BWMatrix) Builds the Burrows-Wheeler Transform from the provided BWMatrix . Declaration public virtual BWTransform BuildTransform(BWMatrix matrix) Parameters Type Name Description BWMatrix matrix The matrix, whose BWT has to be calculated. Returns Type Description BWTransform The transform, wrapped into a BWTransform object. Remarks | Improve this Doc View Source BuildTransform(TextWithTerminator) Builds Burrows-Wheeler objects, such as BWMatrix and BWTransform of the provided TextWithTerminator . Declaration public virtual BWTransform BuildTransform(TextWithTerminator text) Parameters Type Name Description TextWithTerminator text The text, whose BWT has to be calculated. Returns Type Description BWTransform The transform, wrapped into a BWTransform object. Remarks Done without constructing the BWMatrix of text , which would requires O(n^2) space. Instead, n VirtuallyRotatedTextWithTerminator objects are created (one per char of text ), mapping a specific rotation of the original text and taking into account the rotation in its all its char-position dependent functionalities, such as CompareTo(VirtuallyRotatedTextWithTerminator) , GetEnumerator() etc. | Improve this Doc View Source InvertMatrix(BWMatrix) Rebuilds the original TextWithTerminator from the BWMatrix . Declaration public virtual TextWithTerminator InvertMatrix(BWMatrix matrix) Parameters Type Name Description BWMatrix matrix The matrix, whose original text has to be calculated. Returns Type Description TextWithTerminator The text which corresponds to the provided matrix. Remarks No computation to be done, except for building the string of the TextWithTerminator . Time Complexity = O(n), Space Complexity = O(n), where n = edge of matrix . | Improve this Doc View Source InvertTransform(RotatedTextWithTerminator) Declaration public virtual TextWithTerminator InvertTransform(RotatedTextWithTerminator lastBWMColumn) Parameters Type Name Description RotatedTextWithTerminator lastBWMColumn Returns Type Description TextWithTerminator Remarks This implementation inverts the BWT by iteratively building n+1-mers from n-mers. - 1-mers (first column of the matrix) is just the last column (BWT), sorted. That gives a matrix M0 of 1 columns and n rows (where n = length of lastBWMColumn ). - 2-mers are derived from 1-mers, by juxtaposing side-by-side last column (BWT) and M0, sorted. That gives a matrix M1 of 2 columns and n rows. - 3-mers are derived from 2-mers, by juxtaposing side-by-side last column (BWT) and M1, sorted. That gives a matrix M2 of 3 columns and n rows. - And so on, up to (n - 1)-mers and matrix M(n - 2) of n - 1 columns and n rows. - The last column is already known (BWT), so the text can be extracted from the first line: the first char is the separator, the rest is the text without separator. There are n top-level iterations, where n is the length of lastBWMColumn . Each iteration takes n * log(n) * m time to sort, where m is the length of strings to compare = n. So total Time Complexity is O(n^3 * log(n)) and Space Complexity is O(n^2). Implements IBuilder"
  },
  "api/MoreStructures.BurrowsWheelerTransform.BWMatrix.html": {
    "href": "api/MoreStructures.BurrowsWheelerTransform.BWMatrix.html",
    "title": "Class BWMatrix",
    "keywords": "Class BWMatrix The Burrows-Wheeler Matrix (BWM) of a TextWithTerminator is the square matrix all cyclic rotations of the provided TextWithTerminator , with rows sorted in ascending order and taking into account that Terminator is to be considered smaller than any other char in the text. Inheritance System.Object BWMatrix Implements System.IEquatable < BWMatrix > Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.BurrowsWheelerTransform Assembly : MoreStructures.dll Syntax public class BWMatrix : IEquatable<BWMatrix> Remarks This langword_csharp_record is a typed wrapped of the underlying langword_csharp_IList{string} representing the BWM. It guarantes immutability and strong typing, and also keeps together the Text and its matrix Content , providing BWM-specific functionalities. Constructors | Improve this Doc View Source BWMatrix(TextWithTerminator, IList<String>) The Burrows-Wheeler Matrix (BWM) of a TextWithTerminator is the square matrix all cyclic rotations of the provided TextWithTerminator , with rows sorted in ascending order and taking into account that Terminator is to be considered smaller than any other char in the text. Declaration public BWMatrix(TextWithTerminator Text, IList<string> Content) Parameters Type Name Description TextWithTerminator Text The text, corresponding to the provided BWM. IList < System.String > Content The content of the Burrows-Wheeler Matrix (BWM) of Text . Remarks This langword_csharp_record is a typed wrapped of the underlying langword_csharp_IList{string} representing the BWM. It guarantes immutability and strong typing, and also keeps together the Text and its matrix Content , providing BWM-specific functionalities. Properties | Improve this Doc View Source Content Declaration public IList<string> Content { get; set; } Property Value Type Description IList < System.String > A readonly immutable list of strings, each one containing a row of the matrix, i.e. a string containing a cyclic rotation of Text . Examples Code: new BWTMatrix(new(\"ab\"), new string[] { \"$ab\", \"ab$\", \"b$a\" }).Content Result: { \"$ab\", \"ab$\", \"b$a\", } | Improve this Doc View Source FirstColumn Returns the first column of this BWMatrix . Corresponds to the sorted Text and also to the sorted Transform of this BWMatrix . Declaration public string FirstColumn { get; } Property Value Type Description System.String Remarks Unlike LastColumn and Transform , FirstColumn wouldn't require computation of the Content of this BWMatrix , since the FirstColumn can easily be calculated by sorting the input Text . Examples Code: new BWTMatrix(new(\"mississippi\")).FirstColumn Result: \"$iiiimppssss\" | Improve this Doc View Source LastColumn Returns the last column of this BWMatrix . Corresponds to the Content of the Transform of this BWMatrix . Declaration public string LastColumn { get; } Property Value Type Description System.String Remarks Requires Content calculation. Examples Code: new BWTMatrix(new(\"mississippi\")).LastColumn Result: \"ipssm$pissii\" | Improve this Doc View Source Text Declaration public TextWithTerminator Text { get; set; } Property Value Type Description TextWithTerminator | Improve this Doc View Source Transform Builds the Burrows-Wheeler Transform from this BWMatrix , which corresponds to the last column of the matrix, stored in Content . Declaration public BWTransform Transform { get; } Property Value Type Description BWTransform A BWTransform object wrapping the string containing the Burrows-Wheeler transform. Remarks Requires Content calculation. Examples Code: new BWTMatrix(new(\"mississippi\")).Transform; Result: \"ipssm$pissii\" Implements System.IEquatable<T>"
  },
  "api/MoreStructures.BurrowsWheelerTransform.BWTransform.html": {
    "href": "api/MoreStructures.BurrowsWheelerTransform.BWTransform.html",
    "title": "Class BWTransform",
    "keywords": "Class BWTransform The Burrows-Wheeler Transform (BWT) of a TextWithTerminator Text is a permutation of the chars of Text which corresponds to the LastColumn of the BWMatrix of Text . Inheritance System.Object BWTransform Implements System.IEquatable < BWTransform > Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.BurrowsWheelerTransform Assembly : MoreStructures.dll Syntax public class BWTransform : IEquatable<BWTransform> Remarks This langword_csharp_record is a typed wrapped of the underlying langword_csharp_string representing the BWT. It guarantes immutability and strong typing, and also keeps together the Text and its transform Content . Constructors | Improve this Doc View Source BWTransform(TextWithTerminator, RotatedTextWithTerminator) The Burrows-Wheeler Transform (BWT) of a TextWithTerminator Text is a permutation of the chars of Text which corresponds to the LastColumn of the BWMatrix of Text . Declaration public BWTransform(TextWithTerminator Text, RotatedTextWithTerminator Content) Parameters Type Name Description TextWithTerminator Text The text to calculate the BWT of. RotatedTextWithTerminator Content The string which corresponds to the transform of the text. Remarks This langword_csharp_record is a typed wrapped of the underlying langword_csharp_string representing the BWT. It guarantes immutability and strong typing, and also keeps together the Text and its transform Content . Properties | Improve this Doc View Source Content Declaration public RotatedTextWithTerminator Content { get; set; } Property Value Type Description RotatedTextWithTerminator | Improve this Doc View Source Length The length of this transform, which corresponds to the length of Content . Declaration public int Length { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Text Declaration public TextWithTerminator Text { get; set; } Property Value Type Description TextWithTerminator Implements System.IEquatable<T>"
  },
  "api/MoreStructures.BurrowsWheelerTransform.html": {
    "href": "api/MoreStructures.BurrowsWheelerTransform.html",
    "title": "Namespace MoreStructures.BurrowsWheelerTransform",
    "keywords": "Namespace MoreStructures.BurrowsWheelerTransform Classes BWMatrix The Burrows-Wheeler Matrix (BWM) of a TextWithTerminator is the square matrix all cyclic rotations of the provided TextWithTerminator , with rows sorted in ascending order and taking into account that Terminator is to be considered smaller than any other char in the text. BWTransform The Burrows-Wheeler Transform (BWT) of a TextWithTerminator Text is a permutation of the chars of Text which corresponds to the LastColumn of the BWMatrix of Text ."
  },
  "api/MoreStructures.BurrowsWheelerTransform.Matching.html": {
    "href": "api/MoreStructures.BurrowsWheelerTransform.Matching.html",
    "title": "Namespace MoreStructures.BurrowsWheelerTransform.Matching",
    "keywords": "Namespace MoreStructures.BurrowsWheelerTransform.Matching Classes Match The result of a pattern matching done by a . NarrowingIntervalMatcher Interfaces IMatcher A implementation of matching of a pattern against a RotatedTextWithTerminator containing a Burrows-Wheeler Transform of a text."
  },
  "api/MoreStructures.BurrowsWheelerTransform.Matching.IMatcher.html": {
    "href": "api/MoreStructures.BurrowsWheelerTransform.Matching.IMatcher.html",
    "title": "Interface IMatcher",
    "keywords": "Interface IMatcher A implementation of matching of a pattern against a RotatedTextWithTerminator containing a Burrows-Wheeler Transform of a text. Namespace : MoreStructures.BurrowsWheelerTransform.Matching Assembly : MoreStructures.dll Syntax public interface IMatcher Methods | Improve this Doc View Source Match(RotatedTextWithTerminator, RotatedTextWithTerminator, IEnumerable<Char>) Tries to match the provided pattern using the provided bwt and its sorted version sbwt . Declaration Match Match(RotatedTextWithTerminator bwt, RotatedTextWithTerminator sbwt, IEnumerable<char> pattern) Parameters Type Name Description RotatedTextWithTerminator bwt The Burrows-Wheeler Transform of the text. RotatedTextWithTerminator sbwt The Sorted Burrows-Wheeler Transform of the text System.Collections.Generic.IEnumerable < System.Char > pattern The patter to be matched against the text. Returns Type Description Match The result of the pattern matching, successful or not."
  },
  "api/MoreStructures.BurrowsWheelerTransform.Matching.Match.html": {
    "href": "api/MoreStructures.BurrowsWheelerTransform.Matching.Match.html",
    "title": "Class Match",
    "keywords": "Class Match The result of a pattern matching done by a . Inheritance System.Object Match Implements System.IEquatable < Match > Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.BurrowsWheelerTransform.Matching Assembly : MoreStructures.dll Syntax public class Match : IEquatable<Match> Constructors | Improve this Doc View Source Match(Boolean, Int32, Int32, Int32) The result of a pattern matching done by a . Declaration public Match(bool Success, int MatchedChars, int StartIndex, int EndIndex) Parameters Type Name Description System.Boolean Success Whether the pattern matching was successful or not. System.Int32 MatchedChars The number of chars matched from the pattern. If is false , the value will be strictly smaller than the length of the pattern. Otherwise, it will be equal to the length of the pattern. System.Int32 StartIndex The 0-based index, in the Sorted Burrows-Wheeler Transform, of the first char matching. Negative if no matching has happened. System.Int32 EndIndex The 0-based index, in the Sorted Burrows-Wheeler Transform, of the last char matching. Negative if no matching has happened. Properties | Improve this Doc View Source EndIndex Declaration public int EndIndex { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source MatchedChars Declaration public int MatchedChars { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source StartIndex Declaration public int StartIndex { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source Success Declaration public bool Success { get; set; } Property Value Type Description System.Boolean Implements System.IEquatable<T>"
  },
  "api/MoreStructures.BurrowsWheelerTransform.Matching.NarrowingIntervalMatcher.html": {
    "href": "api/MoreStructures.BurrowsWheelerTransform.Matching.NarrowingIntervalMatcher.html",
    "title": "Class NarrowingIntervalMatcher",
    "keywords": "Class NarrowingIntervalMatcher Inheritance System.Object NarrowingIntervalMatcher Implements IMatcher Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.BurrowsWheelerTransform.Matching Assembly : MoreStructures.dll Syntax public class NarrowingIntervalMatcher : IMatcher Remarks This is a basic implementation, using a narrowing interval. Properties | Improve this Doc View Source OrderedAscListSearch The ISearch implementation to be used when searching for elements in lists sorted in ascending order. Declaration protected static ISearch OrderedAscListSearch { get; } Property Value Type Description ISearch Methods | Improve this Doc View Source Match(RotatedTextWithTerminator, RotatedTextWithTerminator, IEnumerable<Char>) Declaration public Match Match(RotatedTextWithTerminator bwt, RotatedTextWithTerminator sbwt, IEnumerable<char> pattern) Parameters Type Name Description RotatedTextWithTerminator bwt RotatedTextWithTerminator sbwt IEnumerable < System.Char > pattern Returns Type Description Match Remarks The pattern matching is done via successive narrowing of a interval, defined by a start and an end index. At the beginning the interval is as big as the provided BWTransform (and its text). The algorithmn proceeds in reverse: from the last char of the pattern P, P[^1] to the first, P[0]. Binary search in Sorted BWT for the range of indexes (first1, last1) having value P[^1]. The char in BWT at indexes first1 and last1 represent the predecessor of all instances of P[^1] in P. The interval (first1, last1) can then be narrowed down to (first2, last2), taking into account only the chars in BWT which match the predecessor of P[^1], P[^2]. By last-first property, new indexes (first3, last3) of the chars in Sorted BWT corresponding to first2 and last2 in BWT, can be found. Those are the first and last of the new narrowed range, ready for step 4. When all chars of P, up to P[0], have been consumed, all matches have been identified as an interval in Sorted BWT. Implements IMatcher"
  },
  "api/MoreStructures.CountTrees.CountTreeEdge-2.html": {
    "href": "api/MoreStructures.CountTrees.CountTreeEdge-2.html",
    "title": "Class CountTreeEdge<TEdge, TNode>",
    "keywords": "Class CountTreeEdge<TEdge, TNode> An implementation of , wrapping another implementation of , and linking two instances of wrapper nodes . Inheritance System.Object CountTreeEdge<TEdge, TNode> Implements IRecImmDictIndexedTreeEdge < CountTreeEdge <TEdge, TNode>, CountTreeNode <TEdge, TNode>> System.IEquatable < CountTreeEdge <TEdge, TNode>> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.CountTrees Assembly : MoreStructures.dll Syntax public sealed class CountTreeEdge<TEdge, TNode> : IRecImmDictIndexedTreeEdge<CountTreeEdge<TEdge, TNode>, CountTreeNode<TEdge, TNode>>, IEquatable<CountTreeEdge<TEdge, TNode>> where TEdge : IRecImmDictIndexedTreeEdge<TEdge, TNode> where TNode : IRecImmDictIndexedTreeNode<TEdge, TNode> Type Parameters Name Description TEdge TNode Remarks Due to records semantics, two instances wrapping the same underlying edge, or two equivalent edges, will be equal. Examples Edge edge = ... CountTreeEdge<Edge, Node> countEdge = new(edge); Constructors | Improve this Doc View Source CountTreeEdge(TEdge) An implementation of , wrapping another implementation of , and linking two instances of wrapper nodes . Declaration public CountTreeEdge(TEdge WrappedEdge) Parameters Type Name Description TEdge WrappedEdge The edge being wrapped, pointing to descendants which are going to be counted. Remarks Due to records semantics, two instances wrapping the same underlying edge, or two equivalent edges, will be equal. Examples Edge edge = ... CountTreeEdge<Edge, Node> countEdge = new(edge); Properties | Improve this Doc View Source WrappedEdge Declaration public TEdge WrappedEdge { get; set; } Property Value Type Description TEdge Implements IRecImmDictIndexedTreeEdge<TEdge, TNode> System.IEquatable<T>"
  },
  "api/MoreStructures.CountTrees.CountTreeNode-2.html": {
    "href": "api/MoreStructures.CountTrees.CountTreeNode-2.html",
    "title": "Class CountTreeNode<TEdge, TNode>",
    "keywords": "Class CountTreeNode<TEdge, TNode> An implementation of IRecImmDictIndexedTreeNode<TEdge, TNode> , wrapping another implementation of IRecImmDictIndexedTreeNode<TEdge, TNode> , and counting the total number of descendands the wrapped node has below (node itself excluded). Inheritance System.Object CountTreeNode<TEdge, TNode> Implements IRecImmDictIndexedTreeNode < CountTreeEdge <TEdge, TNode>, CountTreeNode <TEdge, TNode>> System.IEquatable < CountTreeNode <TEdge, TNode>> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.CountTrees Assembly : MoreStructures.dll Syntax public sealed class CountTreeNode<TEdge, TNode> : IRecImmDictIndexedTreeNode<CountTreeEdge<TEdge, TNode>, CountTreeNode<TEdge, TNode>>, IEquatable<CountTreeNode<TEdge, TNode>> where TEdge : IRecImmDictIndexedTreeEdge<TEdge, TNode> where TNode : IRecImmDictIndexedTreeNode<TEdge, TNode> Type Parameters Name Description TEdge TNode Remarks Due to records semantics, and the use of value readonly dictionaries, two CountTreeNode<TEdge, TNode> instances wrapping the same underlying node, or two equivalent nodes, will be equal. CountTreeNode<TEdge, TNode> structure construction and properties calculation are done lazily and fully iteratively, so the use of this structure is not limited by call stack depth but rather by the maximum size of the stack stored in the heap. Convenient with deep trees (i.e. trees having a height > ~1K nodes). Once Children and DescendantsCount properties are calculated, they are cached to avoid multiple calculation. This is also one of the reasons why immutability of the wrapped tree is a requirement to use CountTreeNode<TEdge, TNode> . Time Complexity = O(n) and Space Complexity = O(n) where n = number of nodes in WrappedNode structure. Leafs are visited only once, intermediate nodes are visited (at most) twice. Examples var wrapped = new Node(1) { Children = new Dictionary<Edge, Node> { [new(1)] = new(2), [new(2)] = new(3) { ... }, [new(5)] = new(6), } }; var wrapping = new CountTreeNode<Edge, Node>(wrapped); Assert.AreEqual(3, wrapping.Children.Count); Constructors | Improve this Doc View Source CountTreeNode(TNode) An implementation of IRecImmDictIndexedTreeNode<TEdge, TNode> , wrapping another implementation of IRecImmDictIndexedTreeNode<TEdge, TNode> , and counting the total number of descendands the wrapped node has below (node itself excluded). Declaration public CountTreeNode(TNode WrappedNode) Parameters Type Name Description TNode WrappedNode The node being wrapped, and whose descendants are going to be counted. Remarks Due to records semantics, and the use of value readonly dictionaries, two CountTreeNode<TEdge, TNode> instances wrapping the same underlying node, or two equivalent nodes, will be equal. CountTreeNode<TEdge, TNode> structure construction and properties calculation are done lazily and fully iteratively, so the use of this structure is not limited by call stack depth but rather by the maximum size of the stack stored in the heap. Convenient with deep trees (i.e. trees having a height > ~1K nodes). Once Children and DescendantsCount properties are calculated, they are cached to avoid multiple calculation. This is also one of the reasons why immutability of the wrapped tree is a requirement to use CountTreeNode<TEdge, TNode> . Time Complexity = O(n) and Space Complexity = O(n) where n = number of nodes in WrappedNode structure. Leafs are visited only once, intermediate nodes are visited (at most) twice. Examples var wrapped = new Node(1) { Children = new Dictionary<Edge, Node> { [new(1)] = new(2), [new(2)] = new(3) { ... }, [new(5)] = new(6), } }; var wrapping = new CountTreeNode<Edge, Node>(wrapped); Assert.AreEqual(3, wrapping.Children.Count); Properties | Improve this Doc View Source Children A readonly view of the children private collection of this node. Empty for leaves. Declaration public IDictionary<CountTreeEdge<TEdge, TNode>, CountTreeNode<TEdge, TNode>> Children { get; } Property Value Type Description IDictionary < CountTreeEdge <TEdge, TNode>, CountTreeNode <TEdge, TNode>> Remarks | Improve this Doc View Source DescendantsCount The number of descendands below this node (node itself excluded). Declaration public int DescendantsCount { get; } Property Value Type Description System.Int32 Remarks | Improve this Doc View Source WrappedNode Declaration public TNode WrappedNode { get; set; } Property Value Type Description TNode Implements IRecImmDictIndexedTreeNode<TEdge, TNode> System.IEquatable<T> Extension Methods RecImmDictIndexedTreeNodeExtensions.IsLeaf<TEdge, TNode>(IRecImmDictIndexedTreeNode<TEdge, TNode>) RecImmDictIndexedTreeNodeExtensions.GetAllNodeToLeafPaths<TEdge, TNode>(IRecImmDictIndexedTreeNode<TEdge, TNode>)"
  },
  "api/MoreStructures.CountTrees.html": {
    "href": "api/MoreStructures.CountTrees.html",
    "title": "Namespace MoreStructures.CountTrees",
    "keywords": "Namespace MoreStructures.CountTrees Classes CountTreeEdge<TEdge, TNode> An implementation of , wrapping another implementation of , and linking two instances of wrapper nodes . CountTreeNode<TEdge, TNode> An implementation of IRecImmDictIndexedTreeNode<TEdge, TNode> , wrapping another implementation of IRecImmDictIndexedTreeNode<TEdge, TNode> , and counting the total number of descendands the wrapped node has below (node itself excluded)."
  },
  "api/MoreStructures.html": {
    "href": "api/MoreStructures.html",
    "title": "Namespace MoreStructures",
    "keywords": "Namespace MoreStructures Classes RotatedTextWithTerminator A text string with a terminator character which has been rotated leftwards or rightwards, of a number of positions (0 included). TextWithTerminator A text string with a terminator character, not present in the text. TextWithTerminatorExtensions Extension methods for TextWithTerminator . VirtuallyRotatedTextWithTerminator A text string with a terminator character which has been rotated leftwards or rightwards, of a number of positions (0 included). Interfaces TextWithTerminator.ISelector A selector of a part of a TextWithTerminator or RotatedTextWithTerminator ."
  },
  "api/MoreStructures.Lists.Searching.BinarySearch.html": {
    "href": "api/MoreStructures.Lists.Searching.BinarySearch.html",
    "title": "Class BinarySearch",
    "keywords": "Class BinarySearch An object able to search in logarithmic time for elements in direct random access structures, such as lists and arrays, which are monodimensional, implement the System.Collections.Generic.IEnumerable<T> interface and are sorted in ascending order according to the provided comparer (which is the property enabling the search to be carried out in O(log(n)) time. Inheritance System.Object BinarySearch Implements ISearch Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Lists.Searching Assembly : MoreStructures.dll Syntax public class BinarySearch : ISearch Remarks The sorting order assumed by this search can be reversed by simply inverting the comparer implementation. Methods | Improve this Doc View Source First<T>(IEnumerable<T>, T, IComparer<T>, Nullable<Int32>, Nullable<Int32>) Find the index of the first element in the sub-sequence of elements of source from fromIndex to toIndex included, which is equal to element , assuming that source is sorted in ascending order. Declaration public int First<T>(IEnumerable<T> source, T element, IComparer<T> comparer = null, int? fromIndex = null, int? toIndex = null) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> source The enumerable where to search for element . T element The element to search for. System.Collections.Generic.IComparer <T> comparer The comparer to be used when performing the search. If not specified, System.Collections.Generic.Comparer`1.Default is used. System.Nullable < System.Int32 > fromIndex The first index, marking the begin of the sub-sequence of source where to search. If not specified, 0 is used. System.Nullable < System.Int32 > toIndex The last index, marking the end of the sub-sequence of source where to search. If not specified, System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0}) is called on source to calculate the count of elements, and count - 1 is used. If source is a System.String , however, System.String.Length is used instead. Returns Type Description System.Int32 The first index of element in source . Type Parameters Name Description T The type of elements of source . Must be comparable. If it is System.String , random access is done in O(1) via System.String.Chars(System.Int32) . Otherwise, random access is done via the generic LINQ method System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Index) , which is O(n) or O(1) dependending on the System.Collections.Generic.IEnumerable<T> concretion. Remarks The algorithm split in half the search space at every iteration, reducing it exponentially to a single element or to an empty set. Time Complexity = O(log(n)), Space Complexity = O(1), where n = number of elements between fromIndex and toIndex . | Improve this Doc View Source Interval<T>(IEnumerable<T>, T, IComparer<T>, Nullable<Int32>, Nullable<Int32>) Find the indexes of the first and last elements in the sub-sequence of elements of source from fromIndex to toIndex included, which is equal to element , assuming that source is sorted in ascending order. Declaration public (int first, int last) Interval<T>(IEnumerable<T> source, T element, IComparer<T> comparer = null, int? fromIndex = null, int? toIndex = null) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> source The enumerable where to search for element . T element The element to search for. System.Collections.Generic.IComparer <T> comparer The comparer to be used when performing the search. If not specified, System.Collections.Generic.Comparer`1.Default is used. System.Nullable < System.Int32 > fromIndex The first index, marking the begin of the sub-sequence of source where to search. If not specified, 0 is used. System.Nullable < System.Int32 > toIndex The last index, marking the end of the sub-sequence of source where to search. If not specified, System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0}) is called on source to calculate the count of elements, and count - 1 is used. If source is a System.String , however, System.String.Length is used instead. Returns Type Description System.ValueTuple < System.Int32 , System.Int32 > The first and last index, marking the end of the sub-sequence of source where to search. Type Parameters Name Description T The type of elements of source . Must be comparable. If it is System.String , random access is done in O(1) via System.String.Chars(System.Int32) . Otherwise, random access is done via the generic LINQ method System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Index) , which is O(n) or O(1) dependending on the System.Collections.Generic.IEnumerable<T> concretion. Remarks The algorithm peforms two successive binary search operations: the first to find the lower extreme of the interval and the second to find the higher extreme of the interval. Each binary search runs in logarithmic time. Time Complexity = O(log(n)), Space Complexity = O(1), where n = number of elements between fromIndex and toIndex . | Improve this Doc View Source Last<T>(IEnumerable<T>, T, IComparer<T>, Nullable<Int32>, Nullable<Int32>) Find the index of the last element in the sub-sequence of elements of source from fromIndex to toIndex included, which is equal to element , assuming that source is sorted in ascending order. Declaration public int Last<T>(IEnumerable<T> source, T element, IComparer<T> comparer = null, int? fromIndex = null, int? toIndex = null) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> source The enumerable where to search for element . T element The element to search for. System.Collections.Generic.IComparer <T> comparer The comparer to be used when performing the search. If not specified, System.Collections.Generic.Comparer`1.Default is used. System.Nullable < System.Int32 > fromIndex The first index, marking the begin of the sub-sequence of source where to search. If not specified, 0 is used. System.Nullable < System.Int32 > toIndex The last index, marking the end of the sub-sequence of source where to search. If not specified, System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0}) is called on source to calculate the count of elements, and count - 1 is used. If source is a System.String , however, System.String.Length is used instead. Returns Type Description System.Int32 The first and last index, marking the end of the sub-sequence of source where to search. Type Parameters Name Description T The type of elements of source . Must be comparable. If it is System.String , random access is done in O(1) via System.String.Chars(System.Int32) . Otherwise, random access is done via the generic LINQ method System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Index) , which is O(n) or O(1) dependending on the System.Collections.Generic.IEnumerable<T> concretion. Remarks The algorithm split in half the search space at every iteration, reducing it exponentially to a single element or to an empty set. Time Complexity = O(log(n)), Space Complexity = O(1), where n = number of elements between fromIndex and toIndex . | Improve this Doc View Source Nth<T>(IEnumerable<T>, T, Int32, IComparer<T>, Nullable<Int32>, Nullable<Int32>) Find the index of the n-th occurence (0-based) of the element in the sub-sequence of elements of source from fromIndex to toIndex included, which is equal to element , assuming that source is sorted in ascending order. Declaration public int Nth<T>(IEnumerable<T> source, T element, int occurrenceRank, IComparer<T> comparer = null, int? fromIndex = null, int? toIndex = null) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> source T element System.Int32 occurrenceRank System.Collections.Generic.IComparer <T> comparer System.Nullable < System.Int32 > fromIndex System.Nullable < System.Int32 > toIndex Returns Type Description System.Int32 The n-th index, marking the end of the sub-sequence of source where to search. Type Parameters Name Description T The type of elements of source . Must be comparable. If it is System.String , random access is done in O(1) via System.String.Chars(System.Int32) . Otherwise, random access is done via the generic LINQ method System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Index) , which is O(n) or O(1) dependending on the System.Collections.Generic.IEnumerable<T> concretion. Remarks The algorithm first performs a binary search to find the index i of the 1st element. Then it checks whether the n-th occurrence of the element exists at index i + n, taking advantage of the fact that source is sorted. The first step takes logarithmic time, whereas the second step takes constant time and space to execute. Time Complexity = O(log(n)), Space Complexity = O(1), where n = number of elements between fromIndex and toIndex . Implements ISearch"
  },
  "api/MoreStructures.Lists.Searching.html": {
    "href": "api/MoreStructures.Lists.Searching.html",
    "title": "Namespace MoreStructures.Lists.Searching",
    "keywords": "Namespace MoreStructures.Lists.Searching Classes BinarySearch An object able to search in logarithmic time for elements in direct random access structures, such as lists and arrays, which are monodimensional, implement the System.Collections.Generic.IEnumerable<T> interface and are sorted in ascending order according to the provided comparer (which is the property enabling the search to be carried out in O(log(n)) time. LinearSearch An object able to search in linear time for elements in direct random access structures, such as lists and arrays, which are monodimensional and implement the interface. Interfaces ISearch An object able to search for elements in direct random access structures, such as lists and arrays, which are monodimensional and implement the System.Collections.Generic.IEnumerable<T> interface."
  },
  "api/MoreStructures.Lists.Searching.ISearch.html": {
    "href": "api/MoreStructures.Lists.Searching.ISearch.html",
    "title": "Interface ISearch",
    "keywords": "Interface ISearch An object able to search for elements in direct random access structures, such as lists and arrays, which are monodimensional and implement the System.Collections.Generic.IEnumerable<T> interface. Namespace : MoreStructures.Lists.Searching Assembly : MoreStructures.dll Syntax public interface ISearch Remarks In .NET, random access structures usually have an indexer defined, which takes as an index the address of the element in the data structure (usually an integer). Most random access structures (but not all) inherit System.Collections.Generic.IList<T> and define System.Collections.Generic.IList`1.Item(System.Int32) . A notable exception is System.String , which has an indexer ( System.String.Chars(System.Int32) ), but does not implement System.Collections.Generic.IList<T> . For System.String , specific optimizations are done, to ensure random access in O(1) time. Methods | Improve this Doc View Source First<T>(IEnumerable<T>, T, IComparer<T>, Nullable<Int32>, Nullable<Int32>) Find the index of the first element in the sub-sequence of elements of source from fromIndex to toIndex included, which is equal to element , assuming that source is sorted in ascending order. Declaration int First<T>(IEnumerable<T> source, T element, IComparer<T> comparer = null, int? fromIndex = null, int? toIndex = null) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> source The enumerable where to search for element . T element The element to search for. System.Collections.Generic.IComparer <T> comparer The comparer to be used when performing the search. If not specified, System.Collections.Generic.Comparer`1.Default is used. System.Nullable < System.Int32 > fromIndex The first index, marking the begin of the sub-sequence of source where to search. If not specified, 0 is used. System.Nullable < System.Int32 > toIndex The last index, marking the end of the sub-sequence of source where to search. If not specified, System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0}) is called on source to calculate the count of elements, and count - 1 is used. If source is a System.String , however, System.String.Length is used instead. Returns Type Description System.Int32 The first index of element in source . Type Parameters Name Description T The type of elements of source . Must be comparable. If it is System.String , random access is done in O(1) via System.String.Chars(System.Int32) . Otherwise, random access is done via the generic LINQ method System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Index) , which is O(n) or O(1) dependending on the System.Collections.Generic.IEnumerable<T> concretion. | Improve this Doc View Source Interval<T>(IEnumerable<T>, T, IComparer<T>, Nullable<Int32>, Nullable<Int32>) Find the indexes of the first and last elements in the sub-sequence of elements of source from fromIndex to toIndex included, which is equal to element , assuming that source is sorted in ascending order. Declaration (int first, int last) Interval<T>(IEnumerable<T> source, T element, IComparer<T> comparer = null, int? fromIndex = null, int? toIndex = null) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> source The enumerable where to search for element . T element The element to search for. System.Collections.Generic.IComparer <T> comparer The comparer to be used when performing the search. If not specified, System.Collections.Generic.Comparer`1.Default is used. System.Nullable < System.Int32 > fromIndex The first index, marking the begin of the sub-sequence of source where to search. If not specified, 0 is used. System.Nullable < System.Int32 > toIndex The last index, marking the end of the sub-sequence of source where to search. If not specified, System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0}) is called on source to calculate the count of elements, and count - 1 is used. If source is a System.String , however, System.String.Length is used instead. Returns Type Description System.ValueTuple < System.Int32 , System.Int32 > The first and last index, marking the end of the sub-sequence of source where to search. Type Parameters Name Description T The type of elements of source . Must be comparable. If it is System.String , random access is done in O(1) via System.String.Chars(System.Int32) . Otherwise, random access is done via the generic LINQ method System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Index) , which is O(n) or O(1) dependending on the System.Collections.Generic.IEnumerable<T> concretion. | Improve this Doc View Source Last<T>(IEnumerable<T>, T, IComparer<T>, Nullable<Int32>, Nullable<Int32>) Find the index of the last element in the sub-sequence of elements of source from fromIndex to toIndex included, which is equal to element , assuming that source is sorted in ascending order. Declaration int Last<T>(IEnumerable<T> source, T element, IComparer<T> comparer = null, int? fromIndex = null, int? toIndex = null) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> source The enumerable where to search for element . T element The element to search for. System.Collections.Generic.IComparer <T> comparer The comparer to be used when performing the search. If not specified, System.Collections.Generic.Comparer`1.Default is used. System.Nullable < System.Int32 > fromIndex The first index, marking the begin of the sub-sequence of source where to search. If not specified, 0 is used. System.Nullable < System.Int32 > toIndex The last index, marking the end of the sub-sequence of source where to search. If not specified, System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0}) is called on source to calculate the count of elements, and count - 1 is used. If source is a System.String , however, System.String.Length is used instead. Returns Type Description System.Int32 The first and last index, marking the end of the sub-sequence of source where to search. Type Parameters Name Description T The type of elements of source . Must be comparable. If it is System.String , random access is done in O(1) via System.String.Chars(System.Int32) . Otherwise, random access is done via the generic LINQ method System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Index) , which is O(n) or O(1) dependending on the System.Collections.Generic.IEnumerable<T> concretion. | Improve this Doc View Source Nth<T>(IEnumerable<T>, T, Int32, IComparer<T>, Nullable<Int32>, Nullable<Int32>) Find the index of the n-th occurence (0-based) of the element in the sub-sequence of elements of source from fromIndex to toIndex included, which is equal to element , assuming that source is sorted in ascending order. Declaration int Nth<T>(IEnumerable<T> source, T element, int occurrenceRank, IComparer<T> comparer = null, int? fromIndex = null, int? toIndex = null) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> source T element System.Int32 occurrenceRank System.Collections.Generic.IComparer <T> comparer System.Nullable < System.Int32 > fromIndex System.Nullable < System.Int32 > toIndex Returns Type Description System.Int32 The n-th index, marking the end of the sub-sequence of source where to search. Type Parameters Name Description T The type of elements of source . Must be comparable. If it is System.String , random access is done in O(1) via System.String.Chars(System.Int32) . Otherwise, random access is done via the generic LINQ method System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Index) , which is O(n) or O(1) dependending on the System.Collections.Generic.IEnumerable<T> concretion."
  },
  "api/MoreStructures.Lists.Searching.LinearSearch.html": {
    "href": "api/MoreStructures.Lists.Searching.LinearSearch.html",
    "title": "Class LinearSearch",
    "keywords": "Class LinearSearch An object able to search in linear time for elements in direct random access structures, such as lists and arrays, which are monodimensional and implement the interface. Inheritance System.Object LinearSearch Implements ISearch Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Lists.Searching Assembly : MoreStructures.dll Syntax public class LinearSearch : ISearch Remarks Unlike BinarySearch , this implementation doesn't make any assumption on the order of elements in in the data structure. Methods | Improve this Doc View Source First<T>(IEnumerable<T>, T, Nullable<IComparer<T>>, Nullable<Int32>, Nullable<Int32>) Declaration public int First<T>(IEnumerable<T> source, T element, IComparer<T>? comparer = null, int? fromIndex = null, int? toIndex = null) Parameters Type Name Description IEnumerable <T> source T element System.Nullable < IComparer <T>> comparer System.Nullable < System.Int32 > fromIndex System.Nullable < System.Int32 > toIndex Returns Type Description System.Int32 Type Parameters Name Description T Remarks The algorithm linearly scans the search space from fromIndex to toIndex , one index at every iteration, reducing it linearly to a single element or to an empty set. Time Complexity = O(n), Space Complexity = O(1), where n = number of elements between fromIndex and toIndex . | Improve this Doc View Source Interval<T>(IEnumerable<T>, T, Nullable<IComparer<T>>, Nullable<Int32>, Nullable<Int32>) Declaration public (int first, int last) Interval<T>(IEnumerable<T> source, T element, IComparer<T>? comparer = null, int? fromIndex = null, int? toIndex = null) Parameters Type Name Description IEnumerable <T> source T element System.Nullable < IComparer <T>> comparer System.Nullable < System.Int32 > fromIndex System.Nullable < System.Int32 > toIndex Returns Type Description System.ValueTuple < System.Int32 , System.Int32 > Type Parameters Name Description T Remarks The algorithm linearly scans the search space from fromIndex to toIndex , one index at every iteration. It just stores the smallest and the biggest index among the ones which correspond to elements equal to element . So it has constant, and not linear, space requirements. Time Complexity = O(n), Space Complexity = O(1), where n = number of elements between fromIndex and toIndex . | Improve this Doc View Source Last<T>(IEnumerable<T>, T, Nullable<IComparer<T>>, Nullable<Int32>, Nullable<Int32>) Declaration public int Last<T>(IEnumerable<T> source, T element, IComparer<T>? comparer = null, int? fromIndex = null, int? toIndex = null) Parameters Type Name Description IEnumerable <T> source T element System.Nullable < IComparer <T>> comparer System.Nullable < System.Int32 > fromIndex System.Nullable < System.Int32 > toIndex Returns Type Description System.Int32 Type Parameters Name Description T Remarks The algorithm linearly scans the search space from toIndex to fromIndex , one index at every iteration, reducing it linearly to a single element or to an empty set. Time Complexity = O(n), Space Complexity = O(1), where n = number of elements between fromIndex and toIndex . | Improve this Doc View Source Nth<T>(IEnumerable<T>, T, Int32, Nullable<IComparer<T>>, Nullable<Int32>, Nullable<Int32>) Declaration public int Nth<T>(IEnumerable<T> source, T element, int occurrenceRank, IComparer<T>? comparer = null, int? fromIndex = null, int? toIndex = null) Parameters Type Name Description IEnumerable <T> source T element System.Int32 occurrenceRank System.Nullable < IComparer <T>> comparer System.Nullable < System.Int32 > fromIndex System.Nullable < System.Int32 > toIndex Returns Type Description System.Int32 Type Parameters Name Description T Remarks The algorithm linearly scans the search space from toIndex to fromIndex , one index at every iteration, reducing it linearly to a single element or to an empty set. It just stores the current counter of occurrences of element in source , not all of them. So it has constant, and not linear, space requirements. Time Complexity = O(n), Space Complexity = O(1), where n = number of elements between fromIndex and toIndex . Implements ISearch"
  },
  "api/MoreStructures.RecImmTrees.Conversions.FullyIterativeStringifier-2.html": {
    "href": "api/MoreStructures.RecImmTrees.Conversions.FullyIterativeStringifier-2.html",
    "title": "Class FullyIterativeStringifier<TEdge, TNode>",
    "keywords": "Class FullyIterativeStringifier<TEdge, TNode> Iterative implementation. Inheritance System.Object StringifierBase <TEdge, TNode> FullyIterativeStringifier<TEdge, TNode> Implements IStringifier <TEdge, TNode> Inherited Members StringifierBase<TEdge, TNode>.NewLine StringifierBase<TEdge, TNode>.Indent StringifierBase<TEdge, TNode>.RootStringifier StringifierBase<TEdge, TNode>.EdgeAndNodeStringifier StringifierBase<TEdge, TNode>.Stringify(TNode) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.RecImmTrees.Conversions Assembly : MoreStructures.dll Syntax public class FullyIterativeStringifier<TEdge, TNode> : StringifierBase<TEdge, TNode>, IStringifier<TEdge, TNode> where TEdge : IRecImmDictIndexedTreeEdge<TEdge, TNode>, IComparable<TEdge> where TNode : IRecImmDictIndexedTreeNode<TEdge, TNode> Type Parameters Name Description TEdge The type of edges of the specific structure. TNode The type of nodes of the specific structure. Remarks Implemented fully iteratively via a , so not limited by call stack depth but rather by the maximum size of the stack stored in the heap. Convenient with deep trees (i.e. trees having a height > ~1K nodes). Constructors | Improve this Doc View Source FullyIterativeStringifier(Func<TNode, String>, Func<TEdge, TNode, String>) Declaration public FullyIterativeStringifier(Func<TNode, string> rootStringifier, Func<TEdge, TNode, string> edgeAndNodeStringifier) Parameters Type Name Description Func <TNode, System.String > rootStringifier Func <TEdge, TNode, System.String > edgeAndNodeStringifier Properties | Improve this Doc View Source PrependLevelAfterStopIndenting Whether the actual level should be prepended to the line, once the maximum level of indentation defined at StopIndentingLevel has been reached. Default is true . Declaration public bool PrependLevelAfterStopIndenting { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source StopIndentingLevel The maximum level at which indentation should not be done anymore. Default is System.Int32.MaxValue . Declaration public int StopIndentingLevel { get; set; } Property Value Type Description System.Int32 Remarks When trying to render a very deep structure to string, the resulting string can become extremely big due to indentation. This can easily happen with structures like SuffixTrieNode . Less with SuffixTreeNode , due to their coalescing of paths of nodes with single child. For example if the structure is a linear chain of n in depth, 4 chars of indentation per line would yield a string of 2n(n-1) chars = O(n^2). For n = 10000 nodes the produced string would be ~ 200M. To avoid that StopIndentingLevel can be set to a constant c, limiting the size of the resulting string by an upper bound of cn = O(n). For n = 10000 nodes and c = 10 levels the produced string would be 100K. Methods | Improve this Doc View Source Stringify(TNode) Converts the provided IRecImmDictIndexedTreeNode<TEdge, TNode> into a string. Declaration public override string Stringify(TNode node) Parameters Type Name Description TNode node The root of the tree to stringify. Returns Type Description System.String A string version of the provided structure. Overrides MoreStructures.RecImmTrees.Conversions.StringifierBase<TEdge, TNode>.Stringify(TNode) Implements IStringifier<TEdge, TNode>"
  },
  "api/MoreStructures.RecImmTrees.Conversions.FullyRecursiveStringifier-2.html": {
    "href": "api/MoreStructures.RecImmTrees.Conversions.FullyRecursiveStringifier-2.html",
    "title": "Class FullyRecursiveStringifier<TEdge, TNode>",
    "keywords": "Class FullyRecursiveStringifier<TEdge, TNode> Recursive implementation. The type of edges of the specific structure. The type of nodes of the specific structure. Inheritance System.Object StringifierBase <TEdge, TNode> FullyRecursiveStringifier<TEdge, TNode> Implements IStringifier <TEdge, TNode> Inherited Members StringifierBase<TEdge, TNode>.NewLine StringifierBase<TEdge, TNode>.Indent StringifierBase<TEdge, TNode>.RootStringifier StringifierBase<TEdge, TNode>.EdgeAndNodeStringifier StringifierBase<TEdge, TNode>.Stringify(TNode) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.RecImmTrees.Conversions Assembly : MoreStructures.dll Syntax public class FullyRecursiveStringifier<TEdge, TNode> : StringifierBase<TEdge, TNode>, IStringifier<TEdge, TNode> where TEdge : IRecImmDictIndexedTreeEdge<TEdge, TNode>, IComparable<TEdge> where TNode : IRecImmDictIndexedTreeNode<TEdge, TNode> Type Parameters Name Description TEdge TNode Remarks Implemented fully recursively, so limited by stack depth and usable with tree of a \"reasonable\" height. Constructors | Improve this Doc View Source FullyRecursiveStringifier(Func<TNode, String>, Func<TEdge, TNode, String>) Declaration public FullyRecursiveStringifier(Func<TNode, string> rootStringifier, Func<TEdge, TNode, string> edgeAndNodeStringifier) Parameters Type Name Description Func <TNode, System.String > rootStringifier Func <TEdge, TNode, System.String > edgeAndNodeStringifier Methods | Improve this Doc View Source Stringify(TNode) Converts the provided IRecImmDictIndexedTreeNode<TEdge, TNode> into a string. Declaration public override string Stringify(TNode node) Parameters Type Name Description TNode node The root of the tree to stringify. Returns Type Description System.String A string version of the provided structure. Overrides MoreStructures.RecImmTrees.Conversions.StringifierBase<TEdge, TNode>.Stringify(TNode) Implements IStringifier<TEdge, TNode>"
  },
  "api/MoreStructures.RecImmTrees.Conversions.html": {
    "href": "api/MoreStructures.RecImmTrees.Conversions.html",
    "title": "Namespace MoreStructures.RecImmTrees.Conversions",
    "keywords": "Namespace MoreStructures.RecImmTrees.Conversions Classes FullyIterativeStringifier<TEdge, TNode> Iterative implementation. FullyRecursiveStringifier<TEdge, TNode> Recursive implementation. The type of edges of the specific structure. The type of nodes of the specific structure. StringifierBase<TEdge, TNode> Provides concrete properties and defaults for new line, identation and stringifiers. Interfaces IStringifier<TEdge, TNode> A converter from IRecImmDictIndexedTreeNode<TEdge, TNode> structures to string."
  },
  "api/MoreStructures.RecImmTrees.Conversions.IStringifier-2.html": {
    "href": "api/MoreStructures.RecImmTrees.Conversions.IStringifier-2.html",
    "title": "Interface IStringifier<TEdge, TNode>",
    "keywords": "Interface IStringifier<TEdge, TNode> A converter from IRecImmDictIndexedTreeNode<TEdge, TNode> structures to string. Namespace : MoreStructures.RecImmTrees.Conversions Assembly : MoreStructures.dll Syntax public interface IStringifier<TEdge, TNode> where TEdge : IRecImmDictIndexedTreeEdge<TEdge, TNode>, IComparable<TEdge> where TNode : IRecImmDictIndexedTreeNode<TEdge, TNode> Type Parameters Name Description TEdge The type of edges of the specific structure. TNode The type of nodes of the specific structure. Remarks Requires TEdge to implement , so that output lines are sorted. Time Complexity = O(n) and Space Complexity = O(n) where n = number of nodes in the TNode structure. Each node and its incoming edge is visited once. Examples var stringifier = ... { NewLine = Environment.NewLine, Indent = '\\t', RootStringifier = n => \"R\", EdgeAndNodeStringifier = (e, n) => $\"{e} -> {n}\", }; var node = ... Console.WriteLine(stringifier.Stringify(node)); Properties | Improve this Doc View Source EdgeAndNodeStringifier A function mapping the provided edge and node to a string. Used for all lines of the output but the first. Declaration Func<TEdge, TNode, string> EdgeAndNodeStringifier { get; set; } Property Value Type Description Func <TEdge, TNode, System.String > | Improve this Doc View Source Indent The character or string used to indent output, to visually express tree levels. Declaration string Indent { get; set; } Property Value Type Description System.String Examples 2 or 4 spaces, a tab, ... | Improve this Doc View Source NewLine The character or string used to separate lines of the output. Declaration string NewLine { get; set; } Property Value Type Description System.String | Improve this Doc View Source RootStringifier A function mapping the top-level node to a string. Used for the first line of the output. Declaration Func<TNode, string> RootStringifier { get; set; } Property Value Type Description Func <TNode, System.String > Methods | Improve this Doc View Source Stringify(TNode) Converts the provided IRecImmDictIndexedTreeNode<TEdge, TNode> into a string. Declaration string Stringify(TNode node) Parameters Type Name Description TNode node The root of the tree to stringify. Returns Type Description System.String A string version of the provided structure. Examples Using 4 spaces as indent, RootStringifier = n => \"R\", an EdgeAndNodeStringifier = (e, n) => $\"{e} -> N\": R e1 -> N e3 -> N e4 -> N e5 -> N e2 -> N e6 -> N"
  },
  "api/MoreStructures.RecImmTrees.Conversions.StringifierBase-2.html": {
    "href": "api/MoreStructures.RecImmTrees.Conversions.StringifierBase-2.html",
    "title": "Class StringifierBase<TEdge, TNode>",
    "keywords": "Class StringifierBase<TEdge, TNode> Provides concrete properties and defaults for new line, identation and stringifiers. Inheritance System.Object StringifierBase<TEdge, TNode> FullyIterativeStringifier<TEdge, TNode> FullyRecursiveStringifier<TEdge, TNode> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.RecImmTrees.Conversions Assembly : MoreStructures.dll Syntax public abstract class StringifierBase<TEdge, TNode> Type Parameters Name Description TEdge The type of edges of the specific structure. TNode The type of nodes of the specific structure. Constructors | Improve this Doc View Source StringifierBase(Func<TNode, String>, Func<TEdge, TNode, String>) Builds an instance of an IStringifier<TEdge, TNode> with the provided stringifiers, for the root and for all other nodes in the three, and with default new line and indent. Declaration protected StringifierBase(Func<TNode, string> rootStringifier, Func<TEdge, TNode, string> edgeAndNodeStringifier) Parameters Type Name Description Func <TNode, System.String > rootStringifier Func <TEdge, TNode, System.String > edgeAndNodeStringifier Properties | Improve this Doc View Source EdgeAndNodeStringifier A function mapping the provided edge and node to a string. Used for all lines of the output but the first. Declaration public Func<TEdge, TNode, string> EdgeAndNodeStringifier { get; set; } Property Value Type Description Func <TEdge, TNode, System.String > | Improve this Doc View Source Indent By default is 4 spaces. Declaration public string Indent { get; set; } Property Value Type Description System.String | Improve this Doc View Source NewLine By default is . Declaration public string NewLine { get; set; } Property Value Type Description System.String | Improve this Doc View Source RootStringifier A function mapping the top-level node to a string. Used for the first line of the output. Declaration public Func<TNode, string> RootStringifier { get; set; } Property Value Type Description Func <TNode, System.String > Methods | Improve this Doc View Source Stringify(TNode) Converts the provided IRecImmDictIndexedTreeNode<TEdge, TNode> into a string. Declaration public abstract string Stringify(TNode node) Parameters Type Name Description TNode node The root of the tree to stringify. Returns Type Description System.String A string version of the provided structure."
  },
  "api/MoreStructures.RecImmTrees.html": {
    "href": "api/MoreStructures.RecImmTrees.html",
    "title": "Namespace MoreStructures.RecImmTrees",
    "keywords": "Namespace MoreStructures.RecImmTrees Classes RecImmDictIndexedTreeNodeExtensions Extension methods for all IRecImmDictIndexedTreeNode<TEdge, TNode> node concretions. TreePath<TEdge, TNode> An immutable sequence of TNode , where each node is child of its predecessor and parent of its successor and where node relationships are stored in TEdge instances. TreePathExtensions Extension methods for TreePath<TEdge, TNode> . Interfaces IRecImmDictIndexedTreeEdge<TEdge, TNode> An edge of a IRecImmDictIndexedTreeNode<TEdge, TNode> , directionally linking two nodes and forming a path hop. IRecImmDictIndexedTreeNode<TEdge, TNode> The node of a generic Tree Structure recursively defined and whose nodes are indexed in an immutable dictionary of edges. Has no specific use case in mind and can be a root node, an intermediate node or a leaf node."
  },
  "api/MoreStructures.RecImmTrees.IRecImmDictIndexedTreeEdge-2.html": {
    "href": "api/MoreStructures.RecImmTrees.IRecImmDictIndexedTreeEdge-2.html",
    "title": "Interface IRecImmDictIndexedTreeEdge<TEdge, TNode>",
    "keywords": "Interface IRecImmDictIndexedTreeEdge<TEdge, TNode> An edge of a IRecImmDictIndexedTreeNode<TEdge, TNode> , directionally linking two nodes and forming a path hop. Namespace : MoreStructures.RecImmTrees Assembly : MoreStructures.dll Syntax public interface IRecImmDictIndexedTreeEdge<TEdge, TNode> where TEdge : IRecImmDictIndexedTreeEdge<TEdge, TNode> where TNode : IRecImmDictIndexedTreeNode<TEdge, TNode> Type Parameters Name Description TEdge The type of edges of the specific structure. TNode The type of nodes of the specific structure."
  },
  "api/MoreStructures.RecImmTrees.IRecImmDictIndexedTreeNode-2.html": {
    "href": "api/MoreStructures.RecImmTrees.IRecImmDictIndexedTreeNode-2.html",
    "title": "Interface IRecImmDictIndexedTreeNode<TEdge, TNode>",
    "keywords": "Interface IRecImmDictIndexedTreeNode<TEdge, TNode> The node of a generic Tree Structure recursively defined and whose nodes are indexed in an immutable dictionary of edges. Has no specific use case in mind and can be a root node, an intermediate node or a leaf node. Namespace : MoreStructures.RecImmTrees Assembly : MoreStructures.dll Syntax public interface IRecImmDictIndexedTreeNode<TEdge, TNode> where TEdge : IRecImmDictIndexedTreeEdge<TEdge, TNode> where TNode : IRecImmDictIndexedTreeNode<TEdge, TNode> Type Parameters Name Description TEdge The type of edges of the specific structure. TNode The type of nodes of the specific structure. Properties | Improve this Doc View Source Children A readonly view of the children private collection of this node. Empty for leaves. Declaration IDictionary<TEdge, TNode> Children { get; } Property Value Type Description IDictionary <TEdge, TNode> Extension Methods RecImmDictIndexedTreeNodeExtensions.IsLeaf<TEdge, TNode>(IRecImmDictIndexedTreeNode<TEdge, TNode>) RecImmDictIndexedTreeNodeExtensions.GetAllNodeToLeafPaths<TEdge, TNode>(IRecImmDictIndexedTreeNode<TEdge, TNode>)"
  },
  "api/MoreStructures.RecImmTrees.RecImmDictIndexedTreeNodeExtensions.html": {
    "href": "api/MoreStructures.RecImmTrees.RecImmDictIndexedTreeNodeExtensions.html",
    "title": "Class RecImmDictIndexedTreeNodeExtensions",
    "keywords": "Class RecImmDictIndexedTreeNodeExtensions Extension methods for all IRecImmDictIndexedTreeNode<TEdge, TNode> node concretions. Inheritance System.Object RecImmDictIndexedTreeNodeExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.RecImmTrees Assembly : MoreStructures.dll Syntax public static class RecImmDictIndexedTreeNodeExtensions Methods | Improve this Doc View Source GetAllNodeToLeafPaths<TEdge, TNode>(IRecImmDictIndexedTreeNode<TEdge, TNode>) Returns all paths from the provided node to a leaf. Declaration public static IEnumerable<TreePath<TEdge, TNode>> GetAllNodeToLeafPaths<TEdge, TNode>(this IRecImmDictIndexedTreeNode<TEdge, TNode> node) where TEdge : IRecImmDictIndexedTreeEdge<TEdge, TNode> where TNode : IRecImmDictIndexedTreeNode<TEdge, TNode> Parameters Type Name Description IRecImmDictIndexedTreeNode <TEdge, TNode> node The node, to start the structure traversal from. Returns Type Description IEnumerable < TreePath <TEdge, TNode>> A sequence of pairs of node and its incoming edge. Type Parameters Name Description TEdge TNode | Improve this Doc View Source IsLeaf<TEdge, TNode>(IRecImmDictIndexedTreeNode<TEdge, TNode>) Whether the provided node is a leaf (i.e. has no children), or not. Declaration public static bool IsLeaf<TEdge, TNode>(this IRecImmDictIndexedTreeNode<TEdge, TNode> node) where TEdge : IRecImmDictIndexedTreeEdge<TEdge, TNode> where TNode : IRecImmDictIndexedTreeNode<TEdge, TNode> Parameters Type Name Description IRecImmDictIndexedTreeNode <TEdge, TNode> node The node whose children have to be checked. Returns Type Description System.Boolean Type Parameters Name Description TEdge TNode"
  },
  "api/MoreStructures.RecImmTrees.TreePath-2.html": {
    "href": "api/MoreStructures.RecImmTrees.TreePath-2.html",
    "title": "Class TreePath<TEdge, TNode>",
    "keywords": "Class TreePath<TEdge, TNode> An immutable sequence of TNode , where each node is child of its predecessor and parent of its successor and where node relationships are stored in TEdge instances. Inheritance System.Object TreePath<TEdge, TNode> Implements System.IEquatable < TreePath <TEdge, TNode>> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.RecImmTrees Assembly : MoreStructures.dll Syntax public class TreePath<TEdge, TNode> : IEquatable<TreePath<TEdge, TNode>> Type Parameters Name Description TEdge The type of edges of the specific structure. TNode The type of nodes of the specific structure. Remarks Immutability is guaranteed by using ValueReadOnlyDictionary<TKey, TValue> . Constructors | Improve this Doc View Source TreePath() Builds an empty path, i.e. an empty sequence of nodes. Declaration public TreePath() | Improve this Doc View Source TreePath(TEdge, TNode) Builds a path composed of a single node with its incoming edge. Declaration public TreePath(TEdge edge, TNode node) Parameters Type Name Description TEdge edge The edge leading to the node. TNode node The node defining the singleton path. | Improve this Doc View Source TreePath(IEnumerable<KeyValuePair<TEdge, TNode>>) An immutable sequence of TNode , where each node is child of its predecessor and parent of its successor and where node relationships are stored in TEdge instances. Declaration public TreePath(IEnumerable<KeyValuePair<TEdge, TNode>> PathNodes) Parameters Type Name Description IEnumerable < KeyValuePair <TEdge, TNode>> PathNodes The sequence of nodes respecting the parent-child relationship. Remarks Immutability is guaranteed by using ValueReadOnlyDictionary<TKey, TValue> . | Improve this Doc View Source TreePath((TEdge edge, TNode node)[]) Builds a path composed of the provided couples of edges and nodes. Declaration public TreePath(params (TEdge edge, TNode node)[] pathNodes) Parameters Type Name Description System.ValueTuple <TEdge, TNode>[] pathNodes An array of couples (edge, node). Properties | Improve this Doc View Source PathNodes A readonly view of the private collection of path TNode instances. Declaration public IEnumerable<KeyValuePair<TEdge, TNode>> PathNodes { get; } Property Value Type Description IEnumerable < KeyValuePair <TEdge, TNode>> Implements System.IEquatable<T>"
  },
  "api/MoreStructures.RecImmTrees.TreePathExtensions.html": {
    "href": "api/MoreStructures.RecImmTrees.TreePathExtensions.html",
    "title": "Class TreePathExtensions",
    "keywords": "Class TreePathExtensions Extension methods for TreePath<TEdge, TNode> . Inheritance System.Object TreePathExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.RecImmTrees Assembly : MoreStructures.dll Syntax public static class TreePathExtensions Methods | Improve this Doc View Source Append<TEdge, TNode>(TreePath<TEdge, TNode>, TEdge, TNode) Append the provided node with its incoming edge to the provided path, bulding a new path. Declaration public static TreePath<TEdge, TNode> Append<TEdge, TNode>(this TreePath<TEdge, TNode> path, TEdge edge, TNode node) where TEdge : IRecImmDictIndexedTreeEdge<TEdge, TNode> where TNode : IRecImmDictIndexedTreeNode<TEdge, TNode> Parameters Type Name Description TreePath <TEdge, TNode> path The path, to appended the node and the edge to. TEdge edge The edge, pointing to the node to be appended. TNode node The node to be appended. Returns Type Description TreePath <TEdge, TNode> A new path, whose nodes are the concatenation of the nodes of the provided path and the one appended. Type Parameters Name Description TEdge TNode | Improve this Doc View Source Concat<TEdge, TNode>(TreePath<TEdge, TNode>, TreePath<TEdge, TNode>) Builds a new path of nodes, appending the nodes of the second path to the first path. Declaration public static TreePath<TEdge, TNode> Concat<TEdge, TNode>(this TreePath<TEdge, TNode> first, TreePath<TEdge, TNode> second) where TEdge : IRecImmDictIndexedTreeEdge<TEdge, TNode> where TNode : IRecImmDictIndexedTreeNode<TEdge, TNode> Parameters Type Name Description TreePath <TEdge, TNode> first The path, to append nodes to. TreePath <TEdge, TNode> second The path, whose nodes have to be appended. Returns Type Description TreePath <TEdge, TNode> A new path, whose nodes are the concatenation of the nodes of the two paths. Type Parameters Name Description TEdge TNode"
  },
  "api/MoreStructures.RotatedTextWithTerminator.html": {
    "href": "api/MoreStructures.RotatedTextWithTerminator.html",
    "title": "Class RotatedTextWithTerminator",
    "keywords": "Class RotatedTextWithTerminator A text string with a terminator character which has been rotated leftwards or rightwards, of a number of positions (0 included). Inheritance System.Object RotatedTextWithTerminator Implements IValueEnumerable < System.Char > IEnumerable < System.Char > System.IEquatable < RotatedTextWithTerminator > Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures Assembly : MoreStructures.dll Syntax public class RotatedTextWithTerminator : IValueEnumerable<char>, IEquatable<RotatedTextWithTerminator> Remarks A terminator-terminated rotated text is required by Burrows-Wheeler Transform operations, such as inversion. This object provides type safety, as it allows to tell apart rotated terminator-terminated strings from generic ones. Consistently using RotatedTextWithTerminator , rather than System.String , in all library functionalities ensures that the invariant of a rotated terminator-terminated string is always respected. Most string-related functionalities provided by RotatedTextWithTerminator , such as Length and Item[Index] , as well as and System.Collections.IEnumerable support, are delegated to the underlying string. Constructors | Improve this Doc View Source RotatedTextWithTerminator(IEnumerable<Char>, Char, Boolean) A text string with a terminator character which has been rotated leftwards or rightwards, of a number of positions (0 included). Declaration public RotatedTextWithTerminator(IEnumerable<char> RotatedText, char Terminator = '$', bool ValidateInput = true) Parameters Type Name Description System.Collections.IEnumerable < System.Char > RotatedText The text, defined ad an of chars and containing the terminator character once, in any position of the text. System.Char Terminator A terminator character, present in the text at most once. If not specified DefaultTerminator is used. System.Boolean ValidateInput Whether the input, and in particular RotatedText should be validated, while this object is created. Validation takes O(n) time, where n = number of chars in RotatedText and can be an heavy operation. Remarks A terminator-terminated rotated text is required by Burrows-Wheeler Transform operations, such as inversion. This object provides type safety, as it allows to tell apart rotated terminator-terminated strings from generic ones. Consistently using RotatedTextWithTerminator , rather than System.String , in all library functionalities ensures that the invariant of a rotated terminator-terminated string is always respected. Most string-related functionalities provided by RotatedTextWithTerminator , such as Length and Item[Index] , as well as and System.Collections.IEnumerable support, are delegated to the underlying string. Properties | Improve this Doc View Source Item[Index] Select a part of RotatedText by the provided index (either w.r.t. the start or to the end of the text). Declaration public char this[Index index] { get; } Parameters Type Name Description Index index The index applied to the underlying string. Property Value Type Description System.Char A char containing the selected part. | Improve this Doc View Source Item[TextWithTerminator.ISelector] Select a part of RotatedText by the provided selector. Declaration public string this[TextWithTerminator.ISelector selector] { get; } Parameters Type Name Description TextWithTerminator.ISelector selector Any selector acting on a RotatedTextWithTerminator . Property Value Type Description System.String A string containing the selected part. | Improve this Doc View Source Item[Range] Select a part of RotatedText by the provided range (start index included, end index excluded). Declaration public IEnumerable<char> this[Range range] { get; } Parameters Type Name Description Range range The range applied to the underlying string. Property Value Type Description System.Collections.IEnumerable < System.Char > An of chars containing the selected part. | Improve this Doc View Source Length The total length of RotatedText , including the terminator. Declaration public int Length { get; } Property Value Type Description System.Int32 Remarks After the first call, the value is cached for all subsequent calls. | Improve this Doc View Source RotatedText Declaration public IEnumerable<char> RotatedText { get; set; } Property Value Type Description System.Collections.IEnumerable < System.Char > Remarks Wrapped into a IValueEnumerable<T> to preserve value equality. | Improve this Doc View Source Terminator Declaration public char Terminator { get; set; } Property Value Type Description System.Char | Improve this Doc View Source ValidateInput Declaration public bool ValidateInput { get; set; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source EndsWith(String) Whether this text ends with suffix . Declaration public bool EndsWith(string suffix) Parameters Type Name Description System.String suffix A terminator-included string. Returns Type Description System.Boolean True if RotatedText ends by suffix . | Improve this Doc View Source GetEnumerator() Returns an enumerator that iterates through the collection of chars of the underlying RotatedText string, including the Terminator char. Declaration public IEnumerator<char> GetEnumerator() Returns Type Description System.Collections.IEnumerator < System.Char > | Improve this Doc View Source StartsWith(String) Whether this text starts with prefix . Declaration public bool StartsWith(string prefix) Parameters Type Name Description System.String prefix A terminator-included string. Returns Type Description System.Boolean True if RotatedText starts by prefix . Explicit Interface Implementations | Improve this Doc View Source IEnumerable.GetEnumerator() Returns an enumerator that iterates through the collection of chars of the underlying RotatedText string, including the Terminator char. Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator Implements IValueEnumerable<T> IEnumerable<> System.IEquatable<T>"
  },
  "api/MoreStructures.SuffixStructures.AdjacencyOrders.html": {
    "href": "api/MoreStructures.SuffixStructures.AdjacencyOrders.html",
    "title": "Enum AdjacencyOrders",
    "keywords": "Enum AdjacencyOrders The possible adjacency order relationships between two edges by the parts they refer to in the text. Namespace : MoreStructures.SuffixStructures Assembly : MoreStructures.dll Syntax public enum AdjacencyOrders Fields Name Description After Adjacent in a specific order: the first comes after the second. Before Adjacent in a specific order: the first comes before the second. BeforeOrAfter Adjacent in any order. None Non-adjacent (overlapping on more than an extreme or not at all)."
  },
  "api/MoreStructures.SuffixStructures.Builders.BuilderExtensions.html": {
    "href": "api/MoreStructures.SuffixStructures.Builders.BuilderExtensions.html",
    "title": "Class BuilderExtensions",
    "keywords": "Class BuilderExtensions Extension methods for all IBuilder<TEdge, TNode> concretions. Inheritance System.Object BuilderExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.SuffixStructures.Builders Assembly : MoreStructures.dll Syntax public static class BuilderExtensions Methods | Improve this Doc View Source BuildTree<TEdge, TNode>(IBuilder<TEdge, TNode>, String) Text is provided as a plain string. Declaration public static TNode BuildTree<TEdge, TNode>(this IBuilder<TEdge, TNode> builder, string text) where TEdge : ISuffixStructureEdge<TEdge, TNode> where TNode : ISuffixStructureNode<TEdge, TNode> Parameters Type Name Description IBuilder <TEdge, TNode> builder The builder to be used, to build the structure. System.String text The text to build the structure of, without any terminator (automatically added). Returns Type Description TNode Type Parameters Name Description TEdge TNode"
  },
  "api/MoreStructures.SuffixStructures.Builders.html": {
    "href": "api/MoreStructures.SuffixStructures.Builders.html",
    "title": "Namespace MoreStructures.SuffixStructures.Builders",
    "keywords": "Namespace MoreStructures.SuffixStructures.Builders Classes BuilderExtensions Extension methods for all IBuilder<TEdge, TNode> concretions. Interfaces IBuilder<TEdge, TNode> Builds objects, such as edges and nodes, for the ISuffixStructureNode<TEdge, TNode> concretion it is the builder of."
  },
  "api/MoreStructures.SuffixStructures.Builders.IBuilder-2.html": {
    "href": "api/MoreStructures.SuffixStructures.Builders.IBuilder-2.html",
    "title": "Interface IBuilder<TEdge, TNode>",
    "keywords": "Interface IBuilder<TEdge, TNode> Builds objects, such as edges and nodes, for the ISuffixStructureNode<TEdge, TNode> concretion it is the builder of. Namespace : MoreStructures.SuffixStructures.Builders Assembly : MoreStructures.dll Syntax public interface IBuilder<TEdge, TNode> where TEdge : ISuffixStructureEdge<TEdge, TNode> where TNode : ISuffixStructureNode<TEdge, TNode> Type Parameters Name Description TEdge TNode Remarks This interface allows to have a shared construction interface for objects among all structures. It is a workaround to the limitation of not having constructor signatures in interfaces. See https://codeblog.jonskeet.uk/2008/08/29/lessons-learned-from-protocol-buffers-part-4-static-interfaces/ Methods | Improve this Doc View Source BuildTree(TextWithTerminator) Build a ISuffixStructureEdge<TEdge, TNode> of the provided text, which is a n-ary search tree in which edges coming out of a node are substrings of text which identify edges shared by all paths to leaves, starting from the node. Declaration TNode BuildTree(TextWithTerminator text) Parameters Type Name Description TextWithTerminator text The text to build the Suffix Structure of, with its terminator (required for traversal). Returns Type Description TNode The root node of the Suffix Structure. Remarks Substrings of text are identified by their start position in text and their length. Extension Methods BuilderExtensions.BuildTree<TEdge, TNode>(IBuilder<TEdge, TNode>, String)"
  },
  "api/MoreStructures.SuffixStructures.Conversions.FullyIterativeConverter.html": {
    "href": "api/MoreStructures.SuffixStructures.Conversions.FullyIterativeConverter.html",
    "title": "Class FullyIterativeConverter",
    "keywords": "Class FullyIterativeConverter Inheritance System.Object FullyIterativeConverter Implements IConverter Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.SuffixStructures.Conversions Assembly : MoreStructures.dll Syntax public class FullyIterativeConverter : IConverter Remarks Conversion is iteratively both for branching and no-branching paths (i.e. on nodes having a single child) of the input SuffixTrieNode , with occasional mutation of internal state of the conversion and the use of a stack to store nodes to process. Not limited by call stack depth. Convenient with deep trees (i.e. trees having a height > ~1K nodes). Methods | Improve this Doc View Source TreeToTrie(SuffixTreeNode) Declaration public SuffixTrieNode TreeToTrie(SuffixTreeNode treeNode) Parameters Type Name Description SuffixTreeNode treeNode Returns Type Description SuffixTrieNode Remarks | Improve this Doc View Source TrieToTree(SuffixTrieNode) Declaration public SuffixTreeNode TrieToTree(SuffixTrieNode trieNode) Parameters Type Name Description SuffixTrieNode trieNode Returns Type Description SuffixTreeNode Remarks Implements IConverter"
  },
  "api/MoreStructures.SuffixStructures.Conversions.FullyRecursiveConverter.html": {
    "href": "api/MoreStructures.SuffixStructures.Conversions.FullyRecursiveConverter.html",
    "title": "Class FullyRecursiveConverter",
    "keywords": "Class FullyRecursiveConverter Inheritance System.Object FullyRecursiveConverter Implements IConverter Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.SuffixStructures.Conversions Assembly : MoreStructures.dll Syntax public class FullyRecursiveConverter : IConverter Remarks Implemented fully recursively, with one level of recursion per level of the input SuffixTrieNode . Limited by call stack depth and usable with input trees of a \"reasonable\" height (i.e. trees having a height < ~1K nodes). Methods | Improve this Doc View Source TreeToTrie(SuffixTreeNode) Declaration public SuffixTrieNode TreeToTrie(SuffixTreeNode treeNode) Parameters Type Name Description SuffixTreeNode treeNode Returns Type Description SuffixTrieNode Remarks | Improve this Doc View Source TrieToTree(SuffixTrieNode) Declaration public SuffixTreeNode TrieToTree(SuffixTrieNode trieNode) Parameters Type Name Description SuffixTrieNode trieNode Returns Type Description SuffixTreeNode Remarks Implements IConverter"
  },
  "api/MoreStructures.SuffixStructures.Conversions.html": {
    "href": "api/MoreStructures.SuffixStructures.Conversions.html",
    "title": "Namespace MoreStructures.SuffixStructures.Conversions",
    "keywords": "Namespace MoreStructures.SuffixStructures.Conversions Classes FullyIterativeConverter FullyRecursiveConverter PartiallyIterativeConverter Interfaces IConverter A converter between different ISuffixStructureNode<TEdge, TNode> structures, such as SuffixTrieNode and SuffixTreeNode ."
  },
  "api/MoreStructures.SuffixStructures.Conversions.IConverter.html": {
    "href": "api/MoreStructures.SuffixStructures.Conversions.IConverter.html",
    "title": "Interface IConverter",
    "keywords": "Interface IConverter A converter between different ISuffixStructureNode<TEdge, TNode> structures, such as SuffixTrieNode and SuffixTreeNode . Namespace : MoreStructures.SuffixStructures.Conversions Assembly : MoreStructures.dll Syntax public interface IConverter Methods | Improve this Doc View Source TreeToTrie(SuffixTreeNode) Converts the provided SuffixTreeNode instance into an equivalent instance of SuffixTrieNode , building its entire structure. Declaration SuffixTrieNode TreeToTrie(SuffixTreeNode treeNode) Parameters Type Name Description SuffixTreeNode treeNode The node identifying the trie structure to be converted. Returns Type Description SuffixTrieNode A trie, equivalent to the provided tree. Remarks Time Complexity = O(n^2) and Space Complexity = O(n^2) where n = number of nodes in the input structure. Each node of the input tree is visited at most twice, but expansion increase the number of nodes, in the worst case to the number of characters in all suffixes of the text which has generated the tree. | Improve this Doc View Source TrieToTree(SuffixTrieNode) Converts the provided SuffixTrieNode instance into an equivalent instance of SuffixTreeNode , building its entire structure. Declaration SuffixTreeNode TrieToTree(SuffixTrieNode trieNode) Parameters Type Name Description SuffixTrieNode trieNode The node identifying the trie structure to be converted. Returns Type Description SuffixTreeNode A tree, equivalent to the provided trie. Remarks Time Complexity = O(n) and Space Complexity = O(n) where n = number of nodes in the input structure. Each node of the input trie is visited at most twice and coalescing reduces the number of nodes."
  },
  "api/MoreStructures.SuffixStructures.Conversions.PartiallyIterativeConverter.html": {
    "href": "api/MoreStructures.SuffixStructures.Conversions.PartiallyIterativeConverter.html",
    "title": "Class PartiallyIterativeConverter",
    "keywords": "Class PartiallyIterativeConverter Inheritance System.Object PartiallyIterativeConverter Implements IConverter Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.SuffixStructures.Conversions Assembly : MoreStructures.dll Syntax public class PartiallyIterativeConverter : IConverter Remarks Conversion is iteratively for no-branching paths (i.e. on nodes having a single child) and recursively on branching of the input SuffixTrieNode , with occasional mutation of internal state of the conversion. Limited by stack depth (but less than FullyRecursiveConverter ) and usable with output trees of a \"reasonable\" height (i.e. trees having a height < ~1K nodes). Methods | Improve this Doc View Source TreeToTrie(SuffixTreeNode) Declaration public SuffixTrieNode TreeToTrie(SuffixTreeNode treeNode) Parameters Type Name Description SuffixTreeNode treeNode Returns Type Description SuffixTrieNode Remarks | Improve this Doc View Source TrieToTree(SuffixTrieNode) Declaration public SuffixTreeNode TrieToTree(SuffixTrieNode trieNode) Parameters Type Name Description SuffixTrieNode trieNode Returns Type Description SuffixTreeNode Remarks Implements IConverter"
  },
  "api/MoreStructures.SuffixStructures.html": {
    "href": "api/MoreStructures.SuffixStructures.html",
    "title": "Namespace MoreStructures.SuffixStructures",
    "keywords": "Namespace MoreStructures.SuffixStructures Classes SuffixStructureEdgeExtensions Extension methods for all ISuffixStructureEdge<TEdge, TNode> edge concretions. SuffixStructureNodeExtensions Extension methods for all ISuffixStructureNode<TEdge, TNode> node concretions. SuffixStructureTreePathExtensions Extension methods for all TreePath<TEdge, TNode> used in ISuffixStructureNode<TEdge, TNode> structures. Interfaces ISuffixStructureEdge<TEdge, TNode> An edge of a ISuffixStructureEdge<TEdge, TNode> , directionally linking two nodes and forming a path hop. Represents prefix matching. ISuffixStructureNode<TEdge, TNode> The node of a Suffix Structure, linked by edges and forming paths. Represents pattern matching state. Enums AdjacencyOrders The possible adjacency order relationships between two edges by the parts they refer to in the text."
  },
  "api/MoreStructures.SuffixStructures.ISuffixStructureEdge-2.html": {
    "href": "api/MoreStructures.SuffixStructures.ISuffixStructureEdge-2.html",
    "title": "Interface ISuffixStructureEdge<TEdge, TNode>",
    "keywords": "Interface ISuffixStructureEdge<TEdge, TNode> An edge of a ISuffixStructureEdge<TEdge, TNode> , directionally linking two nodes and forming a path hop. Represents prefix matching. Inherited Members TextWithTerminator.ISelector.Of(TextWithTerminator) TextWithTerminator.ISelector.OfRotated(RotatedTextWithTerminator) Namespace : MoreStructures.SuffixStructures Assembly : MoreStructures.dll Syntax public interface ISuffixStructureEdge<TEdge, TNode> : TextWithTerminator.ISelector, IRecImmDictIndexedTreeEdge<TEdge, TNode> where TEdge : ISuffixStructureEdge<TEdge, TNode> where TNode : ISuffixStructureNode<TEdge, TNode> Type Parameters Name Description TEdge TNode Properties | Improve this Doc View Source Length The length of the edge string. Declaration int Length { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Start The index of the first character of the edge string in the text. Declaration int Start { get; } Property Value Type Description System.Int32 Extension Methods SuffixStructureEdgeExtensions.IsAdjacentTo<TEdge, TNode>(ISuffixStructureEdge<TEdge, TNode>, TEdge, AdjacencyOrders)"
  },
  "api/MoreStructures.SuffixStructures.ISuffixStructureNode-2.html": {
    "href": "api/MoreStructures.SuffixStructures.ISuffixStructureNode-2.html",
    "title": "Interface ISuffixStructureNode<TEdge, TNode>",
    "keywords": "Interface ISuffixStructureNode<TEdge, TNode> The node of a Suffix Structure, linked by edges and forming paths. Represents pattern matching state. Inherited Members IRecImmDictIndexedTreeNode<TEdge, TNode>.Children Namespace : MoreStructures.SuffixStructures Assembly : MoreStructures.dll Syntax public interface ISuffixStructureNode<TEdge, TNode> : IRecImmDictIndexedTreeNode<TEdge, TNode> where TEdge : ISuffixStructureEdge<TEdge, TNode> where TNode : ISuffixStructureNode<TEdge, TNode> Type Parameters Name Description TEdge TNode Properties | Improve this Doc View Source Start The index of the character, the path from the root leading to this leaf starts with. Non-null for leaves only. Declaration int? Start { get; } Property Value Type Description System.Nullable < System.Int32 > Extension Methods RecImmDictIndexedTreeNodeExtensions.IsLeaf<TEdge, TNode>(IRecImmDictIndexedTreeNode<TEdge, TNode>) RecImmDictIndexedTreeNodeExtensions.GetAllNodeToLeafPaths<TEdge, TNode>(IRecImmDictIndexedTreeNode<TEdge, TNode>) SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(ISuffixStructureNode<TEdge, TNode>, TextWithTerminator) Matcher.Match<TEdge, TNode>(ISuffixStructureNode<TEdge, TNode>, TextWithTerminator, String)"
  },
  "api/MoreStructures.SuffixStructures.Matching.html": {
    "href": "api/MoreStructures.SuffixStructures.Matching.html",
    "title": "Namespace MoreStructures.SuffixStructures.Matching",
    "keywords": "Namespace MoreStructures.SuffixStructures.Matching Classes Match<TPath> The result of matching a against a concretion. Matcher Exposes utility methods to match a TextWithTerminator against a ISuffixStructureNode<TEdge, TNode> concretion."
  },
  "api/MoreStructures.SuffixStructures.Matching.Match-1.html": {
    "href": "api/MoreStructures.SuffixStructures.Matching.Match-1.html",
    "title": "Class Match<TPath>",
    "keywords": "Class Match<TPath> The result of matching a against a concretion. Inheritance System.Object Match<TPath> Implements System.IEquatable < Match <TPath>> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.SuffixStructures.Matching Assembly : MoreStructures.dll Syntax public sealed class Match<TPath> : IEquatable<Match<TPath>> Type Parameters Name Description TPath Remarks Generated by methods. Constructors | Improve this Doc View Source Match(Boolean, Int32, Int32, TPath) The result of matching a against a concretion. Declaration public Match(bool Success, int Begin, int MatchedChars, TPath Path) Parameters Type Name Description System.Boolean Success Whether the text has been completely matched or not. System.Int32 Begin The index in text of the best match in the Suffix Tree. System.Int32 MatchedChars The number of chars matched from the text. TPath Path The path of nodes visited by the matching algorithm, from the root downwards. Remarks Generated by methods. Properties | Improve this Doc View Source Begin Declaration public int Begin { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source MatchedChars Declaration public int MatchedChars { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source Path Declaration public TPath Path { get; set; } Property Value Type Description TPath | Improve this Doc View Source Success Declaration public bool Success { get; set; } Property Value Type Description System.Boolean Implements System.IEquatable<T>"
  },
  "api/MoreStructures.SuffixStructures.Matching.Matcher.html": {
    "href": "api/MoreStructures.SuffixStructures.Matching.Matcher.html",
    "title": "Class Matcher",
    "keywords": "Class Matcher Exposes utility methods to match a TextWithTerminator against a ISuffixStructureNode<TEdge, TNode> concretion. Inheritance System.Object Matcher Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.SuffixStructures.Matching Assembly : MoreStructures.dll Syntax public static class Matcher Methods | Improve this Doc View Source Match<TEdge, TNode>(ISuffixStructureNode<TEdge, TNode>, TextWithTerminator, String) Tries to match a pattern against a ISuffixStructureNode<TEdge, TNode> built on a text. Declaration public static Match<TreePath<TEdge, TNode>> Match<TEdge, TNode>(this ISuffixStructureNode<TEdge, TNode> node, TextWithTerminator text, string pattern) where TEdge : ISuffixStructureEdge<TEdge, TNode> where TNode : ISuffixStructureNode<TEdge, TNode> Parameters Type Name Description ISuffixStructureNode <TEdge, TNode> node The root of the Suffix Tree, to match the suffix of text against. TextWithTerminator text The text whose Suffix Tree has to be matched against the pattern. System.String pattern The pattern to match. Unlike text, is a string without terminator. Returns Type Description Match < TreePath <TEdge, TNode>> A successful or non-successful match. Type Parameters Name Description TEdge TNode Remarks Time Complexity = O(t * as) and Space Complexity = O(t * as) where t = length of the text to match and as = size of the alphabet of the text. If the alphabet is of constant size, complexity is linear."
  },
  "api/MoreStructures.SuffixStructures.SuffixStructureEdgeExtensions.html": {
    "href": "api/MoreStructures.SuffixStructures.SuffixStructureEdgeExtensions.html",
    "title": "Class SuffixStructureEdgeExtensions",
    "keywords": "Class SuffixStructureEdgeExtensions Extension methods for all ISuffixStructureEdge<TEdge, TNode> edge concretions. Inheritance System.Object SuffixStructureEdgeExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.SuffixStructures Assembly : MoreStructures.dll Syntax public static class SuffixStructureEdgeExtensions Methods | Improve this Doc View Source IsAdjacentTo<TEdge, TNode>(ISuffixStructureEdge<TEdge, TNode>, TEdge, AdjacencyOrders) Whether the first edge is in adjacency order w.r.t. the second edge. Declaration public static bool IsAdjacentTo<TEdge, TNode>(this ISuffixStructureEdge<TEdge, TNode> first, TEdge second, AdjacencyOrders order = AdjacencyOrders.BeforeOrAfter) where TEdge : ISuffixStructureEdge<TEdge, TNode> where TNode : ISuffixStructureNode<TEdge, TNode> Parameters Type Name Description ISuffixStructureEdge <TEdge, TNode> first The edge to be compared for adjacency. TEdge second The edge to compare the first edge against. AdjacencyOrders order The adjacency relationship order to use for comparison. Returns Type Description System.Boolean True if the specified adjacency relationship is respected. Type Parameters Name Description TEdge TNode"
  },
  "api/MoreStructures.SuffixStructures.SuffixStructureNodeExtensions.html": {
    "href": "api/MoreStructures.SuffixStructures.SuffixStructureNodeExtensions.html",
    "title": "Class SuffixStructureNodeExtensions",
    "keywords": "Class SuffixStructureNodeExtensions Extension methods for all ISuffixStructureNode<TEdge, TNode> node concretions. Inheritance System.Object SuffixStructureNodeExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.SuffixStructures Assembly : MoreStructures.dll Syntax public static class SuffixStructureNodeExtensions Methods | Improve this Doc View Source GetAllSuffixesFor<TEdge, TNode>(ISuffixStructureNode<TEdge, TNode>, TextWithTerminator) Returns all suffixes for the provided text from the node down the ISuffixStructureNode<TEdge, TNode> , up to leaves. Declaration public static IValueEnumerable<IValueEnumerable<char>> GetAllSuffixesFor<TEdge, TNode>(this ISuffixStructureNode<TEdge, TNode> node, TextWithTerminator text) where TEdge : ISuffixStructureEdge<TEdge, TNode> where TNode : ISuffixStructureNode<TEdge, TNode> Parameters Type Name Description ISuffixStructureNode <TEdge, TNode> node The node, to start the structure traversal from. TextWithTerminator text The text with terminator, whose suffixes have to be extracted. Returns Type Description IValueEnumerable < IValueEnumerable < System.Char >> A sequence of IValueEnumerable<T> , each one being a suffix. Type Parameters Name Description TEdge TNode"
  },
  "api/MoreStructures.SuffixStructures.SuffixStructureTreePathExtensions.html": {
    "href": "api/MoreStructures.SuffixStructures.SuffixStructureTreePathExtensions.html",
    "title": "Class SuffixStructureTreePathExtensions",
    "keywords": "Class SuffixStructureTreePathExtensions Extension methods for all TreePath<TEdge, TNode> used in ISuffixStructureNode<TEdge, TNode> structures. Inheritance System.Object SuffixStructureTreePathExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.SuffixStructures Assembly : MoreStructures.dll Syntax public static class SuffixStructureTreePathExtensions Methods | Improve this Doc View Source IsSuffixOf<TEdge, TNode>(TreePath<TEdge, TNode>, TextWithTerminator) Whether this path identifies a suffix of the provided text. Declaration public static bool IsSuffixOf<TEdge, TNode>(this TreePath<TEdge, TNode> path, TextWithTerminator text) where TEdge : TextWithTerminator.ISelector Parameters Type Name Description TreePath <TEdge, TNode> path The path, identifying a segment of the provided text. TextWithTerminator text The text, including the terminator character. Returns Type Description System.Boolean True if the segment of text is also a suffix the text. Type Parameters Name Description TEdge TNode | Improve this Doc View Source SuffixFor<TEdge, TNode>(TreePath<TEdge, TNode>, TextWithTerminator) Calculate the suffix corresponding to this path on the provided terminator-including text. Declaration public static IValueEnumerable<char> SuffixFor<TEdge, TNode>(this TreePath<TEdge, TNode> path, TextWithTerminator text) where TEdge : TextWithTerminator.ISelector Parameters Type Name Description TreePath <TEdge, TNode> path The path to traverse to build the suffix. TextWithTerminator text The text, including the terminator character. Returns Type Description IValueEnumerable < System.Char > A IValueEnumerable<T> sequence of System.Char containing the suffix. Type Parameters Name Description TEdge TNode"
  },
  "api/MoreStructures.SuffixTrees.Builders.html": {
    "href": "api/MoreStructures.SuffixTrees.Builders.html",
    "title": "Namespace MoreStructures.SuffixTrees.Builders",
    "keywords": "Namespace MoreStructures.SuffixTrees.Builders Classes NaivePartiallyRecursiveSuffixTreeBuilder Builds objects, such as edges and nodes, for SuffixTreeNode structures. UkkonenSuffixTreeBuilder Builds objects, such as edges and nodes, for SuffixTreeNode structures."
  },
  "api/MoreStructures.SuffixTrees.Builders.NaivePartiallyRecursiveSuffixTreeBuilder.html": {
    "href": "api/MoreStructures.SuffixTrees.Builders.NaivePartiallyRecursiveSuffixTreeBuilder.html",
    "title": "Class NaivePartiallyRecursiveSuffixTreeBuilder",
    "keywords": "Class NaivePartiallyRecursiveSuffixTreeBuilder Builds objects, such as edges and nodes, for SuffixTreeNode structures. Inheritance System.Object NaivePartiallyRecursiveSuffixTreeBuilder Implements IBuilder < SuffixTreeEdge , SuffixTreeNode > Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.SuffixTrees.Builders Assembly : MoreStructures.dll Syntax public class NaivePartiallyRecursiveSuffixTreeBuilder : IBuilder<SuffixTreeEdge, SuffixTreeNode> Remarks Implemented as an iteration of recursive visit of the tree being built, with as many iterations as the number of suffix of the input (where the longest suffix is the text itself) and one level of recursion per char of each suffix. Limited by call stack depth and usable with input text of a \"reasonable\" length (i.e. string having a length < ~1K chars). Time Complexity = O(t^2 * as) and Space Complexity = O(t) where t = length of the text to match and as = size of the alphabet of the text. If the alphabet is of constant size, Time Complexity is quadratic. Compared to tries, trees are more compact due to edge coalescing and edge label compression (i.e. edge strings stored as pair (start, length), rather than as a substring of length chars). Each recursion add a leaf and at most one intermediate node, so Space Complexity ~ 2 * t = O(t). Methods | Improve this Doc View Source BuildTree(TextWithTerminator) Declaration public SuffixTreeNode BuildTree(TextWithTerminator text) Parameters Type Name Description TextWithTerminator text Returns Type Description SuffixTreeNode Remarks Implements IBuilder<TEdge, TNode> Extension Methods BuilderExtensions.BuildTree<TEdge, TNode>(IBuilder<TEdge, TNode>, String)"
  },
  "api/MoreStructures.SuffixTrees.Builders.UkkonenSuffixTreeBuilder.html": {
    "href": "api/MoreStructures.SuffixTrees.Builders.UkkonenSuffixTreeBuilder.html",
    "title": "Class UkkonenSuffixTreeBuilder",
    "keywords": "Class UkkonenSuffixTreeBuilder Builds objects, such as edges and nodes, for SuffixTreeNode structures. Inheritance System.Object UkkonenSuffixTreeBuilder Implements IBuilder < SuffixTreeEdge , SuffixTreeNode > Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.SuffixTrees.Builders Assembly : MoreStructures.dll Syntax public class UkkonenSuffixTreeBuilder : IBuilder<SuffixTreeEdge, SuffixTreeNode> Remarks Iterative implementation of the Ukkonen algorithm: see https://en.wikipedia.org/wiki/Ukkonen%27s_algorithm for an introduction and https://www.cs.helsinki.fi/u/ukkonen/SuffixT1withFigs.pdf for the original paper. The algorithm implies some optimizations to achieve linear complexity: The algorithm is structured in phases, as many as the number of chars in the text. At the beginning of a new phase, both the number of remaining suffixes to take care of, and the global end pointer are both increased by 1. Each phase is composed of at least 1 iteration, each one taking care of remaining suffixes. At the beginning Not limited by call stack depth. Convenient with long input text (i.e. string having a length < ~1K chars). Time Complexity = O(t * as) and Space Complexity = O(2 * t) where t = length of the text to match and as = size of the alphabet of the text. If the alphabet is of constant size, Time Complexity is linear. Otherwise it is O(t * log(t)). While there are as many phases as number of chars in text (t), and there can be multiple iterations per phase (as many as the number of remaining suffixes to process), the complexity is still linear, ~ 2t. Methods | Improve this Doc View Source BuildTree(TextWithTerminator) Declaration public SuffixTreeNode BuildTree(TextWithTerminator text) Parameters Type Name Description TextWithTerminator text Returns Type Description SuffixTreeNode Remarks Implements IBuilder<TEdge, TNode> Extension Methods BuilderExtensions.BuildTree<TEdge, TNode>(IBuilder<TEdge, TNode>, String)"
  },
  "api/MoreStructures.SuffixTrees.html": {
    "href": "api/MoreStructures.SuffixTrees.html",
    "title": "Namespace MoreStructures.SuffixTrees",
    "keywords": "Namespace MoreStructures.SuffixTrees Classes SuffixTreeEdge The index key of the collection of children of a SuffixTreeNode , which identifies a non-empty substring in text used as a selector to navigate the SuffixTreeNode in text pattern matching. SuffixTreeNode An immutable node of an immutable Suffix Tree, recursively pointing to its children nodes via SuffixTreeEdge instances, associated with selector strings. SuffixTreeNode.Intermediate Builds an intermediate node, i.e. a node with children and their corresponding incoming edges. SuffixTreeNode.Leaf Builds a leaf, i.e. a node with no children and the start index of the suffix in the text."
  },
  "api/MoreStructures.SuffixTrees.SuffixTreeEdge.html": {
    "href": "api/MoreStructures.SuffixTrees.SuffixTreeEdge.html",
    "title": "Class SuffixTreeEdge",
    "keywords": "Class SuffixTreeEdge The index key of the collection of children of a SuffixTreeNode , which identifies a non-empty substring in text used as a selector to navigate the SuffixTreeNode in text pattern matching. Inheritance System.Object SuffixTreeEdge SuffixTrieEdge Implements ISuffixStructureEdge < SuffixTreeEdge , SuffixTreeNode > TextWithTerminator.ISelector IRecImmDictIndexedTreeEdge < SuffixTreeEdge , SuffixTreeNode > IComparable < SuffixTreeEdge > System.IEquatable < SuffixTreeEdge > Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.SuffixTrees Assembly : MoreStructures.dll Syntax public class SuffixTreeEdge : ISuffixStructureEdge<SuffixTreeEdge, SuffixTreeNode>, TextWithTerminator.ISelector, IRecImmDictIndexedTreeEdge<SuffixTreeEdge, SuffixTreeNode>, IEquatable<SuffixTreeEdge> Constructors | Improve this Doc View Source SuffixTreeEdge(Int32, Int32) The index key of the collection of children of a SuffixTreeNode , which identifies a non-empty substring in text used as a selector to navigate the SuffixTreeNode in text pattern matching. Declaration public SuffixTreeEdge(int Start, int Length) Parameters Type Name Description System.Int32 Start System.Int32 Length Properties | Improve this Doc View Source Length The length of the edge string. Declaration public int Length { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source Start The index of the first character of the edge string in the text. Declaration public int Start { get; set; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source CompareTo(SuffixTreeEdge) Comparison is done by Start first, then Length : lower is smaller, higher is bigger. Declaration public int CompareTo(SuffixTreeEdge other) Parameters Type Name Description SuffixTreeEdge other Returns Type Description System.Int32 | Improve this Doc View Source Of(TextWithTerminator) Extract the substring identified by this selector, out of the provided TextWithTerminator . Declaration public virtual string Of(TextWithTerminator text) Parameters Type Name Description TextWithTerminator text The text with terminator, to extract a substring of. Returns Type Description System.String A substring, whose length depends on the selector. | Improve this Doc View Source OfRotated(RotatedTextWithTerminator) Extract the substring identified by this selector, out of the provided RotatedTextWithTerminator . Declaration public virtual string OfRotated(RotatedTextWithTerminator text) Parameters Type Name Description RotatedTextWithTerminator text The text with terminator, to extract a substring of. Returns Type Description System.String A substring, whose length depends on the selector. Implements ISuffixStructureEdge<TEdge, TNode> TextWithTerminator.ISelector IRecImmDictIndexedTreeEdge<TEdge, TNode> IComparable<> System.IEquatable<T> Extension Methods SuffixStructureEdgeExtensions.IsAdjacentTo<TEdge, TNode>(ISuffixStructureEdge<TEdge, TNode>, TEdge, AdjacencyOrders)"
  },
  "api/MoreStructures.SuffixTrees.SuffixTreeNode.html": {
    "href": "api/MoreStructures.SuffixTrees.SuffixTreeNode.html",
    "title": "Class SuffixTreeNode",
    "keywords": "Class SuffixTreeNode An immutable node of an immutable Suffix Tree, recursively pointing to its children nodes via SuffixTreeEdge instances, associated with selector strings. Inheritance System.Object SuffixTreeNode SuffixTreeNode.Intermediate SuffixTreeNode.Leaf Implements ISuffixStructureNode < SuffixTreeEdge , SuffixTreeNode > IRecImmDictIndexedTreeNode < SuffixTreeEdge , SuffixTreeNode > System.IEquatable < SuffixTreeNode > Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : MoreStructures.SuffixTrees Assembly : MoreStructures.dll Syntax public abstract class SuffixTreeNode : ISuffixStructureNode<SuffixTreeEdge, SuffixTreeNode>, IRecImmDictIndexedTreeNode<SuffixTreeEdge, SuffixTreeNode>, IEquatable<SuffixTreeNode> Remarks Suffix Trees are more space-efficient than Suffix Tries due to the reduced number of SuffixTreeEdge and their SuffixTreeNode , compare to the corresponding SuffixTrieEdge and their SuffixTrieNode , due to entire paths of single chains of chars in Suffix Tries being coalesced into a single selector string, which is stored on the edge with path label compression, i.e. using two fixed sized numbers ( Start and Length ) instead of a variable-length string of characters. Immutability is guaranteed by using ValueReadOnlyCollection<T> . Constructors | Improve this Doc View Source SuffixTreeNode(IDictionary<SuffixTreeEdge, SuffixTreeNode>, Nullable<Int32>) An immutable node of an immutable Suffix Tree, recursively pointing to its children nodes via SuffixTreeEdge instances, associated with selector strings. Declaration protected SuffixTreeNode(IDictionary<SuffixTreeEdge, SuffixTreeNode> Children, int? Start) Parameters Type Name Description IDictionary < SuffixTreeEdge , SuffixTreeNode > Children The collection of children for the node, indexed by string edges. System.Nullable < System.Int32 > Start Remarks Suffix Trees are more space-efficient than Suffix Tries due to the reduced number of SuffixTreeEdge and their SuffixTreeNode , compare to the corresponding SuffixTrieEdge and their SuffixTrieNode , due to entire paths of single chains of chars in Suffix Tries being coalesced into a single selector string, which is stored on the edge with path label compression, i.e. using two fixed sized numbers ( Start and Length ) instead of a variable-length string of characters. Immutability is guaranteed by using ValueReadOnlyCollection<T> . Properties | Improve this Doc View Source Children A readonly view of the children private collection of this node. Empty for leaves. Declaration public IDictionary<SuffixTreeEdge, SuffixTreeNode> Children { get; } Property Value Type Description IDictionary < SuffixTreeEdge , SuffixTreeNode > | Improve this Doc View Source Item[SuffixTreeEdge] Indexes into the children of this node, by edge. Declaration public SuffixTreeNode this[SuffixTreeEdge edge] { get; } Parameters Type Name Description SuffixTreeEdge edge Property Value Type Description SuffixTreeNode | Improve this Doc View Source Start The index of the character, the path from the root leading to this leaf starts with. Non-null for leaves only. Declaration public int? Start { get; } Property Value Type Description System.Nullable < System.Int32 > Methods | Improve this Doc View Source ToString() Uses a IStringifier<TEdge, TNode> to generate the string. Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Implements ISuffixStructureNode<TEdge, TNode> IRecImmDictIndexedTreeNode<TEdge, TNode> System.IEquatable<T> Extension Methods RecImmDictIndexedTreeNodeExtensions.IsLeaf<TEdge, TNode>(IRecImmDictIndexedTreeNode<TEdge, TNode>) RecImmDictIndexedTreeNodeExtensions.GetAllNodeToLeafPaths<TEdge, TNode>(IRecImmDictIndexedTreeNode<TEdge, TNode>) SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(ISuffixStructureNode<TEdge, TNode>, TextWithTerminator) Matcher.Match<TEdge, TNode>(ISuffixStructureNode<TEdge, TNode>, TextWithTerminator, String)"
  },
  "api/MoreStructures.SuffixTrees.SuffixTreeNode.Intermediate.html": {
    "href": "api/MoreStructures.SuffixTrees.SuffixTreeNode.Intermediate.html",
    "title": "Class SuffixTreeNode.Intermediate",
    "keywords": "Class SuffixTreeNode.Intermediate Builds an intermediate node, i.e. a node with children and their corresponding incoming edges. Inheritance System.Object SuffixTreeNode SuffixTreeNode.Intermediate Implements ISuffixStructureNode < SuffixTreeEdge , SuffixTreeNode > IRecImmDictIndexedTreeNode < SuffixTreeEdge , SuffixTreeNode > System.IEquatable < SuffixTreeNode > System.IEquatable < SuffixTreeNode.Intermediate > Inherited Members SuffixTreeNode.Children SuffixTreeNode.Start SuffixTreeNode.Item[SuffixTreeEdge] System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : MoreStructures.SuffixTrees Assembly : MoreStructures.dll Syntax public class Intermediate : SuffixTreeNode, ISuffixStructureNode<SuffixTreeEdge, SuffixTreeNode>, IRecImmDictIndexedTreeNode<SuffixTreeEdge, SuffixTreeNode>, IEquatable<SuffixTreeNode>, IEquatable<SuffixTreeNode.Intermediate> Constructors | Improve this Doc View Source Intermediate(IDictionary<SuffixTreeEdge, SuffixTreeNode>) Builds an intermediate node, i.e. a node with children and their corresponding incoming edges. Declaration public Intermediate(IDictionary<SuffixTreeEdge, SuffixTreeNode> Children) Parameters Type Name Description IDictionary < SuffixTreeEdge , SuffixTreeNode > Children Methods | Improve this Doc View Source ToString() Uses a IStringifier<TEdge, TNode> to generate the string. Declaration public override string ToString() Returns Type Description System.String Overrides SuffixTreeNode.ToString() Implements ISuffixStructureNode<TEdge, TNode> IRecImmDictIndexedTreeNode<TEdge, TNode> System.IEquatable<T> System.IEquatable<T> Extension Methods RecImmDictIndexedTreeNodeExtensions.IsLeaf<TEdge, TNode>(IRecImmDictIndexedTreeNode<TEdge, TNode>) RecImmDictIndexedTreeNodeExtensions.GetAllNodeToLeafPaths<TEdge, TNode>(IRecImmDictIndexedTreeNode<TEdge, TNode>) SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(ISuffixStructureNode<TEdge, TNode>, TextWithTerminator) Matcher.Match<TEdge, TNode>(ISuffixStructureNode<TEdge, TNode>, TextWithTerminator, String)"
  },
  "api/MoreStructures.SuffixTrees.SuffixTreeNode.Leaf.html": {
    "href": "api/MoreStructures.SuffixTrees.SuffixTreeNode.Leaf.html",
    "title": "Class SuffixTreeNode.Leaf",
    "keywords": "Class SuffixTreeNode.Leaf Builds a leaf, i.e. a node with no children and the start index of the suffix in the text. Inheritance System.Object SuffixTreeNode SuffixTreeNode.Leaf Implements ISuffixStructureNode < SuffixTreeEdge , SuffixTreeNode > IRecImmDictIndexedTreeNode < SuffixTreeEdge , SuffixTreeNode > System.IEquatable < SuffixTreeNode > System.IEquatable < SuffixTreeNode.Leaf > Inherited Members SuffixTreeNode.Children SuffixTreeNode.Start SuffixTreeNode.Item[SuffixTreeEdge] System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : MoreStructures.SuffixTrees Assembly : MoreStructures.dll Syntax public class Leaf : SuffixTreeNode, ISuffixStructureNode<SuffixTreeEdge, SuffixTreeNode>, IRecImmDictIndexedTreeNode<SuffixTreeEdge, SuffixTreeNode>, IEquatable<SuffixTreeNode>, IEquatable<SuffixTreeNode.Leaf> Constructors | Improve this Doc View Source Leaf(Int32) Builds a leaf, i.e. a node with no children and the start index of the suffix in the text. Declaration public Leaf(int LeafStart) Parameters Type Name Description System.Int32 LeafStart Properties | Improve this Doc View Source LeafStart Declaration public int LeafStart { get; set; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source ToString() Uses a IStringifier<TEdge, TNode> to generate the string. Declaration public override string ToString() Returns Type Description System.String Overrides SuffixTreeNode.ToString() Implements ISuffixStructureNode<TEdge, TNode> IRecImmDictIndexedTreeNode<TEdge, TNode> System.IEquatable<T> System.IEquatable<T> Extension Methods RecImmDictIndexedTreeNodeExtensions.IsLeaf<TEdge, TNode>(IRecImmDictIndexedTreeNode<TEdge, TNode>) RecImmDictIndexedTreeNodeExtensions.GetAllNodeToLeafPaths<TEdge, TNode>(IRecImmDictIndexedTreeNode<TEdge, TNode>) SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(ISuffixStructureNode<TEdge, TNode>, TextWithTerminator) Matcher.Match<TEdge, TNode>(ISuffixStructureNode<TEdge, TNode>, TextWithTerminator, String)"
  },
  "api/MoreStructures.SuffixTries.Builders.html": {
    "href": "api/MoreStructures.SuffixTries.Builders.html",
    "title": "Namespace MoreStructures.SuffixTries.Builders",
    "keywords": "Namespace MoreStructures.SuffixTries.Builders Classes NaivePartiallyRecursiveSuffixTrieBuilder Builds objects, such as edges and nodes, for SuffixTrieNode structures."
  },
  "api/MoreStructures.SuffixTries.Builders.NaivePartiallyRecursiveSuffixTrieBuilder.html": {
    "href": "api/MoreStructures.SuffixTries.Builders.NaivePartiallyRecursiveSuffixTrieBuilder.html",
    "title": "Class NaivePartiallyRecursiveSuffixTrieBuilder",
    "keywords": "Class NaivePartiallyRecursiveSuffixTrieBuilder Builds objects, such as edges and nodes, for SuffixTrieNode structures. Inheritance System.Object NaivePartiallyRecursiveSuffixTrieBuilder Implements IBuilder < SuffixTrieEdge , SuffixTrieNode > Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.SuffixTries.Builders Assembly : MoreStructures.dll Syntax public class NaivePartiallyRecursiveSuffixTrieBuilder : IBuilder<SuffixTrieEdge, SuffixTrieNode> Remarks Implemented iteratively, with one level of recursion per char of each suffix of the input TextWithTerminator (where the longest suffix is the text itself). Limited by call stack depth and usable with input text of a \"reasonable\" length (i.e. string having a length < ~1K chars). Time Complexity = O(t^2 * as) and Space Complexity = O(t^2) where t = length of the text to match and as = size of the alphabet of the text. If the alphabet is of constant size, complexity is quadratic. Methods | Improve this Doc View Source BuildTree(TextWithTerminator) Declaration public SuffixTrieNode BuildTree(TextWithTerminator text) Parameters Type Name Description TextWithTerminator text Returns Type Description SuffixTrieNode Remarks Implements IBuilder<TEdge, TNode> Extension Methods BuilderExtensions.BuildTree<TEdge, TNode>(IBuilder<TEdge, TNode>, String)"
  },
  "api/MoreStructures.SuffixTries.html": {
    "href": "api/MoreStructures.SuffixTries.html",
    "title": "Namespace MoreStructures.SuffixTries",
    "keywords": "Namespace MoreStructures.SuffixTries Classes SuffixTrieEdge The index key of the collection of children of a SuffixTrieNode , which identifies a single char in text, used as a selector to navigate the SuffixTrieNode in text pattern matching. SuffixTrieNode An immutable node of an immutable Suffix Trie, recursively pointing to its children nodes via SuffixTrieEdge instances, associated with selector characters. SuffixTrieNode.Intermediate Builds an intermediate node, i.e. a node with children and their corresponding incoming edges. SuffixTrieNode.Leaf Builds a leaf, i.e. a node with no children and the start index of the suffix in the text."
  },
  "api/MoreStructures.SuffixTries.SuffixTrieEdge.html": {
    "href": "api/MoreStructures.SuffixTries.SuffixTrieEdge.html",
    "title": "Class SuffixTrieEdge",
    "keywords": "Class SuffixTrieEdge The index key of the collection of children of a SuffixTrieNode , which identifies a single char in text, used as a selector to navigate the SuffixTrieNode in text pattern matching. Inheritance System.Object SuffixTreeEdge SuffixTrieEdge Implements ISuffixStructureEdge < SuffixTreeEdge , SuffixTreeNode > IRecImmDictIndexedTreeEdge < SuffixTreeEdge , SuffixTreeNode > IComparable < SuffixTreeEdge > System.IEquatable < SuffixTreeEdge > ISuffixStructureEdge < SuffixTrieEdge , SuffixTrieNode > TextWithTerminator.ISelector IRecImmDictIndexedTreeEdge < SuffixTrieEdge , SuffixTrieNode > IComparable < SuffixTrieEdge > System.IEquatable < SuffixTrieEdge > Inherited Members SuffixTreeEdge.Start SuffixTreeEdge.Length SuffixTreeEdge.CompareTo(SuffixTreeEdge) SuffixTreeEdge.Of(TextWithTerminator) SuffixTreeEdge.OfRotated(RotatedTextWithTerminator) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.SuffixTries Assembly : MoreStructures.dll Syntax public class SuffixTrieEdge : SuffixTreeEdge, ISuffixStructureEdge<SuffixTreeEdge, SuffixTreeNode>, IRecImmDictIndexedTreeEdge<SuffixTreeEdge, SuffixTreeNode>, IEquatable<SuffixTreeEdge>, ISuffixStructureEdge<SuffixTrieEdge, SuffixTrieNode>, TextWithTerminator.ISelector, IRecImmDictIndexedTreeEdge<SuffixTrieEdge, SuffixTrieNode>, IEquatable<SuffixTrieEdge> Remarks Supports , by Index . Constructors | Improve this Doc View Source SuffixTrieEdge(Int32) The index key of the collection of children of a SuffixTrieNode , which identifies a single char in text, used as a selector to navigate the SuffixTrieNode in text pattern matching. Declaration public SuffixTrieEdge(int Index) Parameters Type Name Description System.Int32 Index The index of the character in the text. Remarks Supports , by Index . Properties | Improve this Doc View Source Index Declaration public int Index { get; set; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source CompareTo(SuffixTrieEdge) Comparison is done by Index : lower is smaller, higher is bigger. Declaration public int CompareTo(SuffixTrieEdge other) Parameters Type Name Description SuffixTrieEdge other Returns Type Description System.Int32 Implements ISuffixStructureEdge<TEdge, TNode> IRecImmDictIndexedTreeEdge<TEdge, TNode> IComparable<> System.IEquatable<T> ISuffixStructureEdge<TEdge, TNode> TextWithTerminator.ISelector IRecImmDictIndexedTreeEdge<TEdge, TNode> IComparable<> System.IEquatable<T>"
  },
  "api/MoreStructures.SuffixTries.SuffixTrieNode.html": {
    "href": "api/MoreStructures.SuffixTries.SuffixTrieNode.html",
    "title": "Class SuffixTrieNode",
    "keywords": "Class SuffixTrieNode An immutable node of an immutable Suffix Trie, recursively pointing to its children nodes via SuffixTrieEdge instances, associated with selector characters. Inheritance System.Object SuffixTrieNode SuffixTrieNode.Intermediate SuffixTrieNode.Leaf Implements ISuffixStructureNode < SuffixTrieEdge , SuffixTrieNode > IRecImmDictIndexedTreeNode < SuffixTrieEdge , SuffixTrieNode > System.IEquatable < SuffixTrieNode > Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : MoreStructures.SuffixTries Assembly : MoreStructures.dll Syntax public abstract class SuffixTrieNode : ISuffixStructureNode<SuffixTrieEdge, SuffixTrieNode>, IRecImmDictIndexedTreeNode<SuffixTrieEdge, SuffixTrieNode>, IEquatable<SuffixTrieNode> Remarks Immutability is guaranteed by using ValueReadOnlyCollection<T> . Constructors | Improve this Doc View Source SuffixTrieNode(IDictionary<SuffixTrieEdge, SuffixTrieNode>, Nullable<Int32>) An immutable node of an immutable Suffix Trie, recursively pointing to its children nodes via SuffixTrieEdge instances, associated with selector characters. Declaration protected SuffixTrieNode(IDictionary<SuffixTrieEdge, SuffixTrieNode> Children, int? Start) Parameters Type Name Description IDictionary < SuffixTrieEdge , SuffixTrieNode > Children The collection of children for the node, indexed by single char edges. System.Nullable < System.Int32 > Start Remarks Immutability is guaranteed by using ValueReadOnlyCollection<T> . Properties | Improve this Doc View Source Children A readonly view of the children private collection of this node. Empty for leaves. Declaration public IDictionary<SuffixTrieEdge, SuffixTrieNode> Children { get; } Property Value Type Description IDictionary < SuffixTrieEdge , SuffixTrieNode > | Improve this Doc View Source Item[SuffixTrieEdge] Indexes into the children of this node, by edge, which is a single char selector. Declaration public SuffixTrieNode this[SuffixTrieEdge edge] { get; } Parameters Type Name Description SuffixTrieEdge edge Property Value Type Description SuffixTrieNode | Improve this Doc View Source Start The index of the character, the path from the root leading to this leaf starts with. Non-null for leaves only. Declaration public int? Start { get; } Property Value Type Description System.Nullable < System.Int32 > Methods | Improve this Doc View Source ToString() Uses a IStringifier<TEdge, TNode> to generate the string. Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Implements ISuffixStructureNode<TEdge, TNode> IRecImmDictIndexedTreeNode<TEdge, TNode> System.IEquatable<T> Extension Methods RecImmDictIndexedTreeNodeExtensions.IsLeaf<TEdge, TNode>(IRecImmDictIndexedTreeNode<TEdge, TNode>) RecImmDictIndexedTreeNodeExtensions.GetAllNodeToLeafPaths<TEdge, TNode>(IRecImmDictIndexedTreeNode<TEdge, TNode>) SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(ISuffixStructureNode<TEdge, TNode>, TextWithTerminator) Matcher.Match<TEdge, TNode>(ISuffixStructureNode<TEdge, TNode>, TextWithTerminator, String)"
  },
  "api/MoreStructures.SuffixTries.SuffixTrieNode.Intermediate.html": {
    "href": "api/MoreStructures.SuffixTries.SuffixTrieNode.Intermediate.html",
    "title": "Class SuffixTrieNode.Intermediate",
    "keywords": "Class SuffixTrieNode.Intermediate Builds an intermediate node, i.e. a node with children and their corresponding incoming edges. Inheritance System.Object SuffixTrieNode SuffixTrieNode.Intermediate Implements ISuffixStructureNode < SuffixTrieEdge , SuffixTrieNode > IRecImmDictIndexedTreeNode < SuffixTrieEdge , SuffixTrieNode > System.IEquatable < SuffixTrieNode > System.IEquatable < SuffixTrieNode.Intermediate > Inherited Members SuffixTrieNode.Children SuffixTrieNode.Start SuffixTrieNode.Item[SuffixTrieEdge] System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : MoreStructures.SuffixTries Assembly : MoreStructures.dll Syntax public class Intermediate : SuffixTrieNode, ISuffixStructureNode<SuffixTrieEdge, SuffixTrieNode>, IRecImmDictIndexedTreeNode<SuffixTrieEdge, SuffixTrieNode>, IEquatable<SuffixTrieNode>, IEquatable<SuffixTrieNode.Intermediate> Constructors | Improve this Doc View Source Intermediate(IDictionary<SuffixTrieEdge, SuffixTrieNode>) Builds an intermediate node, i.e. a node with children and their corresponding incoming edges. Declaration public Intermediate(IDictionary<SuffixTrieEdge, SuffixTrieNode> Children) Parameters Type Name Description IDictionary < SuffixTrieEdge , SuffixTrieNode > Children Methods | Improve this Doc View Source ToString() Uses a IStringifier<TEdge, TNode> to generate the string. Declaration public override string ToString() Returns Type Description System.String Overrides SuffixTrieNode.ToString() Implements ISuffixStructureNode<TEdge, TNode> IRecImmDictIndexedTreeNode<TEdge, TNode> System.IEquatable<T> System.IEquatable<T> Extension Methods RecImmDictIndexedTreeNodeExtensions.IsLeaf<TEdge, TNode>(IRecImmDictIndexedTreeNode<TEdge, TNode>) RecImmDictIndexedTreeNodeExtensions.GetAllNodeToLeafPaths<TEdge, TNode>(IRecImmDictIndexedTreeNode<TEdge, TNode>) SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(ISuffixStructureNode<TEdge, TNode>, TextWithTerminator) Matcher.Match<TEdge, TNode>(ISuffixStructureNode<TEdge, TNode>, TextWithTerminator, String)"
  },
  "api/MoreStructures.SuffixTries.SuffixTrieNode.Leaf.html": {
    "href": "api/MoreStructures.SuffixTries.SuffixTrieNode.Leaf.html",
    "title": "Class SuffixTrieNode.Leaf",
    "keywords": "Class SuffixTrieNode.Leaf Builds a leaf, i.e. a node with no children and the start index of the suffix in the text. Inheritance System.Object SuffixTrieNode SuffixTrieNode.Leaf Implements ISuffixStructureNode < SuffixTrieEdge , SuffixTrieNode > IRecImmDictIndexedTreeNode < SuffixTrieEdge , SuffixTrieNode > System.IEquatable < SuffixTrieNode > System.IEquatable < SuffixTrieNode.Leaf > Inherited Members SuffixTrieNode.Children SuffixTrieNode.Start SuffixTrieNode.Item[SuffixTrieEdge] System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : MoreStructures.SuffixTries Assembly : MoreStructures.dll Syntax public class Leaf : SuffixTrieNode, ISuffixStructureNode<SuffixTrieEdge, SuffixTrieNode>, IRecImmDictIndexedTreeNode<SuffixTrieEdge, SuffixTrieNode>, IEquatable<SuffixTrieNode>, IEquatable<SuffixTrieNode.Leaf> Constructors | Improve this Doc View Source Leaf(Int32) Builds a leaf, i.e. a node with no children and the start index of the suffix in the text. Declaration public Leaf(int LeafStart) Parameters Type Name Description System.Int32 LeafStart Properties | Improve this Doc View Source LeafStart Declaration public int LeafStart { get; set; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source ToString() Uses a IStringifier<TEdge, TNode> to generate the string. Declaration public override string ToString() Returns Type Description System.String Overrides SuffixTrieNode.ToString() Implements ISuffixStructureNode<TEdge, TNode> IRecImmDictIndexedTreeNode<TEdge, TNode> System.IEquatable<T> System.IEquatable<T> Extension Methods RecImmDictIndexedTreeNodeExtensions.IsLeaf<TEdge, TNode>(IRecImmDictIndexedTreeNode<TEdge, TNode>) RecImmDictIndexedTreeNodeExtensions.GetAllNodeToLeafPaths<TEdge, TNode>(IRecImmDictIndexedTreeNode<TEdge, TNode>) SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(ISuffixStructureNode<TEdge, TNode>, TextWithTerminator) Matcher.Match<TEdge, TNode>(ISuffixStructureNode<TEdge, TNode>, TextWithTerminator, String)"
  },
  "api/MoreStructures.Tests.BurrowsWheelerTransform.Builder.BuilderTests.html": {
    "href": "api/MoreStructures.Tests.BurrowsWheelerTransform.Builder.BuilderTests.html",
    "title": "Class BuilderTests",
    "keywords": "Class BuilderTests Inheritance System.Object BuilderTests LastFirstPropertyBasedBuilderWithBinarySearchFinderTests LastFirstPropertyBasedBuilderWithNaiveFinderTests LastFirstPropertyBasedBuilderWithPrecomputedFinderTests NaiveBuilderTests Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.BurrowsWheelerTransform.Builder Assembly : MoreStructures.Tests.dll Syntax public abstract class BuilderTests Constructors | Improve this Doc View Source BuilderTests(IBuilder) Declaration public BuilderTests(IBuilder builder) Parameters Type Name Description IBuilder builder Properties | Improve this Doc View Source Builder Declaration protected IBuilder Builder { get; } Property Value Type Description IBuilder Methods | Improve this Doc View Source BuildMatrix_AllRotationsAreDifferent() Declaration public void BuildMatrix_AllRotationsAreDifferent() | Improve this Doc View Source BuildMatrix_FromTransform_IsCorrect(BuilderTests.TestCase) Declaration public void BuildMatrix_FromTransform_IsCorrect(BuilderTests.TestCase testCase) Parameters Type Name Description BuilderTests.TestCase testCase | Improve this Doc View Source BuildMatrix_LastFirstProperty() Declaration public void BuildMatrix_LastFirstProperty() | Improve this Doc View Source BuildMatrix_ReturnsAllRotationsOfText() Declaration public void BuildMatrix_ReturnsAllRotationsOfText() | Improve this Doc View Source BuildMatrix_ReturnsRotationsSorted() Declaration public void BuildMatrix_ReturnsRotationsSorted() | Improve this Doc View Source BuildTransform_WithMatrix_IsCorrect(BuilderTests.TestCase) Declaration public void BuildTransform_WithMatrix_IsCorrect(BuilderTests.TestCase testCase) Parameters Type Name Description BuilderTests.TestCase testCase | Improve this Doc View Source BuildTransform_WithText_IsCorrect(BuilderTests.TestCase) Declaration public void BuildTransform_WithText_IsCorrect(BuilderTests.TestCase testCase) Parameters Type Name Description BuilderTests.TestCase testCase | Improve this Doc View Source InvertMatrix_IsCorrect(BuilderTests.TestCase) Declaration public void InvertMatrix_IsCorrect(BuilderTests.TestCase testCase) Parameters Type Name Description BuilderTests.TestCase testCase | Improve this Doc View Source InvertTransform_IsCorrect(BuilderTests.TestCase) Declaration public void InvertTransform_IsCorrect(BuilderTests.TestCase testCase) Parameters Type Name Description BuilderTests.TestCase testCase"
  },
  "api/MoreStructures.Tests.BurrowsWheelerTransform.Builder.BuilderTests.TestCase.html": {
    "href": "api/MoreStructures.Tests.BurrowsWheelerTransform.Builder.BuilderTests.TestCase.html",
    "title": "Enum BuilderTests.TestCase",
    "keywords": "Enum BuilderTests.TestCase Namespace : MoreStructures.Tests.BurrowsWheelerTransform.Builder Assembly : MoreStructures.Tests.dll Syntax public enum TestCase Fields Name Description Allele Banana BurrowsWheelerTransform Mississippi PanamaBananas"
  },
  "api/MoreStructures.Tests.BurrowsWheelerTransform.Builder.html": {
    "href": "api/MoreStructures.Tests.BurrowsWheelerTransform.Builder.html",
    "title": "Namespace MoreStructures.Tests.BurrowsWheelerTransform.Builder",
    "keywords": "Namespace MoreStructures.Tests.BurrowsWheelerTransform.Builder Classes BuilderTests LastFirstPropertyBasedBuilderWithBinarySearchFinderTests LastFirstPropertyBasedBuilderWithNaiveFinderTests LastFirstPropertyBasedBuilderWithPrecomputedFinderTests NaiveBuilderTests Enums BuilderTests.TestCase"
  },
  "api/MoreStructures.Tests.BurrowsWheelerTransform.Builder.LastFirstFinders.BinarySearchFinderTests.html": {
    "href": "api/MoreStructures.Tests.BurrowsWheelerTransform.Builder.LastFirstFinders.BinarySearchFinderTests.html",
    "title": "Class BinarySearchFinderTests",
    "keywords": "Class BinarySearchFinderTests Inheritance System.Object LastFirstFinderTests BinarySearchFinderTests Inherited Members LastFirstFinderTests.FinderBuilder LastFirstFinderTests.FindIndexOfNthOccurrenceInBWTAndSortedBWT_IsCorrect(String, Char, Char, Int32, Int32, Int32) LastFirstFinderTests.FindIndexOfNthOccurrenceInBWTAndSortedBWT_ThrowsExceptionOnInvalidInput(String, Char, Char, Int32) LastFirstFinderTests.FindOccurrenceOfCharInBWTAndSortedBWT_IsCorrect(String, Char, Int32, Int32, Int32) LastFirstFinderTests.FindOccurrenceOfCharInSortedBWTAndSortedBWT_ThrowsExceptionOnInvalidInput(String, Char, Int32) LastFirstFinderTests.LastToFirst_IsCorrect(String, Char, Int32, Int32) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.BurrowsWheelerTransform.Builder.LastFirstFinders Assembly : MoreStructures.Tests.dll Syntax public class BinarySearchFinderTests : LastFirstFinderTests Constructors | Improve this Doc View Source BinarySearchFinderTests() Declaration public BinarySearchFinderTests()"
  },
  "api/MoreStructures.Tests.BurrowsWheelerTransform.Builder.LastFirstFinders.html": {
    "href": "api/MoreStructures.Tests.BurrowsWheelerTransform.Builder.LastFirstFinders.html",
    "title": "Namespace MoreStructures.Tests.BurrowsWheelerTransform.Builder.LastFirstFinders",
    "keywords": "Namespace MoreStructures.Tests.BurrowsWheelerTransform.Builder.LastFirstFinders Classes BinarySearchFinderTests LastFirstFinderTests NaiveFinderTests PrecomputedFinderTests"
  },
  "api/MoreStructures.Tests.BurrowsWheelerTransform.Builder.LastFirstFinders.LastFirstFinderTests.html": {
    "href": "api/MoreStructures.Tests.BurrowsWheelerTransform.Builder.LastFirstFinders.LastFirstFinderTests.html",
    "title": "Class LastFirstFinderTests",
    "keywords": "Class LastFirstFinderTests Inheritance System.Object LastFirstFinderTests BinarySearchFinderTests NaiveFinderTests PrecomputedFinderTests Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.BurrowsWheelerTransform.Builder.LastFirstFinders Assembly : MoreStructures.Tests.dll Syntax public abstract class LastFirstFinderTests Constructors | Improve this Doc View Source LastFirstFinderTests(Func<RotatedTextWithTerminator, ILastFirstFinder>) Declaration protected LastFirstFinderTests(Func<RotatedTextWithTerminator, ILastFirstFinder> finderBuilder) Parameters Type Name Description System.Func < RotatedTextWithTerminator , ILastFirstFinder > finderBuilder Properties | Improve this Doc View Source FinderBuilder Declaration protected Func<RotatedTextWithTerminator, ILastFirstFinder> FinderBuilder { get; } Property Value Type Description System.Func < RotatedTextWithTerminator , ILastFirstFinder > Methods | Improve this Doc View Source FindIndexOfNthOccurrenceInBWTAndSortedBWT_IsCorrect(String, Char, Char, Int32, Int32, Int32) Declaration public void FindIndexOfNthOccurrenceInBWTAndSortedBWT_IsCorrect(string bwtStr, char terminator, char charToFind, int occurrence, int expectedBWTResult, int expectedSortedBWTResult) Parameters Type Name Description System.String bwtStr System.Char terminator System.Char charToFind System.Int32 occurrence System.Int32 expectedBWTResult System.Int32 expectedSortedBWTResult | Improve this Doc View Source FindIndexOfNthOccurrenceInBWTAndSortedBWT_ThrowsExceptionOnInvalidInput(String, Char, Char, Int32) Declaration public void FindIndexOfNthOccurrenceInBWTAndSortedBWT_ThrowsExceptionOnInvalidInput(string bwtStr, char terminator, char charToFind, int occurrence) Parameters Type Name Description System.String bwtStr System.Char terminator System.Char charToFind System.Int32 occurrence | Improve this Doc View Source FindOccurrenceOfCharInBWTAndSortedBWT_IsCorrect(String, Char, Int32, Int32, Int32) Declaration public void FindOccurrenceOfCharInBWTAndSortedBWT_IsCorrect(string bwtStr, char terminator, int indexOfChar, int expectedBWTResult, int expectedSortedBWTResult) Parameters Type Name Description System.String bwtStr System.Char terminator System.Int32 indexOfChar System.Int32 expectedBWTResult System.Int32 expectedSortedBWTResult | Improve this Doc View Source FindOccurrenceOfCharInSortedBWTAndSortedBWT_ThrowsExceptionOnInvalidInput(String, Char, Int32) Declaration public void FindOccurrenceOfCharInSortedBWTAndSortedBWT_ThrowsExceptionOnInvalidInput(string bwtStr, char terminator, int indexOfChar) Parameters Type Name Description System.String bwtStr System.Char terminator System.Int32 indexOfChar | Improve this Doc View Source LastToFirst_IsCorrect(String, Char, Int32, Int32) Declaration public void LastToFirst_IsCorrect(string bwtStr, char terminator, int last, int expectedFirst) Parameters Type Name Description System.String bwtStr System.Char terminator System.Int32 last System.Int32 expectedFirst"
  },
  "api/MoreStructures.Tests.BurrowsWheelerTransform.Builder.LastFirstFinders.NaiveFinderTests.html": {
    "href": "api/MoreStructures.Tests.BurrowsWheelerTransform.Builder.LastFirstFinders.NaiveFinderTests.html",
    "title": "Class NaiveFinderTests",
    "keywords": "Class NaiveFinderTests Inheritance System.Object LastFirstFinderTests NaiveFinderTests Inherited Members LastFirstFinderTests.FinderBuilder LastFirstFinderTests.FindIndexOfNthOccurrenceInBWTAndSortedBWT_IsCorrect(String, Char, Char, Int32, Int32, Int32) LastFirstFinderTests.FindIndexOfNthOccurrenceInBWTAndSortedBWT_ThrowsExceptionOnInvalidInput(String, Char, Char, Int32) LastFirstFinderTests.FindOccurrenceOfCharInBWTAndSortedBWT_IsCorrect(String, Char, Int32, Int32, Int32) LastFirstFinderTests.FindOccurrenceOfCharInSortedBWTAndSortedBWT_ThrowsExceptionOnInvalidInput(String, Char, Int32) LastFirstFinderTests.LastToFirst_IsCorrect(String, Char, Int32, Int32) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.BurrowsWheelerTransform.Builder.LastFirstFinders Assembly : MoreStructures.Tests.dll Syntax public class NaiveFinderTests : LastFirstFinderTests Constructors | Improve this Doc View Source NaiveFinderTests() Declaration public NaiveFinderTests() Methods | Improve this Doc View Source Ctor_SetsBWTAndSortedBWT() Declaration public void Ctor_SetsBWTAndSortedBWT()"
  },
  "api/MoreStructures.Tests.BurrowsWheelerTransform.Builder.LastFirstFinders.PrecomputedFinderTests.html": {
    "href": "api/MoreStructures.Tests.BurrowsWheelerTransform.Builder.LastFirstFinders.PrecomputedFinderTests.html",
    "title": "Class PrecomputedFinderTests",
    "keywords": "Class PrecomputedFinderTests Inheritance System.Object LastFirstFinderTests PrecomputedFinderTests Inherited Members LastFirstFinderTests.FinderBuilder LastFirstFinderTests.FindIndexOfNthOccurrenceInBWTAndSortedBWT_IsCorrect(String, Char, Char, Int32, Int32, Int32) LastFirstFinderTests.FindIndexOfNthOccurrenceInBWTAndSortedBWT_ThrowsExceptionOnInvalidInput(String, Char, Char, Int32) LastFirstFinderTests.FindOccurrenceOfCharInBWTAndSortedBWT_IsCorrect(String, Char, Int32, Int32, Int32) LastFirstFinderTests.FindOccurrenceOfCharInSortedBWTAndSortedBWT_ThrowsExceptionOnInvalidInput(String, Char, Int32) LastFirstFinderTests.LastToFirst_IsCorrect(String, Char, Int32, Int32) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.BurrowsWheelerTransform.Builder.LastFirstFinders Assembly : MoreStructures.Tests.dll Syntax public class PrecomputedFinderTests : LastFirstFinderTests Constructors | Improve this Doc View Source PrecomputedFinderTests() Declaration public PrecomputedFinderTests()"
  },
  "api/MoreStructures.Tests.BurrowsWheelerTransform.Builder.LastFirstPropertyBasedBuilderWithBinarySearchFinderTests.html": {
    "href": "api/MoreStructures.Tests.BurrowsWheelerTransform.Builder.LastFirstPropertyBasedBuilderWithBinarySearchFinderTests.html",
    "title": "Class LastFirstPropertyBasedBuilderWithBinarySearchFinderTests",
    "keywords": "Class LastFirstPropertyBasedBuilderWithBinarySearchFinderTests Inheritance System.Object BuilderTests LastFirstPropertyBasedBuilderWithBinarySearchFinderTests Inherited Members BuilderTests.Builder BuilderTests.BuildMatrix_ReturnsAllRotationsOfText() BuilderTests.BuildMatrix_ReturnsRotationsSorted() BuilderTests.BuildMatrix_AllRotationsAreDifferent() BuilderTests.BuildMatrix_LastFirstProperty() BuilderTests.BuildMatrix_FromTransform_IsCorrect(BuilderTests.TestCase) BuilderTests.BuildTransform_WithText_IsCorrect(BuilderTests.TestCase) BuilderTests.BuildTransform_WithMatrix_IsCorrect(BuilderTests.TestCase) BuilderTests.InvertMatrix_IsCorrect(BuilderTests.TestCase) BuilderTests.InvertTransform_IsCorrect(BuilderTests.TestCase) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.BurrowsWheelerTransform.Builder Assembly : MoreStructures.Tests.dll Syntax public class LastFirstPropertyBasedBuilderWithBinarySearchFinderTests : BuilderTests Constructors | Improve this Doc View Source LastFirstPropertyBasedBuilderWithBinarySearchFinderTests() Declaration public LastFirstPropertyBasedBuilderWithBinarySearchFinderTests()"
  },
  "api/MoreStructures.Tests.BurrowsWheelerTransform.Builder.LastFirstPropertyBasedBuilderWithNaiveFinderTests.html": {
    "href": "api/MoreStructures.Tests.BurrowsWheelerTransform.Builder.LastFirstPropertyBasedBuilderWithNaiveFinderTests.html",
    "title": "Class LastFirstPropertyBasedBuilderWithNaiveFinderTests",
    "keywords": "Class LastFirstPropertyBasedBuilderWithNaiveFinderTests Inheritance System.Object BuilderTests LastFirstPropertyBasedBuilderWithNaiveFinderTests Inherited Members BuilderTests.Builder BuilderTests.BuildMatrix_ReturnsAllRotationsOfText() BuilderTests.BuildMatrix_ReturnsRotationsSorted() BuilderTests.BuildMatrix_AllRotationsAreDifferent() BuilderTests.BuildMatrix_LastFirstProperty() BuilderTests.BuildMatrix_FromTransform_IsCorrect(BuilderTests.TestCase) BuilderTests.BuildTransform_WithText_IsCorrect(BuilderTests.TestCase) BuilderTests.BuildTransform_WithMatrix_IsCorrect(BuilderTests.TestCase) BuilderTests.InvertMatrix_IsCorrect(BuilderTests.TestCase) BuilderTests.InvertTransform_IsCorrect(BuilderTests.TestCase) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.BurrowsWheelerTransform.Builder Assembly : MoreStructures.Tests.dll Syntax public class LastFirstPropertyBasedBuilderWithNaiveFinderTests : BuilderTests Constructors | Improve this Doc View Source LastFirstPropertyBasedBuilderWithNaiveFinderTests() Declaration public LastFirstPropertyBasedBuilderWithNaiveFinderTests()"
  },
  "api/MoreStructures.Tests.BurrowsWheelerTransform.Builder.LastFirstPropertyBasedBuilderWithPrecomputedFinderTests.html": {
    "href": "api/MoreStructures.Tests.BurrowsWheelerTransform.Builder.LastFirstPropertyBasedBuilderWithPrecomputedFinderTests.html",
    "title": "Class LastFirstPropertyBasedBuilderWithPrecomputedFinderTests",
    "keywords": "Class LastFirstPropertyBasedBuilderWithPrecomputedFinderTests Inheritance System.Object BuilderTests LastFirstPropertyBasedBuilderWithPrecomputedFinderTests Inherited Members BuilderTests.Builder BuilderTests.BuildMatrix_ReturnsAllRotationsOfText() BuilderTests.BuildMatrix_ReturnsRotationsSorted() BuilderTests.BuildMatrix_AllRotationsAreDifferent() BuilderTests.BuildMatrix_LastFirstProperty() BuilderTests.BuildMatrix_FromTransform_IsCorrect(BuilderTests.TestCase) BuilderTests.BuildTransform_WithText_IsCorrect(BuilderTests.TestCase) BuilderTests.BuildTransform_WithMatrix_IsCorrect(BuilderTests.TestCase) BuilderTests.InvertMatrix_IsCorrect(BuilderTests.TestCase) BuilderTests.InvertTransform_IsCorrect(BuilderTests.TestCase) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.BurrowsWheelerTransform.Builder Assembly : MoreStructures.Tests.dll Syntax public class LastFirstPropertyBasedBuilderWithPrecomputedFinderTests : BuilderTests Constructors | Improve this Doc View Source LastFirstPropertyBasedBuilderWithPrecomputedFinderTests() Declaration public LastFirstPropertyBasedBuilderWithPrecomputedFinderTests()"
  },
  "api/MoreStructures.Tests.BurrowsWheelerTransform.Builder.NaiveBuilderTests.html": {
    "href": "api/MoreStructures.Tests.BurrowsWheelerTransform.Builder.NaiveBuilderTests.html",
    "title": "Class NaiveBuilderTests",
    "keywords": "Class NaiveBuilderTests Inheritance System.Object BuilderTests NaiveBuilderTests Inherited Members BuilderTests.Builder BuilderTests.BuildMatrix_ReturnsAllRotationsOfText() BuilderTests.BuildMatrix_ReturnsRotationsSorted() BuilderTests.BuildMatrix_AllRotationsAreDifferent() BuilderTests.BuildMatrix_LastFirstProperty() BuilderTests.BuildMatrix_FromTransform_IsCorrect(BuilderTests.TestCase) BuilderTests.BuildTransform_WithText_IsCorrect(BuilderTests.TestCase) BuilderTests.BuildTransform_WithMatrix_IsCorrect(BuilderTests.TestCase) BuilderTests.InvertMatrix_IsCorrect(BuilderTests.TestCase) BuilderTests.InvertTransform_IsCorrect(BuilderTests.TestCase) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.BurrowsWheelerTransform.Builder Assembly : MoreStructures.Tests.dll Syntax public class NaiveBuilderTests : BuilderTests Constructors | Improve this Doc View Source NaiveBuilderTests() Declaration public NaiveBuilderTests()"
  },
  "api/MoreStructures.Tests.BurrowsWheelerTransform.BWMatrixTests.html": {
    "href": "api/MoreStructures.Tests.BurrowsWheelerTransform.BWMatrixTests.html",
    "title": "Class BWMatrixTests",
    "keywords": "Class BWMatrixTests Inheritance System.Object BWMatrixTests Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.BurrowsWheelerTransform Assembly : MoreStructures.Tests.dll Syntax public class BWMatrixTests Methods | Improve this Doc View Source Content_ReturnsAnImmutableCollection() Declaration public void Content_ReturnsAnImmutableCollection() | Improve this Doc View Source Ctor_AssignsContentSpecified() Declaration public void Ctor_AssignsContentSpecified() | Improve this Doc View Source Equals_ByValue() Declaration public void Equals_ByValue() | Improve this Doc View Source FirstColumn_IsATextPermutation() Declaration public void FirstColumn_IsATextPermutation() | Improve this Doc View Source FirstColumnAndLastColumn_AreConsistent() Declaration public void FirstColumnAndLastColumn_AreConsistent() | Improve this Doc View Source GetHashCode_ByValue() Declaration public void GetHashCode_ByValue() | Improve this Doc View Source LastColumn_IsATextPermutation() Declaration public void LastColumn_IsATextPermutation() | Improve this Doc View Source Transform_HasSameLengthAsTextPlusTerminator() Declaration public void Transform_HasSameLengthAsTextPlusTerminator() | Improve this Doc View Source Transform_IsCorrect() Declaration public void Transform_IsCorrect()"
  },
  "api/MoreStructures.Tests.BurrowsWheelerTransform.BWTransformTests.html": {
    "href": "api/MoreStructures.Tests.BurrowsWheelerTransform.BWTransformTests.html",
    "title": "Class BWTransformTests",
    "keywords": "Class BWTransformTests Inheritance System.Object BWTransformTests Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.BurrowsWheelerTransform Assembly : MoreStructures.Tests.dll Syntax public class BWTransformTests Methods | Improve this Doc View Source Length_IsTheSameOfLengthOfText() Declaration public void Length_IsTheSameOfLengthOfText()"
  },
  "api/MoreStructures.Tests.BurrowsWheelerTransform.html": {
    "href": "api/MoreStructures.Tests.BurrowsWheelerTransform.html",
    "title": "Namespace MoreStructures.Tests.BurrowsWheelerTransform",
    "keywords": "Namespace MoreStructures.Tests.BurrowsWheelerTransform Classes BWMatrixTests BWTransformTests"
  },
  "api/MoreStructures.Tests.BurrowsWheelerTransform.Matching.html": {
    "href": "api/MoreStructures.Tests.BurrowsWheelerTransform.Matching.html",
    "title": "Namespace MoreStructures.Tests.BurrowsWheelerTransform.Matching",
    "keywords": "Namespace MoreStructures.Tests.BurrowsWheelerTransform.Matching Classes MatcherTests NarrowingIntervalMatcherTests"
  },
  "api/MoreStructures.Tests.BurrowsWheelerTransform.Matching.MatcherTests.html": {
    "href": "api/MoreStructures.Tests.BurrowsWheelerTransform.Matching.MatcherTests.html",
    "title": "Class MatcherTests",
    "keywords": "Class MatcherTests Inheritance System.Object MatcherTests NarrowingIntervalMatcherTests Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.BurrowsWheelerTransform.Matching Assembly : MoreStructures.Tests.dll Syntax public abstract class MatcherTests Constructors | Improve this Doc View Source MatcherTests(IMatcher) Declaration protected MatcherTests(IMatcher matcher) Parameters Type Name Description IMatcher matcher Methods | Improve this Doc View Source Match_IsCorrect(String, String, Boolean, Int32, Int32, Int32) Declaration public void Match_IsCorrect(string textContent, string patternContent, bool expectedSuccess, int expectedMatchedChars, int expectedStart, int expectedEnd) Parameters Type Name Description System.String textContent System.String patternContent System.Boolean expectedSuccess System.Int32 expectedMatchedChars System.Int32 expectedStart System.Int32 expectedEnd | Improve this Doc View Source Match_RaisesExceptionWithEmptyPattern() Declaration public void Match_RaisesExceptionWithEmptyPattern() | Improve this Doc View Source Match_RaisesExceptionWithIncosistentBWTAndSortedBWT() Declaration public void Match_RaisesExceptionWithIncosistentBWTAndSortedBWT()"
  },
  "api/MoreStructures.Tests.BurrowsWheelerTransform.Matching.NarrowingIntervalMatcherTests.html": {
    "href": "api/MoreStructures.Tests.BurrowsWheelerTransform.Matching.NarrowingIntervalMatcherTests.html",
    "title": "Class NarrowingIntervalMatcherTests",
    "keywords": "Class NarrowingIntervalMatcherTests Inheritance System.Object MatcherTests NarrowingIntervalMatcherTests Inherited Members MatcherTests.Match_IsCorrect(String, String, Boolean, Int32, Int32, Int32) MatcherTests.Match_RaisesExceptionWithIncosistentBWTAndSortedBWT() MatcherTests.Match_RaisesExceptionWithEmptyPattern() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.BurrowsWheelerTransform.Matching Assembly : MoreStructures.Tests.dll Syntax public class NarrowingIntervalMatcherTests : MatcherTests Constructors | Improve this Doc View Source NarrowingIntervalMatcherTests() Declaration public NarrowingIntervalMatcherTests()"
  },
  "api/MoreStructures.Tests.CountTrees.CountTreeEdgeTests.html": {
    "href": "api/MoreStructures.Tests.CountTrees.CountTreeEdgeTests.html",
    "title": "Class CountTreeEdgeTests",
    "keywords": "Class CountTreeEdgeTests Inheritance System.Object CountTreeEdgeTests Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.CountTrees Assembly : MoreStructures.Tests.dll Syntax public class CountTreeEdgeTests Methods | Improve this Doc View Source Equals_BasedOnWrappedEdge() Declaration public void Equals_BasedOnWrappedEdge() | Improve this Doc View Source WrappedEdge_IsPreserved() Declaration public void WrappedEdge_IsPreserved()"
  },
  "api/MoreStructures.Tests.CountTrees.CountTreeNodeTests.html": {
    "href": "api/MoreStructures.Tests.CountTrees.CountTreeNodeTests.html",
    "title": "Class CountTreeNodeTests",
    "keywords": "Class CountTreeNodeTests Inheritance System.Object CountTreeNodeTests Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.CountTrees Assembly : MoreStructures.Tests.dll Syntax public class CountTreeNodeTests Methods | Improve this Doc View Source Children_PreservedWrappedStructure() Declaration public void Children_PreservedWrappedStructure() | Improve this Doc View Source DescendantsCount_DoesntStackOverflowWithDeepStructures() Declaration public void DescendantsCount_DoesntStackOverflowWithDeepStructures() | Improve this Doc View Source DescendantsCount_GivesConsistentResults() Declaration public void DescendantsCount_GivesConsistentResults() | Improve this Doc View Source DescendantsCount_OfLeafIsZero() Declaration public void DescendantsCount_OfLeafIsZero() | Improve this Doc View Source DescendantsCount_OfSingletonIsOne() Declaration public void DescendantsCount_OfSingletonIsOne() | Improve this Doc View Source DescendantsCount_OfThreeWithNNodesIsN() Declaration public void DescendantsCount_OfThreeWithNNodesIsN() | Improve this Doc View Source Equals_BasedOnWrappedNode() Declaration public void Equals_BasedOnWrappedNode() | Improve this Doc View Source WrappedNode_IsPreserved() Declaration public void WrappedNode_IsPreserved()"
  },
  "api/MoreStructures.Tests.CountTrees.html": {
    "href": "api/MoreStructures.Tests.CountTrees.html",
    "title": "Namespace MoreStructures.Tests.CountTrees",
    "keywords": "Namespace MoreStructures.Tests.CountTrees Classes CountTreeEdgeTests CountTreeNodeTests"
  },
  "api/MoreStructures.Tests.html": {
    "href": "api/MoreStructures.Tests.html",
    "title": "Namespace MoreStructures.Tests",
    "keywords": "Namespace MoreStructures.Tests Classes RotatedTextWithTerminatorTests StringIncludingTerminatorComparerTests TextWithTerminatorExtensionsTests TextWithTerminatorTests VirtuallyRotatedTextWithTerminatorTests"
  },
  "api/MoreStructures.Tests.Lists.Searching.BinarySearchTests.html": {
    "href": "api/MoreStructures.Tests.Lists.Searching.BinarySearchTests.html",
    "title": "Class BinarySearchTests",
    "keywords": "Class BinarySearchTests Inheritance System.Object SearchTests BinarySearchTests Inherited Members SearchTests.Search SearchTests.SearchMethods_OnListOfIntegers(SearchTests.TestCaseId) SearchTests.SearchMethods_OnCharArray(SearchTests.TestCaseId) SearchTests.SearchMethods_OnString(SearchTests.TestCaseId) SearchTests.SearchMethods_ElementNotFound(Int32) SearchTests.SearchMethods_ElementNotFound_OnStrings() SearchTests.SearchMethods_OnEmptyEnumerable() SearchTests.SearchMethods_FromIndexAndToIndexNull() SearchTests.Nth_RaisesExceptionOnInvalidOccurrenceRank() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.Lists.Searching Assembly : MoreStructures.Tests.dll Syntax public class BinarySearchTests : SearchTests Constructors | Improve this Doc View Source BinarySearchTests() Declaration public BinarySearchTests()"
  },
  "api/MoreStructures.Tests.Lists.Searching.html": {
    "href": "api/MoreStructures.Tests.Lists.Searching.html",
    "title": "Namespace MoreStructures.Tests.Lists.Searching",
    "keywords": "Namespace MoreStructures.Tests.Lists.Searching Classes BinarySearchTests LinearSearchTests SearchTests Enums SearchTests.TestCaseId"
  },
  "api/MoreStructures.Tests.Lists.Searching.LinearSearchTests.html": {
    "href": "api/MoreStructures.Tests.Lists.Searching.LinearSearchTests.html",
    "title": "Class LinearSearchTests",
    "keywords": "Class LinearSearchTests Inheritance System.Object SearchTests LinearSearchTests Inherited Members SearchTests.Search SearchTests.SearchMethods_OnListOfIntegers(SearchTests.TestCaseId) SearchTests.SearchMethods_OnCharArray(SearchTests.TestCaseId) SearchTests.SearchMethods_OnString(SearchTests.TestCaseId) SearchTests.SearchMethods_ElementNotFound(Int32) SearchTests.SearchMethods_ElementNotFound_OnStrings() SearchTests.SearchMethods_OnEmptyEnumerable() SearchTests.SearchMethods_FromIndexAndToIndexNull() SearchTests.Nth_RaisesExceptionOnInvalidOccurrenceRank() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.Lists.Searching Assembly : MoreStructures.Tests.dll Syntax public class LinearSearchTests : SearchTests Constructors | Improve this Doc View Source LinearSearchTests() Declaration public LinearSearchTests()"
  },
  "api/MoreStructures.Tests.Lists.Searching.SearchTests.html": {
    "href": "api/MoreStructures.Tests.Lists.Searching.SearchTests.html",
    "title": "Class SearchTests",
    "keywords": "Class SearchTests Inheritance System.Object SearchTests BinarySearchTests LinearSearchTests Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.Lists.Searching Assembly : MoreStructures.Tests.dll Syntax public abstract class SearchTests Constructors | Improve this Doc View Source SearchTests(ISearch) Declaration protected SearchTests(ISearch search) Parameters Type Name Description ISearch search Properties | Improve this Doc View Source Search Declaration protected ISearch Search { get; } Property Value Type Description ISearch Methods | Improve this Doc View Source Nth_RaisesExceptionOnInvalidOccurrenceRank() Declaration public void Nth_RaisesExceptionOnInvalidOccurrenceRank() | Improve this Doc View Source SearchMethods_ElementNotFound(Int32) Declaration public void SearchMethods_ElementNotFound(int length) Parameters Type Name Description System.Int32 length | Improve this Doc View Source SearchMethods_ElementNotFound_OnStrings() Declaration public void SearchMethods_ElementNotFound_OnStrings() | Improve this Doc View Source SearchMethods_FromIndexAndToIndexNull() Declaration public void SearchMethods_FromIndexAndToIndexNull() | Improve this Doc View Source SearchMethods_OnCharArray(SearchTests.TestCaseId) Declaration public void SearchMethods_OnCharArray(SearchTests.TestCaseId testCaseId) Parameters Type Name Description SearchTests.TestCaseId testCaseId | Improve this Doc View Source SearchMethods_OnEmptyEnumerable() Declaration public void SearchMethods_OnEmptyEnumerable() | Improve this Doc View Source SearchMethods_OnListOfIntegers(SearchTests.TestCaseId) Declaration public void SearchMethods_OnListOfIntegers(SearchTests.TestCaseId testCaseId) Parameters Type Name Description SearchTests.TestCaseId testCaseId | Improve this Doc View Source SearchMethods_OnString(SearchTests.TestCaseId) Declaration public void SearchMethods_OnString(SearchTests.TestCaseId testCaseId) Parameters Type Name Description SearchTests.TestCaseId testCaseId"
  },
  "api/MoreStructures.Tests.Lists.Searching.SearchTests.TestCaseId.html": {
    "href": "api/MoreStructures.Tests.Lists.Searching.SearchTests.TestCaseId.html",
    "title": "Enum SearchTests.TestCaseId",
    "keywords": "Enum SearchTests.TestCaseId Namespace : MoreStructures.Tests.Lists.Searching Assembly : MoreStructures.Tests.dll Syntax public enum TestCaseId Fields Name Description ArrayOfChars1 ListOfIntegers1 ListOfIntegers2 String1 String2"
  },
  "api/MoreStructures.Tests.RecImmTrees.Conversions.FullyIterativeStringifierTests.html": {
    "href": "api/MoreStructures.Tests.RecImmTrees.Conversions.FullyIterativeStringifierTests.html",
    "title": "Class FullyIterativeStringifierTests",
    "keywords": "Class FullyIterativeStringifierTests Inheritance System.Object StringifierTests FullyIterativeStringifierTests Inherited Members StringifierTests.Stringifier StringifierTests.NL StringifierTests.I StringifierTests.DefaultNewLine StringifierTests.DefaultIndent StringifierTests.DefaultRootStringifier StringifierTests.DefaultEdgeAndNodeStringifier StringifierTests.Stringify_OfLeaf() StringifierTests.Stringify_OfTwoLevelsTree() StringifierTests.Stringify_OfThreeLevelsTree() StringifierTests.Stringify_OfFourLevelsTree() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.RecImmTrees.Conversions Assembly : MoreStructures.Tests.dll Syntax public class FullyIterativeStringifierTests : StringifierTests Constructors | Improve this Doc View Source FullyIterativeStringifierTests() Declaration public FullyIterativeStringifierTests() Methods | Improve this Doc View Source PrependLevelAfterStopIndenting_RendersLevelWhenStopIndentingLevelIsReached() Declaration public void PrependLevelAfterStopIndenting_RendersLevelWhenStopIndentingLevelIsReached() | Improve this Doc View Source StopIndentingLevel_StopsIndentingWhenReached_WithOne() Declaration public void StopIndentingLevel_StopsIndentingWhenReached_WithOne() | Improve this Doc View Source StopIndentingLevel_StopsIndentingWhenReached_WithTwo() Declaration public void StopIndentingLevel_StopsIndentingWhenReached_WithTwo() | Improve this Doc View Source StopIndentingLevel_StopsIndentingWhenReached_WithZero() Declaration public void StopIndentingLevel_StopsIndentingWhenReached_WithZero() | Improve this Doc View Source Stringify_DoesntStackOverflowWithDeepStructures() Declaration public void Stringify_DoesntStackOverflowWithDeepStructures()"
  },
  "api/MoreStructures.Tests.RecImmTrees.Conversions.FullyRecursiveStringifierTests.html": {
    "href": "api/MoreStructures.Tests.RecImmTrees.Conversions.FullyRecursiveStringifierTests.html",
    "title": "Class FullyRecursiveStringifierTests",
    "keywords": "Class FullyRecursiveStringifierTests Inheritance System.Object StringifierTests StringifierBaseTests FullyRecursiveStringifierTests Inherited Members StringifierBaseTests.CustomNewLine_IsReflectedIntoOutput() StringifierBaseTests.CustomIndent_IsReflectedIntoOutput() StringifierTests.Stringifier StringifierTests.NL StringifierTests.I StringifierTests.DefaultNewLine StringifierTests.DefaultIndent StringifierTests.DefaultRootStringifier StringifierTests.DefaultEdgeAndNodeStringifier StringifierTests.Stringify_OfLeaf() StringifierTests.Stringify_OfTwoLevelsTree() StringifierTests.Stringify_OfThreeLevelsTree() StringifierTests.Stringify_OfFourLevelsTree() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.RecImmTrees.Conversions Assembly : MoreStructures.Tests.dll Syntax public class FullyRecursiveStringifierTests : StringifierBaseTests Constructors | Improve this Doc View Source FullyRecursiveStringifierTests() Declaration public FullyRecursiveStringifierTests() Methods | Improve this Doc View Source Stringify_DoesntStackOverflowWithNotSoDeepStructures() Declaration public void Stringify_DoesntStackOverflowWithNotSoDeepStructures()"
  },
  "api/MoreStructures.Tests.RecImmTrees.Conversions.html": {
    "href": "api/MoreStructures.Tests.RecImmTrees.Conversions.html",
    "title": "Namespace MoreStructures.Tests.RecImmTrees.Conversions",
    "keywords": "Namespace MoreStructures.Tests.RecImmTrees.Conversions Classes FullyIterativeStringifierTests FullyRecursiveStringifierTests StringifierBaseTests StringifierTests TreeMock TreeMock.Edge TreeMock.Node"
  },
  "api/MoreStructures.Tests.RecImmTrees.Conversions.StringifierBaseTests.html": {
    "href": "api/MoreStructures.Tests.RecImmTrees.Conversions.StringifierBaseTests.html",
    "title": "Class StringifierBaseTests",
    "keywords": "Class StringifierBaseTests Inheritance System.Object StringifierTests StringifierBaseTests FullyRecursiveStringifierTests Inherited Members StringifierTests.Stringifier StringifierTests.NL StringifierTests.I StringifierTests.DefaultNewLine StringifierTests.DefaultIndent StringifierTests.DefaultRootStringifier StringifierTests.DefaultEdgeAndNodeStringifier StringifierTests.Stringify_OfLeaf() StringifierTests.Stringify_OfTwoLevelsTree() StringifierTests.Stringify_OfThreeLevelsTree() StringifierTests.Stringify_OfFourLevelsTree() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.RecImmTrees.Conversions Assembly : MoreStructures.Tests.dll Syntax public abstract class StringifierBaseTests : StringifierTests Constructors | Improve this Doc View Source StringifierBaseTests(IStringifier<TreeMock.Edge, TreeMock.Node>) Declaration public StringifierBaseTests(IStringifier<TreeMock.Edge, TreeMock.Node> stringifier) Parameters Type Name Description IStringifier < TreeMock.Edge , TreeMock.Node > stringifier Methods | Improve this Doc View Source CustomIndent_IsReflectedIntoOutput() Declaration public void CustomIndent_IsReflectedIntoOutput() | Improve this Doc View Source CustomNewLine_IsReflectedIntoOutput() Declaration public void CustomNewLine_IsReflectedIntoOutput()"
  },
  "api/MoreStructures.Tests.RecImmTrees.Conversions.StringifierTests.html": {
    "href": "api/MoreStructures.Tests.RecImmTrees.Conversions.StringifierTests.html",
    "title": "Class StringifierTests",
    "keywords": "Class StringifierTests Inheritance System.Object StringifierTests FullyIterativeStringifierTests StringifierBaseTests Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.RecImmTrees.Conversions Assembly : MoreStructures.Tests.dll Syntax public abstract class StringifierTests Constructors | Improve this Doc View Source StringifierTests(IStringifier<TreeMock.Edge, TreeMock.Node>) Declaration public StringifierTests(IStringifier<TreeMock.Edge, TreeMock.Node> stringifier) Parameters Type Name Description IStringifier < TreeMock.Edge , TreeMock.Node > stringifier Fields | Improve this Doc View Source DefaultEdgeAndNodeStringifier Declaration protected static readonly Func<TreeMock.Edge, TreeMock.Node, string> DefaultEdgeAndNodeStringifier Field Value Type Description System.Func < TreeMock.Edge , TreeMock.Node , System.String > | Improve this Doc View Source DefaultIndent Declaration protected static readonly string DefaultIndent Field Value Type Description System.String | Improve this Doc View Source DefaultNewLine Declaration protected static readonly string DefaultNewLine Field Value Type Description System.String | Improve this Doc View Source DefaultRootStringifier Declaration protected static readonly Func<TreeMock.Node, string> DefaultRootStringifier Field Value Type Description System.Func < TreeMock.Node , System.String > Properties | Improve this Doc View Source I Declaration protected string I { get; } Property Value Type Description System.String | Improve this Doc View Source NL Declaration protected string NL { get; } Property Value Type Description System.String | Improve this Doc View Source Stringifier Declaration protected IStringifier<TreeMock.Edge, TreeMock.Node> Stringifier { get; set; } Property Value Type Description IStringifier < TreeMock.Edge , TreeMock.Node > Methods | Improve this Doc View Source Stringify_OfFourLevelsTree() Declaration public void Stringify_OfFourLevelsTree() | Improve this Doc View Source Stringify_OfLeaf() Declaration public void Stringify_OfLeaf() | Improve this Doc View Source Stringify_OfThreeLevelsTree() Declaration public void Stringify_OfThreeLevelsTree() | Improve this Doc View Source Stringify_OfTwoLevelsTree() Declaration public void Stringify_OfTwoLevelsTree()"
  },
  "api/MoreStructures.Tests.RecImmTrees.Conversions.TreeMock.Edge.html": {
    "href": "api/MoreStructures.Tests.RecImmTrees.Conversions.TreeMock.Edge.html",
    "title": "Class TreeMock.Edge",
    "keywords": "Class TreeMock.Edge Inheritance System.Object TreeMock.Edge Implements IRecImmDictIndexedTreeEdge < TreeMock.Edge , TreeMock.Node > System.IComparable < TreeMock.Edge > System.IEquatable < TreeMock.Edge > Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.RecImmTrees.Conversions Assembly : MoreStructures.Tests.dll Syntax public class Edge : IRecImmDictIndexedTreeEdge<TreeMock.Edge, TreeMock.Node>, IComparable<TreeMock.Edge>, IEquatable<TreeMock.Edge> Constructors | Improve this Doc View Source Edge(Int32) Declaration public Edge(int Id) Parameters Type Name Description System.Int32 Id Properties | Improve this Doc View Source Id Declaration public int Id { get; set; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source CompareTo(TreeMock.Edge) Declaration public int CompareTo(TreeMock.Edge other) Parameters Type Name Description TreeMock.Edge other Returns Type Description System.Int32 Implements IRecImmDictIndexedTreeEdge<TEdge, TNode> System.IComparable<T> System.IEquatable<T>"
  },
  "api/MoreStructures.Tests.RecImmTrees.Conversions.TreeMock.html": {
    "href": "api/MoreStructures.Tests.RecImmTrees.Conversions.TreeMock.html",
    "title": "Class TreeMock",
    "keywords": "Class TreeMock Inheritance System.Object TreeMock Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.RecImmTrees.Conversions Assembly : MoreStructures.Tests.dll Syntax public static class TreeMock Methods | Improve this Doc View Source BuildMostUnbalancedTree(Int32) Declaration public static TreeMock.Node BuildMostUnbalancedTree(int numberOfIntermediateNodes) Parameters Type Name Description System.Int32 numberOfIntermediateNodes Returns Type Description TreeMock.Node"
  },
  "api/MoreStructures.Tests.RecImmTrees.Conversions.TreeMock.Node.html": {
    "href": "api/MoreStructures.Tests.RecImmTrees.Conversions.TreeMock.Node.html",
    "title": "Class TreeMock.Node",
    "keywords": "Class TreeMock.Node Inheritance System.Object TreeMock.Node Implements IRecImmDictIndexedTreeNode < TreeMock.Edge , TreeMock.Node > System.IEquatable < TreeMock.Node > Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.RecImmTrees.Conversions Assembly : MoreStructures.Tests.dll Syntax public class Node : IRecImmDictIndexedTreeNode<TreeMock.Edge, TreeMock.Node>, IEquatable<TreeMock.Node> Constructors | Improve this Doc View Source Node(Int32) Declaration public Node(int id) Parameters Type Name Description System.Int32 id | Improve this Doc View Source Node(Int32, IDictionary<TreeMock.Edge, TreeMock.Node>) Declaration public Node(int Id, IDictionary<TreeMock.Edge, TreeMock.Node> Children) Parameters Type Name Description System.Int32 Id System.Collections.Generic.IDictionary < TreeMock.Edge , TreeMock.Node > Children Properties | Improve this Doc View Source Children Declaration public IDictionary<TreeMock.Edge, TreeMock.Node> Children { get; set; } Property Value Type Description System.Collections.Generic.IDictionary < TreeMock.Edge , TreeMock.Node > | Improve this Doc View Source Id Declaration public int Id { get; set; } Property Value Type Description System.Int32 Implements IRecImmDictIndexedTreeNode<TEdge, TNode> System.IEquatable<T>"
  },
  "api/MoreStructures.Tests.RecImmTrees.html": {
    "href": "api/MoreStructures.Tests.RecImmTrees.html",
    "title": "Namespace MoreStructures.Tests.RecImmTrees",
    "keywords": "Namespace MoreStructures.Tests.RecImmTrees Classes RecImmDictIndexedTreeNodeExtensionsTests TreePathExtensionsTests TreePathTests"
  },
  "api/MoreStructures.Tests.RecImmTrees.RecImmDictIndexedTreeNodeExtensionsTests.html": {
    "href": "api/MoreStructures.Tests.RecImmTrees.RecImmDictIndexedTreeNodeExtensionsTests.html",
    "title": "Class RecImmDictIndexedTreeNodeExtensionsTests",
    "keywords": "Class RecImmDictIndexedTreeNodeExtensionsTests Inheritance System.Object RecImmDictIndexedTreeNodeExtensionsTests Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.RecImmTrees Assembly : MoreStructures.Tests.dll Syntax public class RecImmDictIndexedTreeNodeExtensionsTests Methods | Improve this Doc View Source GetAllNodeToLeafPaths_IsCorrect() Declaration public void GetAllNodeToLeafPaths_IsCorrect() | Improve this Doc View Source GetAllNodeToLeafPaths_IsCorrect2() Declaration public void GetAllNodeToLeafPaths_IsCorrect2() | Improve this Doc View Source IsLeaf_IsCorrectForSuffixTree() Declaration public void IsLeaf_IsCorrectForSuffixTree() | Improve this Doc View Source IsLeaf_IsCorrectForSuffixTrie() Declaration public void IsLeaf_IsCorrectForSuffixTrie()"
  },
  "api/MoreStructures.Tests.RecImmTrees.TreePathExtensionsTests.html": {
    "href": "api/MoreStructures.Tests.RecImmTrees.TreePathExtensionsTests.html",
    "title": "Class TreePathExtensionsTests",
    "keywords": "Class TreePathExtensionsTests Inheritance System.Object TreePathExtensionsTests Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.RecImmTrees Assembly : MoreStructures.Tests.dll Syntax public class TreePathExtensionsTests Methods | Improve this Doc View Source Append_IsCorrect() Declaration public void Append_IsCorrect() | Improve this Doc View Source Concat_IsCorrectAppendingEmptyPath() Declaration public void Concat_IsCorrectAppendingEmptyPath() | Improve this Doc View Source Concat_IsCorrectPrependingEmptyPath() Declaration public void Concat_IsCorrectPrependingEmptyPath() | Improve this Doc View Source Concat_IsCorrectWithTwoNonEmptyPaths() Declaration public void Concat_IsCorrectWithTwoNonEmptyPaths()"
  },
  "api/MoreStructures.Tests.RecImmTrees.TreePathTests.html": {
    "href": "api/MoreStructures.Tests.RecImmTrees.TreePathTests.html",
    "title": "Class TreePathTests",
    "keywords": "Class TreePathTests Inheritance System.Object TreePathTests Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.RecImmTrees Assembly : MoreStructures.Tests.dll Syntax public class TreePathTests Methods | Improve this Doc View Source Ctor_OfSuffixTree_EmptyPath_IsCorrect() Declaration public void Ctor_OfSuffixTree_EmptyPath_IsCorrect() | Improve this Doc View Source Ctor_OfSuffixTree_MultistepPath_IsCorrectWithEnumerable() Declaration public void Ctor_OfSuffixTree_MultistepPath_IsCorrectWithEnumerable() | Improve this Doc View Source Ctor_OfSuffixTree_MultistepPath_IsCorrectWithParams() Declaration public void Ctor_OfSuffixTree_MultistepPath_IsCorrectWithParams() | Improve this Doc View Source Ctor_OfSuffixTree_SingletonPath_IsCorrect() Declaration public void Ctor_OfSuffixTree_SingletonPath_IsCorrect() | Improve this Doc View Source Ctor_OfSuffixTrie_EmptyPath_IsCorrect() Declaration public void Ctor_OfSuffixTrie_EmptyPath_IsCorrect() | Improve this Doc View Source Ctor_OfSuffixTrie_MultistepPath_IsCorrectWithEnumerable() Declaration public void Ctor_OfSuffixTrie_MultistepPath_IsCorrectWithEnumerable() | Improve this Doc View Source Ctor_OfSuffixTrie_MultistepPath_IsCorrectWithParams() Declaration public void Ctor_OfSuffixTrie_MultistepPath_IsCorrectWithParams() | Improve this Doc View Source Ctor_OfSuffixTrie_SingletonPath_IsCorrect() Declaration public void Ctor_OfSuffixTrie_SingletonPath_IsCorrect() | Improve this Doc View Source PathNodes_OfSuffixTree_ImmutabilityOnCtorParam() Declaration public void PathNodes_OfSuffixTree_ImmutabilityOnCtorParam() | Improve this Doc View Source PathNodes_OfSuffixTree_ImmutabilityOnGet() Declaration public void PathNodes_OfSuffixTree_ImmutabilityOnGet() | Improve this Doc View Source PathNodes_OfSuffixTrie_ImmutabilityOnCtorParam() Declaration public void PathNodes_OfSuffixTrie_ImmutabilityOnCtorParam() | Improve this Doc View Source PathNodes_OfSuffixTrie_ImmutabilityOnGet() Declaration public void PathNodes_OfSuffixTrie_ImmutabilityOnGet()"
  },
  "api/MoreStructures.Tests.RotatedTextWithTerminatorTests.html": {
    "href": "api/MoreStructures.Tests.RotatedTextWithTerminatorTests.html",
    "title": "Class RotatedTextWithTerminatorTests",
    "keywords": "Class RotatedTextWithTerminatorTests Inheritance System.Object RotatedTextWithTerminatorTests Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests Assembly : MoreStructures.Tests.dll Syntax public class RotatedTextWithTerminatorTests Methods | Improve this Doc View Source Ctor_Preconditions() Declaration public void Ctor_Preconditions() | Improve this Doc View Source EndsWith_IsCorrect() Declaration public void EndsWith_IsCorrect() | Improve this Doc View Source GetEnumerator_Generic_IsCorrect() Declaration public void GetEnumerator_Generic_IsCorrect() | Improve this Doc View Source GetEnumerator_Generic_WorksWithLinq() Declaration public void GetEnumerator_Generic_WorksWithLinq() | Improve this Doc View Source GetEnumerator_NonGeneric_IsCorrect() Declaration public void GetEnumerator_NonGeneric_IsCorrect() | Improve this Doc View Source Indexer_WithIndex() Declaration public void Indexer_WithIndex() | Improve this Doc View Source Indexer_WithRange() Declaration public void Indexer_WithRange() | Improve this Doc View Source Indexer_WithSelector() Declaration public void Indexer_WithSelector() | Improve this Doc View Source Length_IsCorrect() Declaration public void Length_IsCorrect() | Improve this Doc View Source StartsWith_IsCorrect() Declaration public void StartsWith_IsCorrect()"
  },
  "api/MoreStructures.Tests.StringIncludingTerminatorComparerTests.html": {
    "href": "api/MoreStructures.Tests.StringIncludingTerminatorComparerTests.html",
    "title": "Class StringIncludingTerminatorComparerTests",
    "keywords": "Class StringIncludingTerminatorComparerTests Inheritance System.Object StringIncludingTerminatorComparerTests Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests Assembly : MoreStructures.Tests.dll Syntax public class StringIncludingTerminatorComparerTests Methods | Improve this Doc View Source Compare_IsCorrect_WithNoTerminatorIncluded() Declaration public void Compare_IsCorrect_WithNoTerminatorIncluded() | Improve this Doc View Source Compare_IsCorrect_WithTerminatorIncludedHigherInASCII() Declaration public void Compare_IsCorrect_WithTerminatorIncludedHigherInASCII() | Improve this Doc View Source Compare_IsCorrect_WithTerminatorIncludedLowerInASCII() Declaration public void Compare_IsCorrect_WithTerminatorIncludedLowerInASCII() | Improve this Doc View Source Equals_ByValue() Declaration public void Equals_ByValue() | Improve this Doc View Source GetHashCode_ByValue() Declaration public void GetHashCode_ByValue() | Improve this Doc View Source Terminator_IsSet() Declaration public void Terminator_IsSet()"
  },
  "api/MoreStructures.Tests.SuffixStructures.AdjacencyOrdersTests.html": {
    "href": "api/MoreStructures.Tests.SuffixStructures.AdjacencyOrdersTests.html",
    "title": "Class AdjacencyOrdersTests",
    "keywords": "Class AdjacencyOrdersTests Inheritance System.Object AdjacencyOrdersTests Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.SuffixStructures Assembly : MoreStructures.Tests.dll Syntax public class AdjacencyOrdersTests Methods | Improve this Doc View Source FlagsConsistency() Declaration public void FlagsConsistency()"
  },
  "api/MoreStructures.Tests.SuffixStructures.BuilderExtensionsTests.html": {
    "href": "api/MoreStructures.Tests.SuffixStructures.BuilderExtensionsTests.html",
    "title": "Class BuilderExtensionsTests",
    "keywords": "Class BuilderExtensionsTests Inheritance System.Object BuilderExtensionsTests Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.SuffixStructures Assembly : MoreStructures.Tests.dll Syntax public class BuilderExtensionsTests Methods | Improve this Doc View Source BuildTree_CallsTheBuilderWithAnEquivalentTextWithTerminator() Declaration public void BuildTree_CallsTheBuilderWithAnEquivalentTextWithTerminator()"
  },
  "api/MoreStructures.Tests.SuffixStructures.Conversions.ConversionEquivalences.EquivalenceId.html": {
    "href": "api/MoreStructures.Tests.SuffixStructures.Conversions.ConversionEquivalences.EquivalenceId.html",
    "title": "Enum ConversionEquivalences.EquivalenceId",
    "keywords": "Enum ConversionEquivalences.EquivalenceId Namespace : MoreStructures.Tests.SuffixStructures.Conversions Assembly : MoreStructures.Tests.dll Syntax public enum EquivalenceId Fields Name Description Example Leaf OneLevelTreeToMostUnbalancedAHundredLevelsTrie OneLevelTreeToMostUnbalancedTenLevelsTrie ThreeLevelsTreeToFourLevelsTrie ThreeLevelsTreeToSixLevelsTrie TwoLevelsTreeSingleChainSingleLeafToThreeLevelsTrie TwoLevelsTreeSingleChainTwoLeafsToThreeLevelsTrie TwoLevelsTreeToFourLevelsTrie TwoLevelsTreeToTwoLevelsTrie TwoLevelsTreeWithSiblingToThreeLevelsTrie"
  },
  "api/MoreStructures.Tests.SuffixStructures.Conversions.ConversionEquivalences.html": {
    "href": "api/MoreStructures.Tests.SuffixStructures.Conversions.ConversionEquivalences.html",
    "title": "Class ConversionEquivalences",
    "keywords": "Class ConversionEquivalences Inheritance System.Object ConversionEquivalences Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.SuffixStructures.Conversions Assembly : MoreStructures.Tests.dll Syntax public static class ConversionEquivalences Fields | Improve this Doc View Source Equivalences Declaration public static readonly Dictionary<ConversionEquivalences.EquivalenceId, (SuffixTreeNode treeNode, SuffixTrieNode trieNode)> Equivalences Field Value Type Description System.Collections.Generic.Dictionary < ConversionEquivalences.EquivalenceId , System.ValueTuple < SuffixTreeNode , SuffixTrieNode >>"
  },
  "api/MoreStructures.Tests.SuffixStructures.Conversions.ConverterTests.html": {
    "href": "api/MoreStructures.Tests.SuffixStructures.Conversions.ConverterTests.html",
    "title": "Class ConverterTests",
    "keywords": "Class ConverterTests Inheritance System.Object ConverterTests FullyIterativeConverterTests FullyRecursiveConverterTests PartiallyIterativeConverterTests Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.SuffixStructures.Conversions Assembly : MoreStructures.Tests.dll Syntax public abstract class ConverterTests Constructors | Improve this Doc View Source ConverterTests(IConverter) Declaration public ConverterTests(IConverter suffixStructuresConverter) Parameters Type Name Description IConverter suffixStructuresConverter Properties | Improve this Doc View Source Converter Declaration protected IConverter Converter { get; set; } Property Value Type Description IConverter Methods | Improve this Doc View Source TreeToTrie_IsCorrect(ConversionEquivalences.EquivalenceId) Declaration public void TreeToTrie_IsCorrect(ConversionEquivalences.EquivalenceId equivalenceId) Parameters Type Name Description ConversionEquivalences.EquivalenceId equivalenceId | Improve this Doc View Source TreeToTrie_OnlySupportsLeafAndIntermediateNodes_AsArgument() Declaration public void TreeToTrie_OnlySupportsLeafAndIntermediateNodes_AsArgument() | Improve this Doc View Source TreeToTrie_OnlySupportsLeafAndIntermediateNodes_DeepInTheStructure() Declaration public void TreeToTrie_OnlySupportsLeafAndIntermediateNodes_DeepInTheStructure() | Improve this Doc View Source TrieToTree_IsCorrect(ConversionEquivalences.EquivalenceId) Declaration public void TrieToTree_IsCorrect(ConversionEquivalences.EquivalenceId equivalenceId) Parameters Type Name Description ConversionEquivalences.EquivalenceId equivalenceId | Improve this Doc View Source TrieToTree_OnlySupportsLeafAndIntermediateNodes_AsArgument() Declaration public void TrieToTree_OnlySupportsLeafAndIntermediateNodes_AsArgument() | Improve this Doc View Source TrieToTree_OnlySupportsLeafAndIntermediateNodes_DeepInTheStructure() Declaration public void TrieToTree_OnlySupportsLeafAndIntermediateNodes_DeepInTheStructure()"
  },
  "api/MoreStructures.Tests.SuffixStructures.Conversions.FullyIterativeConverterTests.html": {
    "href": "api/MoreStructures.Tests.SuffixStructures.Conversions.FullyIterativeConverterTests.html",
    "title": "Class FullyIterativeConverterTests",
    "keywords": "Class FullyIterativeConverterTests Runs tests defined in ConverterTests for FullyIterativeConverter . Inheritance System.Object ConverterTests FullyIterativeConverterTests Inherited Members ConverterTests.TreeToTrie_IsCorrect(ConversionEquivalences.EquivalenceId) ConverterTests.TreeToTrie_OnlySupportsLeafAndIntermediateNodes_AsArgument() ConverterTests.TreeToTrie_OnlySupportsLeafAndIntermediateNodes_DeepInTheStructure() ConverterTests.Converter ConverterTests.TrieToTree_IsCorrect(ConversionEquivalences.EquivalenceId) ConverterTests.TrieToTree_OnlySupportsLeafAndIntermediateNodes_AsArgument() ConverterTests.TrieToTree_OnlySupportsLeafAndIntermediateNodes_DeepInTheStructure() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.SuffixStructures.Conversions Assembly : MoreStructures.Tests.dll Syntax public class FullyIterativeConverterTests : ConverterTests Constructors | Improve this Doc View Source FullyIterativeConverterTests() Declaration public FullyIterativeConverterTests() Methods | Improve this Doc View Source TrieToTree_DoesntStackOverflowWithDeepStructures() Declaration public void TrieToTree_DoesntStackOverflowWithDeepStructures()"
  },
  "api/MoreStructures.Tests.SuffixStructures.Conversions.FullyRecursiveConverterTests.html": {
    "href": "api/MoreStructures.Tests.SuffixStructures.Conversions.FullyRecursiveConverterTests.html",
    "title": "Class FullyRecursiveConverterTests",
    "keywords": "Class FullyRecursiveConverterTests Runs tests defined in ConverterTests for FullyRecursiveConverter . Inheritance System.Object ConverterTests FullyRecursiveConverterTests Inherited Members ConverterTests.TreeToTrie_IsCorrect(ConversionEquivalences.EquivalenceId) ConverterTests.TreeToTrie_OnlySupportsLeafAndIntermediateNodes_AsArgument() ConverterTests.TreeToTrie_OnlySupportsLeafAndIntermediateNodes_DeepInTheStructure() ConverterTests.Converter ConverterTests.TrieToTree_IsCorrect(ConversionEquivalences.EquivalenceId) ConverterTests.TrieToTree_OnlySupportsLeafAndIntermediateNodes_AsArgument() ConverterTests.TrieToTree_OnlySupportsLeafAndIntermediateNodes_DeepInTheStructure() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.SuffixStructures.Conversions Assembly : MoreStructures.Tests.dll Syntax public class FullyRecursiveConverterTests : ConverterTests Constructors | Improve this Doc View Source FullyRecursiveConverterTests() Declaration public FullyRecursiveConverterTests()"
  },
  "api/MoreStructures.Tests.SuffixStructures.Conversions.html": {
    "href": "api/MoreStructures.Tests.SuffixStructures.Conversions.html",
    "title": "Namespace MoreStructures.Tests.SuffixStructures.Conversions",
    "keywords": "Namespace MoreStructures.Tests.SuffixStructures.Conversions Classes ConversionEquivalences ConverterTests FullyIterativeConverterTests Runs tests defined in ConverterTests for FullyIterativeConverter . FullyRecursiveConverterTests Runs tests defined in ConverterTests for FullyRecursiveConverter . PartiallyIterativeConverterTests Runs tests defined in ConverterTests for PartiallyIterativeConverter . Enums ConversionEquivalences.EquivalenceId"
  },
  "api/MoreStructures.Tests.SuffixStructures.Conversions.PartiallyIterativeConverterTests.html": {
    "href": "api/MoreStructures.Tests.SuffixStructures.Conversions.PartiallyIterativeConverterTests.html",
    "title": "Class PartiallyIterativeConverterTests",
    "keywords": "Class PartiallyIterativeConverterTests Runs tests defined in ConverterTests for PartiallyIterativeConverter . Inheritance System.Object ConverterTests PartiallyIterativeConverterTests Inherited Members ConverterTests.TreeToTrie_IsCorrect(ConversionEquivalences.EquivalenceId) ConverterTests.TreeToTrie_OnlySupportsLeafAndIntermediateNodes_AsArgument() ConverterTests.TreeToTrie_OnlySupportsLeafAndIntermediateNodes_DeepInTheStructure() ConverterTests.Converter ConverterTests.TrieToTree_IsCorrect(ConversionEquivalences.EquivalenceId) ConverterTests.TrieToTree_OnlySupportsLeafAndIntermediateNodes_AsArgument() ConverterTests.TrieToTree_OnlySupportsLeafAndIntermediateNodes_DeepInTheStructure() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.SuffixStructures.Conversions Assembly : MoreStructures.Tests.dll Syntax public class PartiallyIterativeConverterTests : ConverterTests Constructors | Improve this Doc View Source PartiallyIterativeConverterTests() Declaration public PartiallyIterativeConverterTests()"
  },
  "api/MoreStructures.Tests.SuffixStructures.html": {
    "href": "api/MoreStructures.Tests.SuffixStructures.html",
    "title": "Namespace MoreStructures.Tests.SuffixStructures",
    "keywords": "Namespace MoreStructures.Tests.SuffixStructures Classes AdjacencyOrdersTests BuilderExtensionsTests SuffixStructuresEdgeExtensionsTests SuffixStructuresNodeExtensionsTests SuffixStructuresTreePathExtensionsTests"
  },
  "api/MoreStructures.Tests.SuffixStructures.SuffixStructuresEdgeExtensionsTests.html": {
    "href": "api/MoreStructures.Tests.SuffixStructures.SuffixStructuresEdgeExtensionsTests.html",
    "title": "Class SuffixStructuresEdgeExtensionsTests",
    "keywords": "Class SuffixStructuresEdgeExtensionsTests Inheritance System.Object SuffixStructuresEdgeExtensionsTests Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.SuffixStructures Assembly : MoreStructures.Tests.dll Syntax public class SuffixStructuresEdgeExtensionsTests Methods | Improve this Doc View Source IsAdjacentTo_IsCorrect() Declaration public void IsAdjacentTo_IsCorrect()"
  },
  "api/MoreStructures.Tests.SuffixStructures.SuffixStructuresNodeExtensionsTests.html": {
    "href": "api/MoreStructures.Tests.SuffixStructures.SuffixStructuresNodeExtensionsTests.html",
    "title": "Class SuffixStructuresNodeExtensionsTests",
    "keywords": "Class SuffixStructuresNodeExtensionsTests Inheritance System.Object SuffixStructuresNodeExtensionsTests Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.SuffixStructures Assembly : MoreStructures.Tests.dll Syntax public class SuffixStructuresNodeExtensionsTests Methods | Improve this Doc View Source GetAllSuffixesFor_IsCorrect() Declaration public void GetAllSuffixesFor_IsCorrect() | Improve this Doc View Source GetAllSuffixesFor_IsCorrect2() Declaration public void GetAllSuffixesFor_IsCorrect2()"
  },
  "api/MoreStructures.Tests.SuffixStructures.SuffixStructuresTreePathExtensionsTests.html": {
    "href": "api/MoreStructures.Tests.SuffixStructures.SuffixStructuresTreePathExtensionsTests.html",
    "title": "Class SuffixStructuresTreePathExtensionsTests",
    "keywords": "Class SuffixStructuresTreePathExtensionsTests Inheritance System.Object SuffixStructuresTreePathExtensionsTests Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.SuffixStructures Assembly : MoreStructures.Tests.dll Syntax public class SuffixStructuresTreePathExtensionsTests Methods | Improve this Doc View Source IsSuffixOf_IsCorrectForNonEmtpyPath() Declaration public void IsSuffixOf_IsCorrectForNonEmtpyPath() | Improve this Doc View Source IsSuffixOf_IsTrueForEmtpyPath() Declaration public void IsSuffixOf_IsTrueForEmtpyPath() | Improve this Doc View Source SuffixFor_IsCorrectForEmptyPath() Declaration public void SuffixFor_IsCorrectForEmptyPath() | Improve this Doc View Source SuffixFor_IsCorrectForNonEmptyPathOnSuffixTree() Declaration public void SuffixFor_IsCorrectForNonEmptyPathOnSuffixTree() | Improve this Doc View Source SuffixFor_IsCorrectForNonEmptyPathOnSuffixTrie() Declaration public void SuffixFor_IsCorrectForNonEmptyPathOnSuffixTrie()"
  },
  "api/MoreStructures.Tests.SuffixTrees.Builders.BuilderEquivalences.EquivalenceId.html": {
    "href": "api/MoreStructures.Tests.SuffixTrees.Builders.BuilderEquivalences.EquivalenceId.html",
    "title": "Enum BuilderEquivalences.EquivalenceId",
    "keywords": "Enum BuilderEquivalences.EquivalenceId Namespace : MoreStructures.Tests.SuffixTrees.Builders Assembly : MoreStructures.Tests.dll Syntax public enum EquivalenceId Fields Name Description EmptyString SingleChar ThreeChars_ExtendingPrefixes ThreeCharsString_DifferentPrefixes ThreeCharsString_PartiallySamePrefixes ThreeCharsString_SamePrefixes TwoChars_ExtendingPrefixes TwoCharsString_DifferentPrefixes TwoCharsString_SamePrefixes"
  },
  "api/MoreStructures.Tests.SuffixTrees.Builders.BuilderEquivalences.html": {
    "href": "api/MoreStructures.Tests.SuffixTrees.Builders.BuilderEquivalences.html",
    "title": "Class BuilderEquivalences",
    "keywords": "Class BuilderEquivalences Inheritance System.Object BuilderEquivalences Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.SuffixTrees.Builders Assembly : MoreStructures.Tests.dll Syntax public static class BuilderEquivalences Fields | Improve this Doc View Source Equivalences Declaration public static readonly Dictionary<BuilderEquivalences.EquivalenceId, (TextWithTerminator text, SuffixTreeNode treeNode)> Equivalences Field Value Type Description System.Collections.Generic.Dictionary < BuilderEquivalences.EquivalenceId , System.ValueTuple < TextWithTerminator , SuffixTreeNode >>"
  },
  "api/MoreStructures.Tests.SuffixTrees.Builders.html": {
    "href": "api/MoreStructures.Tests.SuffixTrees.Builders.html",
    "title": "Namespace MoreStructures.Tests.SuffixTrees.Builders",
    "keywords": "Namespace MoreStructures.Tests.SuffixTrees.Builders Classes BuilderEquivalences NaivePartiallyRecursiveSuffixTreeBuilderTests SuffixTreeBuilderTests UkkonenSuffixTreeBuilderTests Enums BuilderEquivalences.EquivalenceId"
  },
  "api/MoreStructures.Tests.SuffixTrees.Builders.NaivePartiallyRecursiveSuffixTreeBuilderTests.html": {
    "href": "api/MoreStructures.Tests.SuffixTrees.Builders.NaivePartiallyRecursiveSuffixTreeBuilderTests.html",
    "title": "Class NaivePartiallyRecursiveSuffixTreeBuilderTests",
    "keywords": "Class NaivePartiallyRecursiveSuffixTreeBuilderTests Inheritance System.Object SuffixTreeBuilderTests NaivePartiallyRecursiveSuffixTreeBuilderTests Inherited Members SuffixTreeBuilderTests.Builder SuffixTreeBuilderTests.BuildTree_IsCorrect(BuilderEquivalences.EquivalenceId) SuffixTreeBuilderTests.BuildTree_StringIncludingTerminator() SuffixTreeBuilderTests.BuildTree_ReturnsOnlySuffixes() SuffixTreeBuilderTests.BuildTree_ReturnsAllSuffixes() SuffixTreeBuilderTests.BuildTree_UsesTerminatorForMatchToDistinguishSuffixesFromAnySubstring() SuffixTreeBuilderTests.BuildTree_StartLeftNullAtNonLeafNodes() SuffixTreeBuilderTests.BuildTree_StartCorrectlySetAtLeafNodes() SuffixTreeBuilderTests.BuildTree_BuildsExampleTreeFromExampleText() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.SuffixTrees.Builders Assembly : MoreStructures.Tests.dll Syntax public class NaivePartiallyRecursiveSuffixTreeBuilderTests : SuffixTreeBuilderTests Constructors | Improve this Doc View Source NaivePartiallyRecursiveSuffixTreeBuilderTests() Declaration public NaivePartiallyRecursiveSuffixTreeBuilderTests()"
  },
  "api/MoreStructures.Tests.SuffixTrees.Builders.SuffixTreeBuilderTests.html": {
    "href": "api/MoreStructures.Tests.SuffixTrees.Builders.SuffixTreeBuilderTests.html",
    "title": "Class SuffixTreeBuilderTests",
    "keywords": "Class SuffixTreeBuilderTests Inheritance System.Object SuffixTreeBuilderTests NaivePartiallyRecursiveSuffixTreeBuilderTests UkkonenSuffixTreeBuilderTests Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.SuffixTrees.Builders Assembly : MoreStructures.Tests.dll Syntax public abstract class SuffixTreeBuilderTests Constructors | Improve this Doc View Source SuffixTreeBuilderTests(IBuilder<SuffixTreeEdge, SuffixTreeNode>) Declaration public SuffixTreeBuilderTests(IBuilder<SuffixTreeEdge, SuffixTreeNode> builder) Parameters Type Name Description IBuilder < SuffixTreeEdge , SuffixTreeNode > builder Fields | Improve this Doc View Source Builder Declaration protected readonly IBuilder<SuffixTreeEdge, SuffixTreeNode> Builder Field Value Type Description IBuilder < SuffixTreeEdge , SuffixTreeNode > Methods | Improve this Doc View Source BuildTree_BuildsExampleTreeFromExampleText() Declaration public void BuildTree_BuildsExampleTreeFromExampleText() | Improve this Doc View Source BuildTree_IsCorrect(BuilderEquivalences.EquivalenceId) Declaration public void BuildTree_IsCorrect(BuilderEquivalences.EquivalenceId equivalenceId) Parameters Type Name Description BuilderEquivalences.EquivalenceId equivalenceId | Improve this Doc View Source BuildTree_ReturnsAllSuffixes() Declaration public void BuildTree_ReturnsAllSuffixes() | Improve this Doc View Source BuildTree_ReturnsOnlySuffixes() Declaration public void BuildTree_ReturnsOnlySuffixes() | Improve this Doc View Source BuildTree_StartCorrectlySetAtLeafNodes() Declaration public void BuildTree_StartCorrectlySetAtLeafNodes() | Improve this Doc View Source BuildTree_StartLeftNullAtNonLeafNodes() Declaration public void BuildTree_StartLeftNullAtNonLeafNodes() | Improve this Doc View Source BuildTree_StringIncludingTerminator() Declaration public void BuildTree_StringIncludingTerminator() | Improve this Doc View Source BuildTree_UsesTerminatorForMatchToDistinguishSuffixesFromAnySubstring() Declaration public void BuildTree_UsesTerminatorForMatchToDistinguishSuffixesFromAnySubstring()"
  },
  "api/MoreStructures.Tests.SuffixTrees.Builders.Ukkonen.html": {
    "href": "api/MoreStructures.Tests.SuffixTrees.Builders.Ukkonen.html",
    "title": "Namespace MoreStructures.Tests.SuffixTrees.Builders.Ukkonen",
    "keywords": "Namespace MoreStructures.Tests.SuffixTrees.Builders.Ukkonen Classes IterationStateTests"
  },
  "api/MoreStructures.Tests.SuffixTrees.Builders.Ukkonen.IterationStateTests.html": {
    "href": "api/MoreStructures.Tests.SuffixTrees.Builders.Ukkonen.IterationStateTests.html",
    "title": "Class IterationStateTests",
    "keywords": "Class IterationStateTests Inheritance System.Object IterationStateTests Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.SuffixTrees.Builders.Ukkonen Assembly : MoreStructures.Tests.dll Syntax public class IterationStateTests Methods | Improve this Doc View Source ActivePointFollowedByCurrentChar_NullAtStart() Declaration public void ActivePointFollowedByCurrentChar_NullAtStart() | Improve this Doc View Source ActivePointFollowedByCurrentChar_ThrowsExceptionBeforeStartingAPhase() Declaration public void ActivePointFollowedByCurrentChar_ThrowsExceptionBeforeStartingAPhase() | Improve this Doc View Source ActivePointFollowedByCurrentChar_ThrowsExceptionWhenInvalidActivePoint() Declaration public void ActivePointFollowedByCurrentChar_ThrowsExceptionWhenInvalidActivePoint() | Improve this Doc View Source ActivePointFollowedByCurrentChar_WhenActivePointIsDefined_FalseCases() Declaration public void ActivePointFollowedByCurrentChar_WhenActivePointIsDefined_FalseCases() | Improve this Doc View Source ActivePointFollowedByCurrentChar_WhenActivePointIsDefined_TrueCases() Declaration public void ActivePointFollowedByCurrentChar_WhenActivePointIsDefined_TrueCases() | Improve this Doc View Source IsThereANextPhase_IsCorrect() Declaration public void IsThereANextPhase_IsCorrect() | Improve this Doc View Source Root_IsSetOnConstruction() Declaration public void Root_IsSetOnConstruction() | Improve this Doc View Source StillRemainingSuffixesInCurrentPhase_AccessProtectedWhenNotInPhase() Declaration public void StillRemainingSuffixesInCurrentPhase_AccessProtectedWhenNotInPhase() | Improve this Doc View Source Text_IsSetOnConstruction() Declaration public void Text_IsSetOnConstruction()"
  },
  "api/MoreStructures.Tests.SuffixTrees.Builders.UkkonenSuffixTreeBuilderTests.html": {
    "href": "api/MoreStructures.Tests.SuffixTrees.Builders.UkkonenSuffixTreeBuilderTests.html",
    "title": "Class UkkonenSuffixTreeBuilderTests",
    "keywords": "Class UkkonenSuffixTreeBuilderTests Inheritance System.Object SuffixTreeBuilderTests UkkonenSuffixTreeBuilderTests Inherited Members SuffixTreeBuilderTests.Builder SuffixTreeBuilderTests.BuildTree_IsCorrect(BuilderEquivalences.EquivalenceId) SuffixTreeBuilderTests.BuildTree_StringIncludingTerminator() SuffixTreeBuilderTests.BuildTree_ReturnsOnlySuffixes() SuffixTreeBuilderTests.BuildTree_ReturnsAllSuffixes() SuffixTreeBuilderTests.BuildTree_UsesTerminatorForMatchToDistinguishSuffixesFromAnySubstring() SuffixTreeBuilderTests.BuildTree_StartLeftNullAtNonLeafNodes() SuffixTreeBuilderTests.BuildTree_StartCorrectlySetAtLeafNodes() SuffixTreeBuilderTests.BuildTree_BuildsExampleTreeFromExampleText() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.SuffixTrees.Builders Assembly : MoreStructures.Tests.dll Syntax public class UkkonenSuffixTreeBuilderTests : SuffixTreeBuilderTests Constructors | Improve this Doc View Source UkkonenSuffixTreeBuilderTests() Declaration public UkkonenSuffixTreeBuilderTests()"
  },
  "api/MoreStructures.Tests.SuffixTrees.html": {
    "href": "api/MoreStructures.Tests.SuffixTrees.html",
    "title": "Namespace MoreStructures.Tests.SuffixTrees",
    "keywords": "Namespace MoreStructures.Tests.SuffixTrees Classes SuffixTreeEdgeTests SuffixTreeNodeTests"
  },
  "api/MoreStructures.Tests.SuffixTrees.Matching.html": {
    "href": "api/MoreStructures.Tests.SuffixTrees.Matching.html",
    "title": "Namespace MoreStructures.Tests.SuffixTrees.Matching",
    "keywords": "Namespace MoreStructures.Tests.SuffixTrees.Matching Classes MatcherTests"
  },
  "api/MoreStructures.Tests.SuffixTrees.Matching.MatcherTests.html": {
    "href": "api/MoreStructures.Tests.SuffixTrees.Matching.MatcherTests.html",
    "title": "Class MatcherTests",
    "keywords": "Class MatcherTests Inheritance System.Object MatcherTests Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.SuffixTrees.Matching Assembly : MoreStructures.Tests.dll Syntax public class MatcherTests Methods | Improve this Doc View Source BuildTree_UsesTerminatorForMatchToDistinguishSuffixesFromAnySubstring() Declaration public void BuildTree_UsesTerminatorForMatchToDistinguishSuffixesFromAnySubstring() | Improve this Doc View Source Match_Preconditions() Declaration public void Match_Preconditions() | Improve this Doc View Source Match_SuccessAndMatchedCharsIsCorrect() Declaration public void Match_SuccessAndMatchedCharsIsCorrect() | Improve this Doc View Source Match_SuccessBeginAndPathIsCorrect() Declaration public void Match_SuccessBeginAndPathIsCorrect() | Improve this Doc View Source Match_UnsuccessAndMatchedCharsIsCorrect() Declaration public void Match_UnsuccessAndMatchedCharsIsCorrect()"
  },
  "api/MoreStructures.Tests.SuffixTrees.SuffixTreeEdgeTests.html": {
    "href": "api/MoreStructures.Tests.SuffixTrees.SuffixTreeEdgeTests.html",
    "title": "Class SuffixTreeEdgeTests",
    "keywords": "Class SuffixTreeEdgeTests Inheritance System.Object SuffixTreeEdgeTests Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.SuffixTrees Assembly : MoreStructures.Tests.dll Syntax public class SuffixTreeEdgeTests Methods | Improve this Doc View Source CompareTo_IsCorrect() Declaration public void CompareTo_IsCorrect() | Improve this Doc View Source Ctor_ValidIndex() Declaration public void Ctor_ValidIndex() | Improve this Doc View Source Ctor_ZeroLengthIsValid() Declaration public void Ctor_ZeroLengthIsValid() | Improve this Doc View Source Of_InboundIndexes() Declaration public void Of_InboundIndexes() | Improve this Doc View Source Of_OutOfBoundsIndexes() Declaration public void Of_OutOfBoundsIndexes() | Improve this Doc View Source OfRotated_InboundIndexes() Declaration public void OfRotated_InboundIndexes() | Improve this Doc View Source OfRotated_OutOfBoundsIndexes() Declaration public void OfRotated_OutOfBoundsIndexes()"
  },
  "api/MoreStructures.Tests.SuffixTrees.SuffixTreeNodeTests.html": {
    "href": "api/MoreStructures.Tests.SuffixTrees.SuffixTreeNodeTests.html",
    "title": "Class SuffixTreeNodeTests",
    "keywords": "Class SuffixTreeNodeTests Inheritance System.Object SuffixTreeNodeTests Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.SuffixTrees Assembly : MoreStructures.Tests.dll Syntax public class SuffixTreeNodeTests Methods | Improve this Doc View Source Children_Immutability_FromCtorParam() Declaration public void Children_Immutability_FromCtorParam() | Improve this Doc View Source Children_Immutability_OnGet() Declaration public void Children_Immutability_OnGet() | Improve this Doc View Source Ctor_InvalidArguments() Declaration public void Ctor_InvalidArguments() | Improve this Doc View Source Equality_IsAlwaysByValue() Declaration public void Equality_IsAlwaysByValue() | Improve this Doc View Source Indexer_RetrievesChild() Declaration public void Indexer_RetrievesChild() | Improve this Doc View Source ToString_IsTheSameOnEquivalentTrees() Declaration public void ToString_IsTheSameOnEquivalentTrees() | Improve this Doc View Source ToString_OnLeafIncludesStart() Declaration public void ToString_OnLeafIncludesStart()"
  },
  "api/MoreStructures.Tests.SuffixTries.Builders.html": {
    "href": "api/MoreStructures.Tests.SuffixTries.Builders.html",
    "title": "Namespace MoreStructures.Tests.SuffixTries.Builders",
    "keywords": "Namespace MoreStructures.Tests.SuffixTries.Builders Classes NaivePartiallyRecursiveSuffixTrieBuilderTests SuffixTrieBuilderTests"
  },
  "api/MoreStructures.Tests.SuffixTries.Builders.NaivePartiallyRecursiveSuffixTrieBuilderTests.html": {
    "href": "api/MoreStructures.Tests.SuffixTries.Builders.NaivePartiallyRecursiveSuffixTrieBuilderTests.html",
    "title": "Class NaivePartiallyRecursiveSuffixTrieBuilderTests",
    "keywords": "Class NaivePartiallyRecursiveSuffixTrieBuilderTests Inheritance System.Object SuffixTrieBuilderTests NaivePartiallyRecursiveSuffixTrieBuilderTests Inherited Members SuffixTrieBuilderTests.BuildTree_WithTextWithTerminatorInput() SuffixTrieBuilderTests.BuildTree_EmptyString() SuffixTrieBuilderTests.BuildTree_StringIncludingTerminator() SuffixTrieBuilderTests.BuildTree_SingleCharString() SuffixTrieBuilderTests.BuildTree_TwoCharsString_DifferentPrefixes() SuffixTrieBuilderTests.BuildTree_TwoCharsString_SamePrefixes() SuffixTrieBuilderTests.BuildTree_ThreeCharsString_SamePrefixes() SuffixTrieBuilderTests.BuildTree_ThreeCharsString_PartiallySamePrefixes() SuffixTrieBuilderTests.BuildTree_ThreeCharsString_DifferentPrefixes() SuffixTrieBuilderTests.BuildTree_ReturnsOnlySuffixes() SuffixTrieBuilderTests.BuildTree_ReturnsAllSuffixes() SuffixTrieBuilderTests.BuildTree_StartLeftNullAtNonLeafNodes() SuffixTrieBuilderTests.BuildTree_StartCorrectlySetAtLeafNodes() SuffixTrieBuilderTests.BuildTree_BuildsExampleTrieFromExampleText() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.SuffixTries.Builders Assembly : MoreStructures.Tests.dll Syntax public class NaivePartiallyRecursiveSuffixTrieBuilderTests : SuffixTrieBuilderTests Constructors | Improve this Doc View Source NaivePartiallyRecursiveSuffixTrieBuilderTests() Declaration public NaivePartiallyRecursiveSuffixTrieBuilderTests()"
  },
  "api/MoreStructures.Tests.SuffixTries.Builders.SuffixTrieBuilderTests.html": {
    "href": "api/MoreStructures.Tests.SuffixTries.Builders.SuffixTrieBuilderTests.html",
    "title": "Class SuffixTrieBuilderTests",
    "keywords": "Class SuffixTrieBuilderTests Inheritance System.Object SuffixTrieBuilderTests NaivePartiallyRecursiveSuffixTrieBuilderTests Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.SuffixTries.Builders Assembly : MoreStructures.Tests.dll Syntax public abstract class SuffixTrieBuilderTests Constructors | Improve this Doc View Source SuffixTrieBuilderTests(IBuilder<SuffixTrieEdge, SuffixTrieNode>) Declaration public SuffixTrieBuilderTests(IBuilder<SuffixTrieEdge, SuffixTrieNode> builder) Parameters Type Name Description IBuilder < SuffixTrieEdge , SuffixTrieNode > builder Methods | Improve this Doc View Source BuildTree_BuildsExampleTrieFromExampleText() Declaration public void BuildTree_BuildsExampleTrieFromExampleText() | Improve this Doc View Source BuildTree_EmptyString() Declaration public void BuildTree_EmptyString() | Improve this Doc View Source BuildTree_ReturnsAllSuffixes() Declaration public void BuildTree_ReturnsAllSuffixes() | Improve this Doc View Source BuildTree_ReturnsOnlySuffixes() Declaration public void BuildTree_ReturnsOnlySuffixes() | Improve this Doc View Source BuildTree_SingleCharString() Declaration public void BuildTree_SingleCharString() | Improve this Doc View Source BuildTree_StartCorrectlySetAtLeafNodes() Declaration public void BuildTree_StartCorrectlySetAtLeafNodes() | Improve this Doc View Source BuildTree_StartLeftNullAtNonLeafNodes() Declaration public void BuildTree_StartLeftNullAtNonLeafNodes() | Improve this Doc View Source BuildTree_StringIncludingTerminator() Declaration public void BuildTree_StringIncludingTerminator() | Improve this Doc View Source BuildTree_ThreeCharsString_DifferentPrefixes() Declaration public void BuildTree_ThreeCharsString_DifferentPrefixes() | Improve this Doc View Source BuildTree_ThreeCharsString_PartiallySamePrefixes() Declaration public void BuildTree_ThreeCharsString_PartiallySamePrefixes() | Improve this Doc View Source BuildTree_ThreeCharsString_SamePrefixes() Declaration public void BuildTree_ThreeCharsString_SamePrefixes() | Improve this Doc View Source BuildTree_TwoCharsString_DifferentPrefixes() Declaration public void BuildTree_TwoCharsString_DifferentPrefixes() | Improve this Doc View Source BuildTree_TwoCharsString_SamePrefixes() Declaration public void BuildTree_TwoCharsString_SamePrefixes() | Improve this Doc View Source BuildTree_WithTextWithTerminatorInput() Declaration public void BuildTree_WithTextWithTerminatorInput()"
  },
  "api/MoreStructures.Tests.SuffixTries.html": {
    "href": "api/MoreStructures.Tests.SuffixTries.html",
    "title": "Namespace MoreStructures.Tests.SuffixTries",
    "keywords": "Namespace MoreStructures.Tests.SuffixTries Classes SuffixTrieEdgeTests SuffixTrieNodeTests"
  },
  "api/MoreStructures.Tests.SuffixTries.SuffixTrieEdgeTests.html": {
    "href": "api/MoreStructures.Tests.SuffixTries.SuffixTrieEdgeTests.html",
    "title": "Class SuffixTrieEdgeTests",
    "keywords": "Class SuffixTrieEdgeTests Inheritance System.Object SuffixTrieEdgeTests Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.SuffixTries Assembly : MoreStructures.Tests.dll Syntax public class SuffixTrieEdgeTests Methods | Improve this Doc View Source CompareTo_IsCorrect() Declaration public void CompareTo_IsCorrect() | Improve this Doc View Source Ctor_ValidIndex() Declaration public void Ctor_ValidIndex() | Improve this Doc View Source Of_InboundIndexes() Declaration public void Of_InboundIndexes() | Improve this Doc View Source Of_OutOfBoundsIndexes() Declaration public void Of_OutOfBoundsIndexes()"
  },
  "api/MoreStructures.Tests.SuffixTries.SuffixTrieNodeTests.html": {
    "href": "api/MoreStructures.Tests.SuffixTries.SuffixTrieNodeTests.html",
    "title": "Class SuffixTrieNodeTests",
    "keywords": "Class SuffixTrieNodeTests Inheritance System.Object SuffixTrieNodeTests Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.SuffixTries Assembly : MoreStructures.Tests.dll Syntax public class SuffixTrieNodeTests Methods | Improve this Doc View Source Children_Immutability_FromCtorParam() Declaration public void Children_Immutability_FromCtorParam() | Improve this Doc View Source Children_ImmutabilityOnGet() Declaration public void Children_ImmutabilityOnGet() | Improve this Doc View Source Ctor_InvalidArguments() Declaration public void Ctor_InvalidArguments() | Improve this Doc View Source Equality_IsAlwaysByValue() Declaration public void Equality_IsAlwaysByValue() | Improve this Doc View Source Indexer_RetrievesChild() Declaration public void Indexer_RetrievesChild() | Improve this Doc View Source ToString_IsTheSameOnEquivalentTrees() Declaration public void ToString_IsTheSameOnEquivalentTrees() | Improve this Doc View Source ToString_OnLeafIncludesStart() Declaration public void ToString_OnLeafIncludesStart()"
  },
  "api/MoreStructures.Tests.TextWithTerminatorExtensionsTests.html": {
    "href": "api/MoreStructures.Tests.TextWithTerminatorExtensionsTests.html",
    "title": "Class TextWithTerminatorExtensionsTests",
    "keywords": "Class TextWithTerminatorExtensionsTests Inheritance System.Object TextWithTerminatorExtensionsTests Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests Assembly : MoreStructures.Tests.dll Syntax public class TextWithTerminatorExtensionsTests Methods | Improve this Doc View Source ToVirtuallyRotated() Declaration public void ToVirtuallyRotated()"
  },
  "api/MoreStructures.Tests.TextWithTerminatorTests.html": {
    "href": "api/MoreStructures.Tests.TextWithTerminatorTests.html",
    "title": "Class TextWithTerminatorTests",
    "keywords": "Class TextWithTerminatorTests Inheritance System.Object TextWithTerminatorTests Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests Assembly : MoreStructures.Tests.dll Syntax public class TextWithTerminatorTests Methods | Improve this Doc View Source Ctor_BrokenInvariant_WithoutValidateInput() Declaration public void Ctor_BrokenInvariant_WithoutValidateInput() | Improve this Doc View Source Ctor_Preconditions_WithValidateInput() Declaration public void Ctor_Preconditions_WithValidateInput() | Improve this Doc View Source EndsWith_IsCorrect() Declaration public void EndsWith_IsCorrect() | Improve this Doc View Source GetEnumerator_Generic_IsCorrect() Declaration public void GetEnumerator_Generic_IsCorrect() | Improve this Doc View Source GetEnumerator_Generic_WorksWithLinq() Declaration public void GetEnumerator_Generic_WorksWithLinq() | Improve this Doc View Source GetEnumerator_NonGeneric_IsCorrect() Declaration public void GetEnumerator_NonGeneric_IsCorrect() | Improve this Doc View Source Indexer_WithIndex() Declaration public void Indexer_WithIndex() | Improve this Doc View Source Indexer_WithRange() Declaration public void Indexer_WithRange() | Improve this Doc View Source Indexer_WithSelector() Declaration public void Indexer_WithSelector() | Improve this Doc View Source Length_IsCorrect() Declaration public void Length_IsCorrect() | Improve this Doc View Source StartsWith_IsCorrect() Declaration public void StartsWith_IsCorrect()"
  },
  "api/MoreStructures.Tests.Utilities.CharOrTerminatorComparerTests.html": {
    "href": "api/MoreStructures.Tests.Utilities.CharOrTerminatorComparerTests.html",
    "title": "Class CharOrTerminatorComparerTests",
    "keywords": "Class CharOrTerminatorComparerTests Inheritance System.Object CharOrTerminatorComparerTests Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.Utilities Assembly : MoreStructures.Tests.dll Syntax public class CharOrTerminatorComparerTests Methods | Improve this Doc View Source Compare_IsCorrect_WithTerminatorHigherInASCII() Declaration public void Compare_IsCorrect_WithTerminatorHigherInASCII() | Improve this Doc View Source Compare_IsCorrect_WithTerminatorLowerInASCII() Declaration public void Compare_IsCorrect_WithTerminatorLowerInASCII() | Improve this Doc View Source Equals_ByValue() Declaration public void Equals_ByValue() | Improve this Doc View Source GetHashCode_ByValue() Declaration public void GetHashCode_ByValue() | Improve this Doc View Source Terminator_IsSet() Declaration public void Terminator_IsSet()"
  },
  "api/MoreStructures.Tests.Utilities.html": {
    "href": "api/MoreStructures.Tests.Utilities.html",
    "title": "Namespace MoreStructures.Tests.Utilities",
    "keywords": "Namespace MoreStructures.Tests.Utilities Classes CharOrTerminatorComparerTests StringUtilitiesTests ValueEnumerableExtensionsTests ValueEnumerableTests ValueReadOnlyCollectionsExtensionsTests ValueReadOnlyCollectionTests ValueReadOnlyDictionaryTests"
  },
  "api/MoreStructures.Tests.Utilities.StringUtilitiesTests.html": {
    "href": "api/MoreStructures.Tests.Utilities.StringUtilitiesTests.html",
    "title": "Class StringUtilitiesTests",
    "keywords": "Class StringUtilitiesTests Inheritance System.Object StringUtilitiesTests Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.Utilities Assembly : MoreStructures.Tests.dll Syntax public class StringUtilitiesTests Methods | Improve this Doc View Source LongestPrefixInCommon_IsCorrect(String, String, Int32) Declaration public void LongestPrefixInCommon_IsCorrect(string first, string second, int expected) Parameters Type Name Description System.String first System.String second System.Int32 expected"
  },
  "api/MoreStructures.Tests.Utilities.ValueEnumerableExtensionsTests.html": {
    "href": "api/MoreStructures.Tests.Utilities.ValueEnumerableExtensionsTests.html",
    "title": "Class ValueEnumerableExtensionsTests",
    "keywords": "Class ValueEnumerableExtensionsTests Inheritance System.Object ValueEnumerableExtensionsTests Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.Utilities Assembly : MoreStructures.Tests.dll Syntax public class ValueEnumerableExtensionsTests Methods | Improve this Doc View Source AsValue_WrapsProvidedEnumerableIntoAValueEnumerable() Declaration public void AsValue_WrapsProvidedEnumerableIntoAValueEnumerable()"
  },
  "api/MoreStructures.Tests.Utilities.ValueEnumerableTests.html": {
    "href": "api/MoreStructures.Tests.Utilities.ValueEnumerableTests.html",
    "title": "Class ValueEnumerableTests",
    "keywords": "Class ValueEnumerableTests Inheritance System.Object ValueEnumerableTests Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.Utilities Assembly : MoreStructures.Tests.dll Syntax public class ValueEnumerableTests Methods | Improve this Doc View Source Equals_ByValueOnElementsOfUnderlyingEnumerable() Declaration public void Equals_ByValueOnElementsOfUnderlyingEnumerable() | Improve this Doc View Source GetEnumerator_WithGeneric_GivesElementsOfUnderlyingEnumerable() Declaration public void GetEnumerator_WithGeneric_GivesElementsOfUnderlyingEnumerable() | Improve this Doc View Source GetEnumerator_WithoutGeneric_GivesElementsOfUnderlyingEnumerable() Declaration public void GetEnumerator_WithoutGeneric_GivesElementsOfUnderlyingEnumerable() | Improve this Doc View Source GetHashCode_ByValueOnElementsOfUnderlyingEnumerable() Declaration public void GetHashCode_ByValueOnElementsOfUnderlyingEnumerable() | Improve this Doc View Source ToString_IncludesUnderlyingEnumerableToString() Declaration public void ToString_IncludesUnderlyingEnumerableToString()"
  },
  "api/MoreStructures.Tests.Utilities.ValueReadOnlyCollectionsExtensionsTests.html": {
    "href": "api/MoreStructures.Tests.Utilities.ValueReadOnlyCollectionsExtensionsTests.html",
    "title": "Class ValueReadOnlyCollectionsExtensionsTests",
    "keywords": "Class ValueReadOnlyCollectionsExtensionsTests Inheritance System.Object ValueReadOnlyCollectionsExtensionsTests Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.Utilities Assembly : MoreStructures.Tests.dll Syntax public class ValueReadOnlyCollectionsExtensionsTests Methods | Improve this Doc View Source ToValueReadOnlyCollection_IsCorrect() Declaration public void ToValueReadOnlyCollection_IsCorrect() | Improve this Doc View Source ToValueReadOnlyDictionary_IsCorrectWithDictionary() Declaration public void ToValueReadOnlyDictionary_IsCorrectWithDictionary() | Improve this Doc View Source ToValueReadOnlyDictionary_IsCorrectWithEnumerable() Declaration public void ToValueReadOnlyDictionary_IsCorrectWithEnumerable()"
  },
  "api/MoreStructures.Tests.Utilities.ValueReadOnlyCollectionTests.html": {
    "href": "api/MoreStructures.Tests.Utilities.ValueReadOnlyCollectionTests.html",
    "title": "Class ValueReadOnlyCollectionTests",
    "keywords": "Class ValueReadOnlyCollectionTests Inheritance System.Object ValueReadOnlyCollectionTests Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.Utilities Assembly : MoreStructures.Tests.dll Syntax public class ValueReadOnlyCollectionTests Methods | Improve this Doc View Source Ctor_EmbedInputEnumerable() Declaration public void Ctor_EmbedInputEnumerable() | Improve this Doc View Source Ctor_IndependenceFromInputEnumerable() Declaration public void Ctor_IndependenceFromInputEnumerable() | Improve this Doc View Source DifferentOperator_IsByValue() Declaration public void DifferentOperator_IsByValue() | Improve this Doc View Source Equals_CheckType() Declaration public void Equals_CheckType() | Improve this Doc View Source Equals_IsByValue() Declaration public void Equals_IsByValue() | Improve this Doc View Source Equals_IsSensitiveToTheOrderOfAddition() Declaration public void Equals_IsSensitiveToTheOrderOfAddition() | Improve this Doc View Source EqualsOperator_IsByValue() Declaration public void EqualsOperator_IsByValue() | Improve this Doc View Source GetHashCode_IsByValue_WithPrimitiveType() Declaration public void GetHashCode_IsByValue_WithPrimitiveType() | Improve this Doc View Source GetHashCode_IsByValue_WithRecordType() Declaration public void GetHashCode_IsByValue_WithRecordType() | Improve this Doc View Source ToString_IncludesToStringOfItems() Declaration public void ToString_IncludesToStringOfItems()"
  },
  "api/MoreStructures.Tests.Utilities.ValueReadOnlyDictionaryTests.html": {
    "href": "api/MoreStructures.Tests.Utilities.ValueReadOnlyDictionaryTests.html",
    "title": "Class ValueReadOnlyDictionaryTests",
    "keywords": "Class ValueReadOnlyDictionaryTests Inheritance System.Object ValueReadOnlyDictionaryTests Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.Utilities Assembly : MoreStructures.Tests.dll Syntax public class ValueReadOnlyDictionaryTests Methods | Improve this Doc View Source Ctor_EmbedInputEnumerable() Declaration public void Ctor_EmbedInputEnumerable() | Improve this Doc View Source Ctor_IndependenceFromInputEnumerable() Declaration public void Ctor_IndependenceFromInputEnumerable() | Improve this Doc View Source Ctor_WithEnumerableOfEntries() Declaration public void Ctor_WithEnumerableOfEntries() | Improve this Doc View Source DifferentOperator_IsByValue() Declaration public void DifferentOperator_IsByValue() | Improve this Doc View Source Equals_CheckType() Declaration public void Equals_CheckType() | Improve this Doc View Source Equals_IsByValue() Declaration public void Equals_IsByValue() | Improve this Doc View Source Equals_IsInsensitiveToTheOrderOfAddition() Declaration public void Equals_IsInsensitiveToTheOrderOfAddition() | Improve this Doc View Source EqualsOperator_IsByValue() Declaration public void EqualsOperator_IsByValue() | Improve this Doc View Source GetHashCode_IsByValue_WithPrimitiveType() Declaration public void GetHashCode_IsByValue_WithPrimitiveType() | Improve this Doc View Source GetHashCode_IsByValue_WithRecordType() Declaration public void GetHashCode_IsByValue_WithRecordType() | Improve this Doc View Source ToString_IncludesToStringOfKeysAndValues() Declaration public void ToString_IncludesToStringOfKeysAndValues()"
  },
  "api/MoreStructures.Tests.VirtuallyRotatedTextWithTerminatorTests.html": {
    "href": "api/MoreStructures.Tests.VirtuallyRotatedTextWithTerminatorTests.html",
    "title": "Class VirtuallyRotatedTextWithTerminatorTests",
    "keywords": "Class VirtuallyRotatedTextWithTerminatorTests Inheritance System.Object VirtuallyRotatedTextWithTerminatorTests Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests Assembly : MoreStructures.Tests.dll Syntax public class VirtuallyRotatedTextWithTerminatorTests Methods | Improve this Doc View Source CompareTo_IsCorrect() Declaration public void CompareTo_IsCorrect() | Improve this Doc View Source GetEnumerator_AsIEnumerable_IteratesCorrectly() Declaration public void GetEnumerator_AsIEnumerable_IteratesCorrectly() | Improve this Doc View Source GetEnumerator_AsIEnumerable_ResetsCorrectly() Declaration public void GetEnumerator_AsIEnumerable_ResetsCorrectly() | Improve this Doc View Source GetEnumerator_CurrentRaisesExceptionBeforeAndAfter() Declaration public void GetEnumerator_CurrentRaisesExceptionBeforeAndAfter() | Improve this Doc View Source GetEnumerator_IteratesCorrectly() Declaration public void GetEnumerator_IteratesCorrectly() | Improve this Doc View Source GetEnumerator_ResetsCorrectly() Declaration public void GetEnumerator_ResetsCorrectly() | Improve this Doc View Source Indexer_FollowsRotation() Declaration public void Indexer_FollowsRotation()"
  },
  "api/MoreStructures.TextWithTerminator.html": {
    "href": "api/MoreStructures.TextWithTerminator.html",
    "title": "Class TextWithTerminator",
    "keywords": "Class TextWithTerminator A text string with a terminator character, not present in the text. Inheritance System.Object TextWithTerminator Implements IValueEnumerable < System.Char > IEnumerable < System.Char > System.IEquatable < TextWithTerminator > Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures Assembly : MoreStructures.dll Syntax public class TextWithTerminator : IValueEnumerable<char>, IEquatable<TextWithTerminator> Remarks A terminator-terminated text is required by data structures like Suffix Tries, Trees or Arrays. This object provides type safety, as it allows to tell apart terminator-terminated strings from generic ones. Consistently using TextWithTerminator , rather than System.String , in all library functionalities ensures that the invariant of a terminator-terminated string is always respected. Most string-related functionalities provided by TextWithTerminator , such as Length and Item[Index] , as well as and System.Collections.IEnumerable support, are delegated to the underlying string. Constructors | Improve this Doc View Source TextWithTerminator(IEnumerable<Char>, Char, Boolean) A text string with a terminator character, not present in the text. Declaration public TextWithTerminator(IEnumerable<char> Text, char Terminator = '$', bool ValidateInput = true) Parameters Type Name Description System.Collections.IEnumerable < System.Char > Text A text string, of any length (including the empty string). System.Char Terminator A terminator character, not present in the text. If not specified DefaultTerminator is used. System.Boolean ValidateInput Whether the input, and in particular Text should be validated, while this object is created. Validation takes O(n) time, where n = number of chars in Text and can be an heavy operation. Remarks A terminator-terminated text is required by data structures like Suffix Tries, Trees or Arrays. This object provides type safety, as it allows to tell apart terminator-terminated strings from generic ones. Consistently using TextWithTerminator , rather than System.String , in all library functionalities ensures that the invariant of a terminator-terminated string is always respected. Most string-related functionalities provided by TextWithTerminator , such as Length and Item[Index] , as well as and System.Collections.IEnumerable support, are delegated to the underlying string. Fields | Improve this Doc View Source DefaultTerminator The special character used as a default terminator for the text to build the Suffix Tree of, when no custom terminator is specified. Should not be present in the text. Declaration public const char DefaultTerminator = '$' Field Value Type Description System.Char Properties | Improve this Doc View Source Item[Index] Select a part of this text by the provided index (either w.r.t. the start or to the end of the text). Declaration public char this[Index index] { get; } Parameters Type Name Description Index index The index applied to the underlying string. Property Value Type Description System.Char A char containing the selected part. | Improve this Doc View Source Item[TextWithTerminator.ISelector] Select a part of this text by the provided selector. Declaration public string this[TextWithTerminator.ISelector selector] { get; } Parameters Type Name Description TextWithTerminator.ISelector selector Any selector acting on a TextWithTerminator . Property Value Type Description System.String A string containing the selected part. | Improve this Doc View Source Item[Range] Select a part of this text by the provided range (start index included, end index excluded). Declaration public IEnumerable<char> this[Range range] { get; } Parameters Type Name Description Range range The range applied to the underlying string. Property Value Type Description System.Collections.IEnumerable < System.Char > An of chars containing the selected part. | Improve this Doc View Source Length The total length of this text, including the terminator. Declaration public int Length { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Terminator Declaration public char Terminator { get; set; } Property Value Type Description System.Char | Improve this Doc View Source Text Declaration public IEnumerable<char> Text { get; set; } Property Value Type Description System.Collections.IEnumerable < System.Char > Remarks Wrapped into a IValueEnumerable<T> to preserve value equality. | Improve this Doc View Source ValidateInput Declaration public bool ValidateInput { get; set; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source EndsWith(IEnumerable<Char>) Whether this text ends with the provided suffix. Declaration public bool EndsWith(IEnumerable<char> suffix) Parameters Type Name Description System.Collections.IEnumerable < System.Char > suffix A terminator-included of System.Char . Returns Type Description System.Boolean True if this text ends by the suffix. | Improve this Doc View Source GetEnumerator() Returns an enumerator that iterates through the collection of chars of the underlying Text string, including the Terminator char. Declaration public IEnumerator<char> GetEnumerator() Returns Type Description System.Collections.IEnumerator < System.Char > | Improve this Doc View Source StartsWith(IEnumerable<Char>) Whether this text starts with the provided suffix. Declaration public bool StartsWith(IEnumerable<char> prefix) Parameters Type Name Description System.Collections.IEnumerable < System.Char > prefix A terminator-included of System.Char . Returns Type Description System.Boolean True if this text starts by the prefix. Explicit Interface Implementations | Improve this Doc View Source IEnumerable.GetEnumerator() Returns an enumerator that iterates through the collection of chars of the underlying Text string, including the Terminator char. Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator Implements IValueEnumerable<T> IEnumerable<> System.IEquatable<T> Extension Methods TextWithTerminatorExtensions.ToVirtuallyRotated(TextWithTerminator, Int32)"
  },
  "api/MoreStructures.TextWithTerminator.ISelector.html": {
    "href": "api/MoreStructures.TextWithTerminator.ISelector.html",
    "title": "Interface TextWithTerminator.ISelector",
    "keywords": "Interface TextWithTerminator.ISelector A selector of a part of a TextWithTerminator or RotatedTextWithTerminator . Namespace : MoreStructures Assembly : MoreStructures.dll Syntax public interface ISelector Methods | Improve this Doc View Source Of(TextWithTerminator) Extract the substring identified by this selector, out of the provided TextWithTerminator . Declaration string Of(TextWithTerminator text) Parameters Type Name Description TextWithTerminator text The text with terminator, to extract a substring of. Returns Type Description System.String A substring, whose length depends on the selector. | Improve this Doc View Source OfRotated(RotatedTextWithTerminator) Extract the substring identified by this selector, out of the provided RotatedTextWithTerminator . Declaration string OfRotated(RotatedTextWithTerminator text) Parameters Type Name Description RotatedTextWithTerminator text The text with terminator, to extract a substring of. Returns Type Description System.String A substring, whose length depends on the selector."
  },
  "api/MoreStructures.TextWithTerminatorExtensions.html": {
    "href": "api/MoreStructures.TextWithTerminatorExtensions.html",
    "title": "Class TextWithTerminatorExtensions",
    "keywords": "Class TextWithTerminatorExtensions Extension methods for TextWithTerminator . Inheritance System.Object TextWithTerminatorExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures Assembly : MoreStructures.dll Syntax public static class TextWithTerminatorExtensions Methods | Improve this Doc View Source ToVirtuallyRotated(TextWithTerminator, Int32) Builds a virtual rotation of the provided TextWithTerminator , by a number of chars defined by rotation , in constant time. Declaration public static VirtuallyRotatedTextWithTerminator ToVirtuallyRotated(this TextWithTerminator text, int rotation) Parameters Type Name Description TextWithTerminator text The text which has to be rotated. System.Int32 rotation The number of chars to virtually rotate text . Returns Type Description VirtuallyRotatedTextWithTerminator An object constructed in constant time and behaving like a rotation of the provided text. Remarks The rotation is \"virtual\" because no new string of length n is computed (which would make the constructor take linear time in the number of chars of text ). Instead, a new object storing the rotation and keeping the reference to text is created in O(1) time and space. Such an object is able to appear as if the underlying string was recomputed, taking into account the rotation in all its exposed functionalities."
  },
  "api/MoreStructures.Utilities.CharOrTerminatorComparer.html": {
    "href": "api/MoreStructures.Utilities.CharOrTerminatorComparer.html",
    "title": "Class CharOrTerminatorComparer",
    "keywords": "Class CharOrTerminatorComparer An implementation of for System.Char , which compares chars taking into account the fact that the char may be a special char, called terminator, which has to be considered smaller than any other char. Inheritance System.Object CharOrTerminatorComparer Namespace : MoreStructures.Utilities Assembly : MoreStructures.dll Syntax public class CharOrTerminatorComparer : IComparer<char> Properties | Improve this Doc View Source Terminator The character acting as terminator, and which has to be considered smaller than any other char. Declaration public char Terminator { get; } Property Value Type Description System.Char Methods | Improve this Doc View Source Build(Char) Builds a CharOrTerminatorComparer with the provided terminator . Caches instances. Declaration public static CharOrTerminatorComparer Build(char terminator) Parameters Type Name Description System.Char terminator Returns Type Description CharOrTerminatorComparer An instance of CharOrTerminatorComparer , new or previously created and cached. | Improve this Doc View Source Compare(Char, Char) Declaration public int Compare(char x, char y) Parameters Type Name Description System.Char x System.Char y Returns Type Description System.Int32 Remarks Special rules applied by CharOrTerminatorComparer : | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Remarks Two CharOrTerminatorComparer are equal if they have the same Terminator . | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Remarks The GetHashCode() is based on Terminator hash."
  },
  "api/MoreStructures.Utilities.html": {
    "href": "api/MoreStructures.Utilities.html",
    "title": "Namespace MoreStructures.Utilities",
    "keywords": "Namespace MoreStructures.Utilities Classes CharOrTerminatorComparer An implementation of for System.Char , which compares chars taking into account the fact that the char may be a special char, called terminator, which has to be considered smaller than any other char. LockValueObject An empty object with value equality (always true), to be used as lock object in records and other value structures. StringIncludingTerminatorComparer An implementation of System.Collections.Generic.IComparer<T> for System.String , which compares string taking into account the fact that the string may contain (at any index, not necessarily at then end) a special char, called terminator, which has to be considered smaller than any other char. StringUtilities Generic utilities and extensions for strings. ValueEnumerable<T> A IValueEnumerable<T> implementation, wrapping a generic . ValueEnumerableExtensions Extension methods for IValueEnumerable<T> . ValueReadOnlyCollection<T> A readonly immutable generic collection of non-null items which performs equality by value. ValueReadOnlyCollectionsExtensions Extension methods for value readonly collections defined in MoreStructures.Utilities . ValueReadOnlyDictionary<TKey, TValue> A readonly immutable generic dictionary of non-null keys and values which performs equality by value. Interfaces IValueEnumerable<T> An which is compared by value, by using . To be used to be used as interface for enumerables in records and other value structures."
  },
  "api/MoreStructures.Utilities.IValueEnumerable-1.html": {
    "href": "api/MoreStructures.Utilities.IValueEnumerable-1.html",
    "title": "Interface IValueEnumerable<T>",
    "keywords": "Interface IValueEnumerable<T> An which is compared by value, by using . To be used to be used as interface for enumerables in records and other value structures. Namespace : MoreStructures.Utilities Assembly : MoreStructures.dll Syntax public interface IValueEnumerable<out T> Type Parameters Name Description T"
  },
  "api/MoreStructures.Utilities.LockValueObject.html": {
    "href": "api/MoreStructures.Utilities.LockValueObject.html",
    "title": "Class LockValueObject",
    "keywords": "Class LockValueObject An empty object with value equality (always true), to be used as lock object in records and other value structures. Inheritance System.Object LockValueObject Implements System.IEquatable < LockValueObject > Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Utilities Assembly : MoreStructures.dll Syntax public class LockValueObject : IEquatable<LockValueObject> Remarks Since all instances are empty, and equality is done by value, always returns true , when the provided object is of type , and always returns the same value (0). Examples record ARecord() { private readonly LockValueObject _lockObject = new LockValueObject(); private void AMethod() { ... lock (_lockObject) { ... } ... } } Implements System.IEquatable<T>"
  },
  "api/MoreStructures.Utilities.StringIncludingTerminatorComparer.html": {
    "href": "api/MoreStructures.Utilities.StringIncludingTerminatorComparer.html",
    "title": "Class StringIncludingTerminatorComparer",
    "keywords": "Class StringIncludingTerminatorComparer An implementation of System.Collections.Generic.IComparer<T> for System.String , which compares string taking into account the fact that the string may contain (at any index, not necessarily at then end) a special char, called terminator, which has to be considered smaller than any other char. Inheritance System.Object StringIncludingTerminatorComparer Implements System.Collections.Generic.IComparer < System.String > Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Utilities Assembly : MoreStructures.dll Syntax public class StringIncludingTerminatorComparer : IComparer<string> Properties | Improve this Doc View Source Terminator The character acting as terminator, and which has to be considered smaller than any other char. Declaration public char Terminator { get; } Property Value Type Description System.Char Methods | Improve this Doc View Source Build(Char) Builds a StringIncludingTerminatorComparer with the provided terminator . Caches instances. Declaration public static StringIncludingTerminatorComparer Build(char terminator) Parameters Type Name Description System.Char terminator Returns Type Description StringIncludingTerminatorComparer An instance of StringIncludingTerminatorComparer , new or previously created and cached. | Improve this Doc View Source Compare(String, String) Declaration public int Compare(string x, string y) Parameters Type Name Description System.String x System.String y Returns Type Description System.Int32 Remarks Special rules applied by StringIncludingTerminatorComparer : Implements System.Collections.Generic.IComparer<T>"
  },
  "api/MoreStructures.Utilities.StringUtilities.html": {
    "href": "api/MoreStructures.Utilities.StringUtilities.html",
    "title": "Class StringUtilities",
    "keywords": "Class StringUtilities Generic utilities and extensions for strings. Inheritance System.Object StringUtilities Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Utilities Assembly : MoreStructures.dll Syntax public static class StringUtilities Methods | Improve this Doc View Source LongestPrefixInCommon(IEnumerable<Char>, IEnumerable<Char>) Returns the length of the longest prefix in common between the provided of System.Char . Declaration public static int LongestPrefixInCommon(IEnumerable<char> enumerable1, IEnumerable<char> enumerable2) Parameters Type Name Description IEnumerable < System.Char > enumerable1 IEnumerable < System.Char > enumerable2 Returns Type Description System.Int32 An integer betwen 0 and the length of the shortest of the enumerabbles provided."
  },
  "api/MoreStructures.Utilities.ValueEnumerable-1.html": {
    "href": "api/MoreStructures.Utilities.ValueEnumerable-1.html",
    "title": "Class ValueEnumerable<T>",
    "keywords": "Class ValueEnumerable<T> A IValueEnumerable<T> implementation, wrapping a generic . Inheritance System.Object ValueEnumerable<T> Implements IValueEnumerable <T> IEnumerable <T> Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : MoreStructures.Utilities Assembly : MoreStructures.dll Syntax public class ValueEnumerable<T> : IValueEnumerable<T> Type Parameters Name Description T The type of objects of the wrapped enumerable. Remarks Useful to preserve equality by value in records and other value structures which contain enumerable objects. Constructors | Improve this Doc View Source ValueEnumerable(IEnumerable<T>) Builds a ValueEnumerable<T> around the provided enumerable . Declaration public ValueEnumerable(IEnumerable<T> enumerable) Parameters Type Name Description System.Collections.IEnumerable <T> enumerable The enumerable to wrap. Methods | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) Remarks In the specific case, equality is based on the of the wrapped objects. | Improve this Doc View Source GetEnumerator() Declaration public IEnumerator<T> GetEnumerator() Returns Type Description System.Collections.IEnumerator <T> | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() Remarks In the specific case, the hash is calculated as an aggregation of the hash codes of the elements of the wrapped MoreStructures.Utilities.ValueEnumerable`1.Enumerable object. | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Remarks In the specific case, the string calculation is delegated to the wrapped object. Explicit Interface Implementations | Improve this Doc View Source IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator Implements IValueEnumerable<T> IEnumerable<>"
  },
  "api/MoreStructures.Utilities.ValueEnumerableExtensions.html": {
    "href": "api/MoreStructures.Utilities.ValueEnumerableExtensions.html",
    "title": "Class ValueEnumerableExtensions",
    "keywords": "Class ValueEnumerableExtensions Extension methods for IValueEnumerable<T> . Inheritance System.Object ValueEnumerableExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Utilities Assembly : MoreStructures.dll Syntax public static class ValueEnumerableExtensions Methods | Improve this Doc View Source AsValue<T>(IEnumerable<T>) Wraps the provided enumerable into a IValueEnumerable<T> , which uses to check for equality. Declaration public static IValueEnumerable<T> AsValue<T>(this IEnumerable<T> enumerable) Parameters Type Name Description IEnumerable <T> enumerable The enumerable to wrap. Returns Type Description IValueEnumerable <T> A IValueEnumerable<T> wrapping the provided . Type Parameters Name Description T The type of objects of enumerable . Remarks Useful to preserve equality by value in records and other value structures which contain enumerable objects."
  },
  "api/MoreStructures.Utilities.ValueReadOnlyCollection-1.html": {
    "href": "api/MoreStructures.Utilities.ValueReadOnlyCollection-1.html",
    "title": "Class ValueReadOnlyCollection<T>",
    "keywords": "Class ValueReadOnlyCollection<T> A readonly immutable generic collection of non-null items which performs equality by value. Inheritance System.Object System.Collections.ObjectModel.ReadOnlyCollection <T> ValueReadOnlyCollection<T> Implements System.Collections.Generic.IList <T> System.Collections.Generic.ICollection <T> System.Collections.Generic.IReadOnlyList <T> System.Collections.Generic.IReadOnlyCollection <T> System.Collections.Generic.IEnumerable <T> System.Collections.IList System.Collections.ICollection System.Collections.IEnumerable Inherited Members System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.Generic.IList<T>.get_Item(System.Int32) System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.Generic.IList<T>.set_Item(System.Int32, T) System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.IList.get_Item(System.Int32) System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.IList.set_Item(System.Int32, System.Object) System.Collections.ObjectModel.ReadOnlyCollection<T>.Contains(T) System.Collections.ObjectModel.ReadOnlyCollection<T>.CopyTo(T[], System.Int32) System.Collections.ObjectModel.ReadOnlyCollection<T>.GetEnumerator() System.Collections.ObjectModel.ReadOnlyCollection<T>.IndexOf(T) System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.Generic.ICollection<T>.Add(T) System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.Generic.ICollection<T>.Clear() System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.Generic.ICollection<T>.Remove(T) System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.Generic.IList<T>.Insert(System.Int32, T) System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.Generic.IList<T>.RemoveAt(System.Int32) System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.ICollection.CopyTo(System.Array, System.Int32) System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.IEnumerable.GetEnumerator() System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.IList.Add(System.Object) System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.IList.Clear() System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.IList.Contains(System.Object) System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.IList.IndexOf(System.Object) System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.IList.Insert(System.Int32, System.Object) System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.IList.Remove(System.Object) System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.IList.RemoveAt(System.Int32) System.Collections.ObjectModel.ReadOnlyCollection<T>.Count System.Collections.ObjectModel.ReadOnlyCollection<T>.Item[System.Int32] System.Collections.ObjectModel.ReadOnlyCollection<T>.Items System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.Generic.ICollection<T>.IsReadOnly System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.Generic.IList<T>.Item[System.Int32] System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.ICollection.IsSynchronized System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.ICollection.SyncRoot System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.IList.IsFixedSize System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.IList.IsReadOnly System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.IList.Item[System.Int32] System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : MoreStructures.Utilities Assembly : MoreStructures.dll Syntax public class ValueReadOnlyCollection<T> : ReadOnlyCollection<T>, IList<T>, ICollection<T>, IReadOnlyList<T>, IReadOnlyCollection<T>, IEnumerable<T>, IList, ICollection, IEnumerable Type Parameters Name Description T The type of elements in the collection. Remarks Immutability can be guaranteed by cloning the provided enumerable and exposing a readonly view of it, but only if immutability of underlying T is provided, for example, by using immutable records. Constructors | Improve this Doc View Source ValueReadOnlyCollection(IEnumerable<T>) Creates value readonly collection out of the provided enumerable, and independent from it. Declaration public ValueReadOnlyCollection(IEnumerable<T> enumerable) Parameters Type Name Description IEnumerable <T> enumerable The enumerable to be used to build the readonly collection. Methods | Improve this Doc View Source Equals(Object) Equality is calculated by value, i.e. on the collections items directly. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean True if the specified object is equal to the current collection by value; otherwise, false. Overrides System.Object.Equals(System.Object) | Improve this Doc View Source GetHashCode() The hash code is calculated by value, as an aggregate of the hash codes of its items. Declaration public override int GetHashCode() Returns Type Description System.Int32 A 32-bit signed integer hash code. Overrides System.Object.GetHashCode() | Improve this Doc View Source ToString() Format: \"[v1, v2, ...]\". Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Operators | Improve this Doc View Source Equality(ValueReadOnlyCollection<T>, ValueReadOnlyCollection<T>) Compare the two provided value read-only collections for equality by value. Declaration public static bool operator ==(ValueReadOnlyCollection<T> left, ValueReadOnlyCollection<T> right) Parameters Type Name Description ValueReadOnlyCollection <T> left The first term of comparison. ValueReadOnlyCollection <T> right The second term of comparison. Returns Type Description System.Boolean True if the two collections are equal by their items, false otherwise. | Improve this Doc View Source Inequality(ValueReadOnlyCollection<T>, ValueReadOnlyCollection<T>) Compare the two provided value read-only collections for inequality by value. Declaration public static bool operator !=(ValueReadOnlyCollection<T> left, ValueReadOnlyCollection<T> right) Parameters Type Name Description ValueReadOnlyCollection <T> left The first term of comparison. ValueReadOnlyCollection <T> right The second term of comparison. Returns Type Description System.Boolean True if the two collections are different by their items, false otherwise. Implements System.Collections.Generic.IList<T> System.Collections.Generic.ICollection<T> System.Collections.Generic.IReadOnlyList<T> System.Collections.Generic.IReadOnlyCollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IList System.Collections.ICollection System.Collections.IEnumerable"
  },
  "api/MoreStructures.Utilities.ValueReadOnlyCollectionsExtensions.html": {
    "href": "api/MoreStructures.Utilities.ValueReadOnlyCollectionsExtensions.html",
    "title": "Class ValueReadOnlyCollectionsExtensions",
    "keywords": "Class ValueReadOnlyCollectionsExtensions Extension methods for value readonly collections defined in MoreStructures.Utilities . Inheritance System.Object ValueReadOnlyCollectionsExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Utilities Assembly : MoreStructures.dll Syntax public static class ValueReadOnlyCollectionsExtensions Methods | Improve this Doc View Source ToValueReadOnlyCollection<T>(IEnumerable<T>) Builds a ValueReadOnlyCollection<T> out of the provided dictionary. Declaration public static ValueReadOnlyCollection<T> ToValueReadOnlyCollection<T>(this IEnumerable<T> enumerable) Parameters Type Name Description IEnumerable <T> enumerable Returns Type Description ValueReadOnlyCollection <T> An instance of ValueReadOnlyCollection<T> , independent from the provided enumerable. Type Parameters Name Description T | Improve this Doc View Source ToValueReadOnlyDictionary<TKey, TValue>(IDictionary<TKey, TValue>) Builds a ValueReadOnlyDictionary<TKey, TValue> out of the provided dictionary. Declaration public static ValueReadOnlyDictionary<TKey, TValue> ToValueReadOnlyDictionary<TKey, TValue>(this IDictionary<TKey, TValue> dictionary) Parameters Type Name Description IDictionary <TKey, TValue> dictionary Returns Type Description ValueReadOnlyDictionary <TKey, TValue> An instance of ValueReadOnlyDictionary<TKey, TValue> , independent from the provided dictionary. Type Parameters Name Description TKey TValue | Improve this Doc View Source ToValueReadOnlyDictionary<TKey, TValue>(IEnumerable<KeyValuePair<TKey, TValue>>) Builds a ValueReadOnlyDictionary<TKey, TValue> out of the provided enumerable of entries. Declaration public static ValueReadOnlyDictionary<TKey, TValue> ToValueReadOnlyDictionary<TKey, TValue>(this IEnumerable<KeyValuePair<TKey, TValue>> entries) Parameters Type Name Description IEnumerable < KeyValuePair <TKey, TValue>> entries Returns Type Description ValueReadOnlyDictionary <TKey, TValue> An instance of ValueReadOnlyDictionary<TKey, TValue> , independent from the provided enumerable of entries. Type Parameters Name Description TKey TValue"
  },
  "api/MoreStructures.Utilities.ValueReadOnlyDictionary-2.html": {
    "href": "api/MoreStructures.Utilities.ValueReadOnlyDictionary-2.html",
    "title": "Class ValueReadOnlyDictionary<TKey, TValue>",
    "keywords": "Class ValueReadOnlyDictionary<TKey, TValue> A readonly immutable generic dictionary of non-null keys and values which performs equality by value. Inheritance System.Object System.Collections.ObjectModel.ReadOnlyDictionary <TKey, TValue> ValueReadOnlyDictionary<TKey, TValue> Implements System.Collections.Generic.IDictionary <TKey, TValue> System.Collections.Generic.ICollection < System.Collections.Generic.KeyValuePair <TKey, TValue>> System.Collections.Generic.IReadOnlyDictionary <TKey, TValue> System.Collections.Generic.IReadOnlyCollection < System.Collections.Generic.KeyValuePair <TKey, TValue>> System.Collections.Generic.IEnumerable < System.Collections.Generic.KeyValuePair <TKey, TValue>> System.Collections.IDictionary System.Collections.ICollection System.Collections.IEnumerable Inherited Members System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.System.Collections.Generic.IDictionary<TKey, TValue>.get_Item(TKey) System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.System.Collections.Generic.IDictionary<TKey, TValue>.set_Item(TKey, TValue) System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.System.Collections.IDictionary.get_Item(System.Object) System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.System.Collections.IDictionary.set_Item(System.Object, System.Object) System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.ContainsKey(TKey) System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.GetEnumerator() System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.Add(System.Collections.Generic.KeyValuePair<TKey, TValue>) System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.Clear() System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.Contains(System.Collections.Generic.KeyValuePair<TKey, TValue>) System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.CopyTo(System.Collections.Generic.KeyValuePair<TKey, TValue>[], System.Int32) System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.Remove(System.Collections.Generic.KeyValuePair<TKey, TValue>) System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.System.Collections.Generic.IDictionary<TKey, TValue>.Add(TKey, TValue) System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.System.Collections.Generic.IDictionary<TKey, TValue>.Remove(TKey) System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.System.Collections.ICollection.CopyTo(System.Array, System.Int32) System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.System.Collections.IDictionary.Add(System.Object, System.Object) System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.System.Collections.IDictionary.Clear() System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.System.Collections.IDictionary.Contains(System.Object) System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.System.Collections.IDictionary.GetEnumerator() System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.System.Collections.IDictionary.Remove(System.Object) System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.System.Collections.IEnumerable.GetEnumerator() System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.TryGetValue(TKey, TValue) System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.Count System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.Dictionary System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.Item[TKey] System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.Keys System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.IsReadOnly System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.System.Collections.Generic.IDictionary<TKey, TValue>.Item[TKey] System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.System.Collections.Generic.IDictionary<TKey, TValue>.Keys System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.System.Collections.Generic.IDictionary<TKey, TValue>.Values System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>.Keys System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>.Values System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.System.Collections.ICollection.IsSynchronized System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.System.Collections.ICollection.SyncRoot System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.System.Collections.IDictionary.IsFixedSize System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.System.Collections.IDictionary.IsReadOnly System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.System.Collections.IDictionary.Item[System.Object] System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.System.Collections.IDictionary.Keys System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.System.Collections.IDictionary.Values System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.Values System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : MoreStructures.Utilities Assembly : MoreStructures.dll Syntax public class ValueReadOnlyDictionary<TKey, TValue> : ReadOnlyDictionary<TKey, TValue>, IDictionary<TKey, TValue>, ICollection<KeyValuePair<TKey, TValue>>, IReadOnlyDictionary<TKey, TValue>, IReadOnlyCollection<KeyValuePair<TKey, TValue>>, IEnumerable<KeyValuePair<TKey, TValue>>, IDictionary, ICollection, IEnumerable Type Parameters Name Description TKey The type of keys in the dictionary. TValue The type of values in the dictionary. Remarks Immutability can be guaranteed by cloning the provided dictionary and exposing a readonly view of it, but only if immutability of underlying TKey and TValue is provided, for example, by using immutable records. Constructors | Improve this Doc View Source ValueReadOnlyDictionary(IDictionary<TKey, TValue>) Creates value readonly dictionary out of the provided dictionary, and independent from it. Declaration public ValueReadOnlyDictionary(IDictionary<TKey, TValue> dictionary) Parameters Type Name Description IDictionary <TKey, TValue> dictionary The dictionary to be used to build the readonly dictionary. | Improve this Doc View Source ValueReadOnlyDictionary(IEnumerable<KeyValuePair<TKey, TValue>>) Creates value readonly dictionary out of the provided entries, and independent from the provided enumerable of them. Declaration public ValueReadOnlyDictionary(IEnumerable<KeyValuePair<TKey, TValue>> entries) Parameters Type Name Description IEnumerable < KeyValuePair <TKey, TValue>> entries The enumerable of entries to be used to build the readonly dictionary. Methods | Improve this Doc View Source Equals(Object) Equality is calculated by value, i.e. on the dictionary key-value pairs directly. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean True if the specified object is equal to the current dictionary by value; otherwise, false. Two dictionaries are considered equal by value if they have the same set of keys and the value associated with each of the key by the two dictionaries are equal with each other. Overrides System.Object.Equals(System.Object) | Improve this Doc View Source GetHashCode() The hash code is calculated by value, as an aggregate of the hash codes of its key value pairs. Declaration public override int GetHashCode() Returns Type Description System.Int32 A 32-bit signed integer hash code. Overrides System.Object.GetHashCode() | Improve this Doc View Source ToString() Format: \"{[k1] = v1, [k2] = v2, ...}\". Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Operators | Improve this Doc View Source Equality(ValueReadOnlyDictionary<TKey, TValue>, ValueReadOnlyDictionary<TKey, TValue>) Compare the two provided value read-only dictionaries for equality by value. Declaration public static bool operator ==(ValueReadOnlyDictionary<TKey, TValue> left, ValueReadOnlyDictionary<TKey, TValue> right) Parameters Type Name Description ValueReadOnlyDictionary <TKey, TValue> left The first term of comparison. ValueReadOnlyDictionary <TKey, TValue> right The second term of comparison. Returns Type Description System.Boolean True if the two dictionaries are equal by their items, false otherwise. | Improve this Doc View Source Inequality(ValueReadOnlyDictionary<TKey, TValue>, ValueReadOnlyDictionary<TKey, TValue>) Compare the two provided value read-only dictionaries for inequality by value. Declaration public static bool operator !=(ValueReadOnlyDictionary<TKey, TValue> left, ValueReadOnlyDictionary<TKey, TValue> right) Parameters Type Name Description ValueReadOnlyDictionary <TKey, TValue> left The first term of comparison. ValueReadOnlyDictionary <TKey, TValue> right The second term of comparison. Returns Type Description System.Boolean True if the two dictionaries are different by their items, false otherwise. Implements System.Collections.Generic.IDictionary<TKey, TValue> System.Collections.Generic.ICollection<T> System.Collections.Generic.IReadOnlyDictionary<TKey, TValue> System.Collections.Generic.IReadOnlyCollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IDictionary System.Collections.ICollection System.Collections.IEnumerable"
  },
  "api/MoreStructures.VirtuallyRotatedTextWithTerminator.html": {
    "href": "api/MoreStructures.VirtuallyRotatedTextWithTerminator.html",
    "title": "Class VirtuallyRotatedTextWithTerminator",
    "keywords": "Class VirtuallyRotatedTextWithTerminator A text string with a terminator character which has been rotated leftwards or rightwards, of a number of positions (0 included). Inheritance System.Object VirtuallyRotatedTextWithTerminator Implements IValueEnumerable < System.Char > IEnumerable < System.Char > IComparable < VirtuallyRotatedTextWithTerminator > System.IEquatable < VirtuallyRotatedTextWithTerminator > Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures Assembly : MoreStructures.dll Syntax public class VirtuallyRotatedTextWithTerminator : IValueEnumerable<char>, IEquatable<VirtuallyRotatedTextWithTerminator> Remarks A virtually rotated terminator-terminated text is required by Burrows-Wheeler Transform construction, when the length of the text is too high to build the Burrows-Wheeler Matrix, which would have n^2 elements. Constructors | Improve this Doc View Source VirtuallyRotatedTextWithTerminator(RotatedTextWithTerminator, Int32) A text string with a terminator character which has been rotated leftwards or rightwards, of a number of positions (0 included). Declaration public VirtuallyRotatedTextWithTerminator(RotatedTextWithTerminator Underlying, int Rotation) Parameters Type Name Description RotatedTextWithTerminator Underlying The TextWithTerminator instance which has been rotated. System.Int32 Rotation The number of characters to rotate: positive = rightwards, negative = leftwards. Remarks A virtually rotated terminator-terminated text is required by Burrows-Wheeler Transform construction, when the length of the text is too high to build the Burrows-Wheeler Matrix, which would have n^2 elements. Properties | Improve this Doc View Source Item[Index] Select a part of Underlying by the provided index (either w.r.t. the start or to the end of the text), applying the Rotation . Treat index as circular, over modulo the length of Underlying . Declaration public char this[Index index] { get; } Parameters Type Name Description Index index The index applied to the underlying string. Property Value Type Description System.Char A char containing the selected part. | Improve this Doc View Source Rotation Declaration public int Rotation { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source Underlying Declaration public RotatedTextWithTerminator Underlying { get; set; } Property Value Type Description RotatedTextWithTerminator Methods | Improve this Doc View Source CompareTo(VirtuallyRotatedTextWithTerminator) Declaration public int CompareTo(VirtuallyRotatedTextWithTerminator other) Parameters Type Name Description VirtuallyRotatedTextWithTerminator other Returns Type Description System.Int32 | Improve this Doc View Source GetEnumerator() Declaration public IEnumerator<char> GetEnumerator() Returns Type Description IEnumerator < System.Char > Explicit Interface Implementations | Improve this Doc View Source IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator Implements IValueEnumerable<T> IEnumerable<> IComparable<> System.IEquatable<T>"
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "",
    "keywords": "Sorry, no articles for the time being..."
  },
  "index.html": {
    "href": "index.html",
    "title": "More Structures .NET",
    "keywords": "More Structures .NET More Structure .NET is a OS-agnostic library written in .NET6 and C# 10, targeting Any CPU. API Documentation The API Documentation, generated from XML documentation comments , and compiled into a navigable website via DocFX , is available here . Prerequisites Windows, Linux or macOS Having .NET6 or later installed check here for supported OS, macOS releases and Linux distributions, dependencies and installation instructions. You can check whether and which .NET is installed in your system by running the following command dotnet --list-sdks dotnet --list-runtimes Build The library can be built on Windows, Linux and macOS. To build a Release version of the library, run the following commands in the directory containing MoreStructures.sln : dotnet restore dotnet build --no-restore --configuration Release To build a Debug version of the library, run the following commands in the directory containing MoreStructures.sln : dotnet restore dotnet build --no-restore --configuration Debug Test To run unit tests, after having built the project, run the following command in the directory containing MoreStructures.sln : dotnet test --no-build --verbosity normal --configuration Debug Dependencies The library is 100% C# and .NET Managed code, with no OS dependencies and with minimal nuget external dependencies, listed below. MoreLINQ More Structures depends on MoreLINQ, a battle-tested library used for many typical LINQ operations which are not out of the box in .NET. Visit https://morelinq.github.io/ for further information."
  }
}