{
  "api/index.html": {
    "href": "api/index.html",
    "title": "More Structures .NET API Documentation",
    "keywords": "More Structures .NET API Documentation This is the entrypoint of the .NET API documentation of More Structures. More Structures provides: mostly basic, and some more advanced, data structures such as Trees, Tries, Burrows-Wheeler Transform and Matrix wrappers etc. implementation of well-known algorithms running on them, such as Suffix Trie and Tree construction, Hukkonen algorithm, Burrows-Wheeler Transform pattern matching, etc. Functionalities provided Burrows-Wheeler Transform and Matrix : builders, inversion, pattern matching Recursively Defined Trees : descendants counting, stringification Lists : binary search Suffix Tries : builders, pattern matching, conversion into trees Suffix Trees : builders, pattern matching, conversion into tries, Hukkonen algorithm for linear time building Design aspects The library is conceived with a few key aspects in mind: type-safety immutability value-based semantics performance 100% statement and condition coverage extensive auto-generated documentation warnings as errors Type-safety All concepts have wrappers around standard types provided by the framework, enforcing data structure-specific constraints: For example, all terminator-terminated strings used by Suffix Trees and Tries are mapped to a specific record named TextWithTerminator , which ensures that the string is properly formed. Similarly, all cyclic rotations of a text are wrapped into a RotatedTextWithTerminator . This approch allows to avoid in most cases dangerous casting operations, sometimes leading to runtime errors. Type-safety is preserved by generic constraints whenever possible. For example, by binding together interfaces of different objects of the same data structure by some variants of the Curiously recurring template pattern : public interface IRecImmDictIndexedTreeEdge<TEdge, TNode> where TEdge : IRecImmDictIndexedTreeEdge<TEdge, TNode> where TNode : IRecImmDictIndexedTreeNode<TEdge, TNode> { } public interface IRecImmDictIndexedTreeNode<TEdge, TNode> where TEdge : IRecImmDictIndexedTreeEdge<TEdge, TNode> where TNode : IRecImmDictIndexedTreeNode<TEdge, TNode> { IDictionary<TEdge, TNode> Children { get; } } The notation can be heavy at times, especially when defining new data structures implementing such interfaces. public record SuffixTreeEdge(int Start, int Length) : ISuffixStructureEdge<SuffixTreeEdge, SuffixTreeNode>, IComparable<SuffixTreeEdge> { ... } public abstract record SuffixTreeNode(IDictionary<SuffixTreeEdge, SuffixTreeNode> Children, int? Start) : ISuffixStructureNode<SuffixTreeEdge, SuffixTreeNode> { ... } However, the advantages of type-safety more often than not outrun the disadvantages, keeping data structures coherent and predictable at compile time. Another typical source of runtime errors are null reference exceptions. These are avoided by: requiring use of nullable reference types , introduced in C# 8, everywhere in the project; limiting to the maximum extent possible the use of null-forgiving operator ; avoiding the semantic abuse of null . Immutability Whenever possible, structures are kept immutable, meaning that, whenever possible: fields are made readonly , and either assigned in-line or in the constructor; properties are made either { get; } or { get; init; } , and either assigned in-line or in the constructor; methods don't change object state; complex object initialization which may require multiple steps and intermediate incoherent states are externalized to a Builder object. Value-based semantics C# 9 introduced records which are classes or struct with value-based equality . This library makes extensive use of such construct, especially when wrapping other objects, in order to give them a domain-specific semantics: public record TextWithTerminator( IEnumerable<char> Text, char Terminator = TextWithTerminator.DefaultTerminator, bool ValidateInput = true) : IValueEnumerable<char> ... public record BWTransform(TextWithTerminator Text, RotatedTextWithTerminator Content) ... public record BWMatrix(TextWithTerminator Text, IList<string> Content) ... public sealed record CountTreeEdge<TEdge, TNode>(TEdge WrappedEdge) : IRecImmDictIndexedTreeEdge<CountTreeEdge<TEdge, TNode>, CountTreeNode<TEdge, TNode>> where TEdge : IRecImmDictIndexedTreeEdge<TEdge, TNode> where TNode : IRecImmDictIndexedTreeNode<TEdge, TNode> ... Performance While type soundness has the priority in the design of this library, performance is measured and optimized. Due to lack of proper tail-recurse optimization in the .NET runtime, all operations on deep recursive structures are implemented in at least two variants: a fully recursive, typically functional fashion, where no mutation of any type (not even local) happens; an iterative, Stack or Queue based, where some local mutations are allowed; sometimes the two approaches are combined. 100% statement and condition coverage The code is currently covered by tests in its entirety. There is mostly a 1-to-1 mapping between every public class and method, and their corresponding test class and method in the MoreStructures.Test project. Every folder under the MoreStructure project, containing source code, has its counterpart under MoreStructure.Tests ; Most public method MethodX of public class MoreStructures.Package.ClassA have a MethodX_Aspect unit test, defined under the class MoreStructures.Tests.Package.ClassATests . Tests are a great source of documentation, showing working and reproducible examples of how to use this library. When looking for directions about how to use a data structure or invoke an algorithm, it's highly recommended to also have a look at unit tests covering that functionality. Extensive auto-generated documentation All public members and their parameters and generic types are documented. Warnings as errors All warnings according to the Latest .NET analyzer are treated as errors. Coding style File Scoped Namespaces are encouraged, as they reduce the levels of nesting, making the code more readable. They also promote the use of a single namespace per file, which is strongly encouraged."
  },
  "api/MoreStructures.BurrowsWheelerTransform.Builders.html": {
    "href": "api/MoreStructures.BurrowsWheelerTransform.Builders.html",
    "title": "Namespace MoreStructures.BurrowsWheelerTransform.Builders",
    "keywords": "Namespace MoreStructures.BurrowsWheelerTransform.Builders Classes LastFirstPropertyBasedBuilder An extension of NaiveBuilder which takes advantange of the last-first property to reduce the complexity of InvertTransform(RotatedTextWithTerminator) . NaiveBuilder This implementation adopts the simplest approach at BWMatrix building, which results in a more than quadratic time and space. BWTransform is calculated via the BWMatrix , therefore same level of Time and Space Complexity. Interfaces IBuilder Builds Burrows-Wheeler objects, such as BWMatrix and BWTransform of the provided TextWithTerminator ."
  },
  "api/MoreStructures.BurrowsWheelerTransform.Builders.IBuilder.html": {
    "href": "api/MoreStructures.BurrowsWheelerTransform.Builders.IBuilder.html",
    "title": "Interface IBuilder",
    "keywords": "Interface IBuilder Builds Burrows-Wheeler objects, such as BWMatrix and BWTransform of the provided TextWithTerminator . Namespace : MoreStructures.BurrowsWheelerTransform.Builders Assembly : MoreStructures.dll Syntax public interface IBuilder Methods | Improve this Doc View Source BuildMatrix(BWTransform) Rebuilds the original BWMatrix from a BWTransform representing the last column of the Burrows-Wheeler Matrix (which is also the Burrows-Wheeler Transform). Declaration BWMatrix BuildMatrix(BWTransform lastBWMColumn) Parameters Type Name Description BWTransform lastBWMColumn The last column of the Burrows-Wheeler Matrix. Returns Type Description BWMatrix The matrix, wrapped into a BWMatrix object. Remarks Because the entire Burrows-Wheeler Matrix is built from the text with an invertible function, and the same happens for the Burrows-Wheeler Transform of the text, it's possible to get back the entire matrix from its last column. | Improve this Doc View Source BuildMatrix(TextWithTerminator) Build a BWMatrix of the provided text, which is a n-ary search tree in which edges coming out of a node are substrings of text which identify edges shared by all paths to leaves, starting from the node. Declaration BWMatrix BuildMatrix(TextWithTerminator text) Parameters Type Name Description TextWithTerminator text The text to build the BWM, with its terminator (required). Returns Type Description BWMatrix The matrix, wrapped into a BWMatrix object. Remarks Examples Code: var builder = ... builder.BuildMatrix(new(\"mississippi\")).Content Result: { \"$mississippi\", \"i$mississipp\", \"ippi$mississ\", \"issippi$miss\", \"ississippi$m\", \"mississippi$\", \"pi$mississip\", \"ppi$mississi\", \"sippi$missis\", \"sissippi$mis\", \"ssippi$missi\", \"ssissippi$mi\", } | Improve this Doc View Source BuildTransform(BWMatrix) Builds the Burrows-Wheeler Transform from the provided BWMatrix . Declaration BWTransform BuildTransform(BWMatrix matrix) Parameters Type Name Description BWMatrix matrix The matrix, whose BWT has to be calculated. Returns Type Description BWTransform The transform, wrapped into a BWTransform object. Remarks | Improve this Doc View Source BuildTransform(TextWithTerminator) Builds the Burrows-Wheeler Transform from the provided TextWithTerminator . Declaration BWTransform BuildTransform(TextWithTerminator text) Parameters Type Name Description TextWithTerminator text The text, whose BWT has to be calculated. Returns Type Description BWTransform The transform, wrapped into a BWTransform object. Remarks | Improve this Doc View Source InvertMatrix(BWMatrix) Rebuilds the original TextWithTerminator from the BWMatrix . Declaration TextWithTerminator InvertMatrix(BWMatrix matrix) Parameters Type Name Description BWMatrix matrix The matrix, whose original text has to be calculated. Returns Type Description TextWithTerminator The text which corresponds to the provided matrix. | Improve this Doc View Source InvertTransform(RotatedTextWithTerminator) Rebuilds the original TextWithTerminator from a RotatedTextWithTerminator representing the last column of the Burrows-Wheeler Matrix (which is also the Burrows-Wheeler Transform). Declaration TextWithTerminator InvertTransform(RotatedTextWithTerminator lastBWMColumn) Parameters Type Name Description RotatedTextWithTerminator lastBWMColumn The last column of the Burrows-Wheeler Matrix. Returns Type Description TextWithTerminator The text which corresponds to the provided text which produced a BWM whose last column is the one provided. Remarks REQUIREMENT lastBWMColumn requires a terminator to be specified in order to correctly compare strings, since the terminator should always be considered smaller than any other char. ALGORITHM Multiple strategies for inversion are possible: via n-mers construction, via last-first property, ... Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.BurrowsWheelerTransform.Builders.LastFirstFinders.BinarySearchFinder.html": {
    "href": "api/MoreStructures.BurrowsWheelerTransform.Builders.LastFirstFinders.BinarySearchFinder.html",
    "title": "Class BinarySearchFinder",
    "keywords": "Class BinarySearchFinder A NaiveFinder refinement which iterates over BWT and uses binary search on SortedBWT , taking advantage of the fact that it is sorted. Inheritance System.Object NaiveFinder BinarySearchFinder PrecomputedFinder Implements ILastFirstFinder Inherited Members NaiveFinder.CharComparer NaiveFinder.BWT NaiveFinder.SortedBWT NaiveFinder.FindIndexOfNthOccurrenceInBWT(Int32, Int32) NaiveFinder.FindOccurrenceRankOfCharInBWT(Int32) NaiveFinder.LastToFirst(Int32) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.BurrowsWheelerTransform.Builders.LastFirstFinders Assembly : MoreStructures.dll Syntax public class BinarySearchFinder : NaiveFinder, ILastFirstFinder Remarks COMPLEXITY Search over BWT has Time Complexity = O(n), as it is not sorted and there's nothing better than a linear scan without precomputing additional structures helping the search. Search over SortedBWT has Time Complexity O(log(n)), as it is sorted and binary search can be applied. Space Complexity = O(1) for both search operations, as no additional structure is precomputed and/or stored. Constructors | Improve this Doc View Source BinarySearchFinder(RotatedTextWithTerminator, BWTransform.SortStrategy) Declaration public BinarySearchFinder(RotatedTextWithTerminator lastBWMColumn, BWTransform.SortStrategy bwtSorter) Parameters Type Name Description RotatedTextWithTerminator lastBWMColumn BWTransform.SortStrategy bwtSorter Remarks | Improve this Doc View Source BinarySearchFinder(RotatedTextWithTerminator, RotatedTextWithTerminator) Declaration public BinarySearchFinder(RotatedTextWithTerminator lastBWMColumn, RotatedTextWithTerminator firstBWMColumn) Parameters Type Name Description RotatedTextWithTerminator lastBWMColumn RotatedTextWithTerminator firstBWMColumn Remarks Properties | Improve this Doc View Source OrderedAscListSearch The ISearch implementation to be used when searching for items in lists sorted in ascending order. Declaration protected static ISearch OrderedAscListSearch { get; } Property Value Type Description ISearch Methods | Improve this Doc View Source FindIndexOfNthOccurrenceInSortedBWT(Int32, Int32) Declaration public override int FindIndexOfNthOccurrenceInSortedBWT(int indexOfCharInBWT, int occurrenceRank) Parameters Type Name Description System.Int32 indexOfCharInBWT System.Int32 occurrenceRank Returns Type Description System.Int32 Overrides NaiveFinder.FindIndexOfNthOccurrenceInSortedBWT(Int32, Int32) Remarks This implementation takes advantage of the fact that SortedBWT is sorted. Time Complexity = O(log(n)). Space Complexity = O(1). | Improve this Doc View Source FindOccurrenceRankOfCharInSortedBWT(Int32) Declaration public override int FindOccurrenceRankOfCharInSortedBWT(int indexOfCharInSortedBWT) Parameters Type Name Description System.Int32 indexOfCharInSortedBWT Returns Type Description System.Int32 Overrides NaiveFinder.FindOccurrenceRankOfCharInSortedBWT(Int32) Remarks This implementation takes advantage of the fact that SortedBWT is sorted. Time Complexity = O(log(n)). Space Complexity = O(1). Implements ILastFirstFinder Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.BurrowsWheelerTransform.Builders.LastFirstFinders.html": {
    "href": "api/MoreStructures.BurrowsWheelerTransform.Builders.LastFirstFinders.html",
    "title": "Namespace MoreStructures.BurrowsWheelerTransform.Builders.LastFirstFinders",
    "keywords": "Namespace MoreStructures.BurrowsWheelerTransform.Builders.LastFirstFinders Classes BinarySearchFinder A NaiveFinder refinement which iterates over BWT and uses binary search on SortedBWT , taking advantage of the fact that it is sorted. NaiveFinder A ILastFirstFinder implementation which just iterates over BWT and its sorted version SortedBWT every time. Each operation has Time Complexity = O(n) and Space Complexity = O(1), since no additional structure is precomputed and/or stored. PrecomputedFinder A BinarySearchFinder refinement which precalculate an hash-map of all the positions by each char, for both BWT and its sorted version, which takes ~ 2 * n space and makes calls to FindIndexOfNthOccurrenceInBWT(Int32, Int32) and FindIndexOfNthOccurrenceInSortedBWT(Int32, Int32) executed in constant time. Interfaces ILastFirstFinder A stategy used by a IBuilder to find chars in BWT and in its sorted version SortedBWT ."
  },
  "api/MoreStructures.BurrowsWheelerTransform.Builders.LastFirstFinders.ILastFirstFinder.html": {
    "href": "api/MoreStructures.BurrowsWheelerTransform.Builders.LastFirstFinders.ILastFirstFinder.html",
    "title": "Interface ILastFirstFinder",
    "keywords": "Interface ILastFirstFinder A stategy used by a IBuilder to find chars in BWT and in its sorted version SortedBWT . Namespace : MoreStructures.BurrowsWheelerTransform.Builders.LastFirstFinders Assembly : MoreStructures.dll Syntax public interface ILastFirstFinder Properties | Improve this Doc View Source BWT The Burrows-Wheeler Transform. Also, the last column of the Burrows-Wheeler Matrix. Declaration RotatedTextWithTerminator BWT { get; } Property Value Type Description RotatedTextWithTerminator | Improve this Doc View Source CharComparer The used to compare chars of BWT or SortedBWT . Declaration IComparer<char> CharComparer { get; } Property Value Type Description IComparer < System.Char > Remarks The of System.Char cannot be used because the terminator in BWT and SortedBWT has to be treated in a special way ( Terminator is always to be considered smaller than any other char). | Improve this Doc View Source SortedBWT The sorted version of the Burrows-Wheeler Transform. Also, the first column of the Burrows-Wheeler Matrix. Declaration RotatedTextWithTerminator SortedBWT { get; } Property Value Type Description RotatedTextWithTerminator Methods | Improve this Doc View Source FindIndexOfNthOccurrenceInBWT(Int32, Int32) Find the index of the n-th occurrence (0-based) in BWT , of the char in BWT at the provided index indexOfCharInBWT . Declaration int FindIndexOfNthOccurrenceInBWT(int indexOfCharInBWT, int occurrenceRank) Parameters Type Name Description System.Int32 indexOfCharInBWT The index of the char in BWT , to find the n-th occurrence of, again in BWT . System.Int32 occurrenceRank The 0-based occurrence rank to find. 0 = 1st occurrence. Returns Type Description System.Int32 The index of the n-th occurrence of the char in BWT at indexOfCharInBWT . | Improve this Doc View Source FindIndexOfNthOccurrenceInSortedBWT(Int32, Int32) Find the index of the n-th occurrence (0-based) in SortedBWT , of the char in BWT at the provided index indexOfCharInBWT . Declaration int FindIndexOfNthOccurrenceInSortedBWT(int indexOfCharInBWT, int occurrenceRank) Parameters Type Name Description System.Int32 indexOfCharInBWT The index of the char in BWT , to find the n-th occurrence of, in SortedBWT . System.Int32 occurrenceRank The 0-based occurrence rank to find. 0 = 1st occurrence. Returns Type Description System.Int32 The index in SortedBWT of the n-th occurrence of the char in BWT at index indexOfCharInBWT . | Improve this Doc View Source FindOccurrenceRankOfCharInBWT(Int32) Find the occurrence rank in BWT of the char in BWT at the provided index indexOfCharInBWT . Declaration int FindOccurrenceRankOfCharInBWT(int indexOfCharInBWT) Parameters Type Name Description System.Int32 indexOfCharInBWT The index of the char in BWT . Returns Type Description System.Int32 The 0-based occurrence rank of the char at index indexOfCharInBWT . | Improve this Doc View Source FindOccurrenceRankOfCharInSortedBWT(Int32) Find the occurrence rank in SortedBWT of the char in SortedBWT at the provided index indexOfCharInSortedBWT . Declaration int FindOccurrenceRankOfCharInSortedBWT(int indexOfCharInSortedBWT) Parameters Type Name Description System.Int32 indexOfCharInSortedBWT The index of the char in SortedBWT . Returns Type Description System.Int32 The 0-based occurrence rank of the char at index indexOfCharInSortedBWT . | Improve this Doc View Source LastToFirst(Int32) Given the index of a char in BWT , it finds the index of the corresponding char in the SortedBWT and its occurrence rank. Declaration (int indexInSortedBWT, int occurrenceRank) LastToFirst(int indexOfCharInBWT) Parameters Type Name Description System.Int32 indexOfCharInBWT The index (0-based) of the char in BWT . Returns Type Description System.ValueTuple < System.Int32 , System.Int32 > The index of the char in the SortedBWT and its occurence rank (0-based). Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.BurrowsWheelerTransform.Builders.LastFirstFinders.NaiveFinder.html": {
    "href": "api/MoreStructures.BurrowsWheelerTransform.Builders.LastFirstFinders.NaiveFinder.html",
    "title": "Class NaiveFinder",
    "keywords": "Class NaiveFinder A ILastFirstFinder implementation which just iterates over BWT and its sorted version SortedBWT every time. Each operation has Time Complexity = O(n) and Space Complexity = O(1), since no additional structure is precomputed and/or stored. Inheritance System.Object NaiveFinder BinarySearchFinder Implements ILastFirstFinder Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.BurrowsWheelerTransform.Builders.LastFirstFinders Assembly : MoreStructures.dll Syntax public class NaiveFinder : ILastFirstFinder Constructors | Improve this Doc View Source NaiveFinder(RotatedTextWithTerminator, BWTransform.SortStrategy) Builds an instance of this finder, for the provided lastBWMColumn , using bwtSorter to calculate SortedBWT from it. Declaration public NaiveFinder(RotatedTextWithTerminator lastBWMColumn, BWTransform.SortStrategy bwtSorter) Parameters Type Name Description RotatedTextWithTerminator lastBWMColumn The last column of the Burrows-Wheeler Matrix. Corresponds to the BWT. BWTransform.SortStrategy bwtSorter A function sorting the provided RotatedTextWithTerminator into a sorted RotatedTextWithTerminator , according to the provided of chars. | Improve this Doc View Source NaiveFinder(RotatedTextWithTerminator, RotatedTextWithTerminator) Builds an instance of this finder, for the provided lastBWMColumn and firstBWMColumn . Because both columns of the BWM are provided, no sorting happens. Declaration public NaiveFinder(RotatedTextWithTerminator lastBWMColumn, RotatedTextWithTerminator firstBWMColumn) Parameters Type Name Description RotatedTextWithTerminator lastBWMColumn The last column of the Burrows-Wheeler Matrix. Corresponds to the BWT . RotatedTextWithTerminator firstBWMColumn The first column of the Burrows-Wheeler Matrix. Corresponds to the SortedBWT . Properties | Improve this Doc View Source BWT The Burrows-Wheeler Transform. Also, the last column of the Burrows-Wheeler Matrix. Declaration public RotatedTextWithTerminator BWT { get; } Property Value Type Description RotatedTextWithTerminator | Improve this Doc View Source CharComparer The used to compare chars of BWT or SortedBWT . Declaration public IComparer<char> CharComparer { get; } Property Value Type Description IComparer < System.Char > Remarks The of System.Char cannot be used because the terminator in BWT and SortedBWT has to be treated in a special way ( Terminator is always to be considered smaller than any other char). | Improve this Doc View Source SortedBWT The sorted version of the Burrows-Wheeler Transform. Also, the first column of the Burrows-Wheeler Matrix. Declaration public RotatedTextWithTerminator SortedBWT { get; } Property Value Type Description RotatedTextWithTerminator Methods | Improve this Doc View Source FindIndexOfNthOccurrenceInBWT(Int32, Int32) Declaration public virtual int FindIndexOfNthOccurrenceInBWT(int indexOfCharInBWT, int occurrenceRank) Parameters Type Name Description System.Int32 indexOfCharInBWT System.Int32 occurrenceRank Returns Type Description System.Int32 Remarks This implementation just iterates over BWT every time. Time Complexity = O(n). Space Complexity = O(1). | Improve this Doc View Source FindIndexOfNthOccurrenceInSortedBWT(Int32, Int32) Declaration public virtual int FindIndexOfNthOccurrenceInSortedBWT(int indexOfCharInBWT, int occurrenceRank) Parameters Type Name Description System.Int32 indexOfCharInBWT System.Int32 occurrenceRank Returns Type Description System.Int32 Remarks This implementation just iterates over SortedBWT every time. Time Complexity = O(n). Space Complexity = O(1). | Improve this Doc View Source FindOccurrenceRankOfCharInBWT(Int32) Declaration public virtual int FindOccurrenceRankOfCharInBWT(int indexOfCharInBWT) Parameters Type Name Description System.Int32 indexOfCharInBWT Returns Type Description System.Int32 Remarks This implementation just iterates over BWT every time. Time Complexity = O(n). Space Complexity = O(1). | Improve this Doc View Source FindOccurrenceRankOfCharInSortedBWT(Int32) Declaration public virtual int FindOccurrenceRankOfCharInSortedBWT(int indexOfCharInSortedBWT) Parameters Type Name Description System.Int32 indexOfCharInSortedBWT Returns Type Description System.Int32 Remarks This implementation just iterates over SortedBWT every time. Time Complexity = O(n). Space Complexity = O(1). | Improve this Doc View Source LastToFirst(Int32) Declaration public virtual (int indexInSortedBWT, int occurrenceRank) LastToFirst(int indexOfCharInBWT) Parameters Type Name Description System.Int32 indexOfCharInBWT Returns Type Description System.ValueTuple < System.Int32 , System.Int32 > Remarks First executes FindOccurrenceRankOfCharInBWT(Int32) , to find the occurrence rank of the char at index indexOfCharInBWT and then uses the last-to-first property to find the corresponding char in SortedBWT by using FindIndexOfNthOccurrenceInSortedBWT(Int32, Int32) . Time and Space Complexity depends on the implementation of FindOccurrenceRankOfCharInBWT(Int32) and FindIndexOfNthOccurrenceInSortedBWT(Int32, Int32) . Implements ILastFirstFinder Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.BurrowsWheelerTransform.Builders.LastFirstFinders.PrecomputedFinder.html": {
    "href": "api/MoreStructures.BurrowsWheelerTransform.Builders.LastFirstFinders.PrecomputedFinder.html",
    "title": "Class PrecomputedFinder",
    "keywords": "Class PrecomputedFinder A BinarySearchFinder refinement which precalculate an hash-map of all the positions by each char, for both BWT and its sorted version, which takes ~ 2 * n space and makes calls to FindIndexOfNthOccurrenceInBWT(Int32, Int32) and FindIndexOfNthOccurrenceInSortedBWT(Int32, Int32) executed in constant time. Inheritance System.Object NaiveFinder BinarySearchFinder PrecomputedFinder Implements ILastFirstFinder Inherited Members BinarySearchFinder.OrderedAscListSearch NaiveFinder.CharComparer NaiveFinder.BWT NaiveFinder.SortedBWT NaiveFinder.LastToFirst(Int32) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.BurrowsWheelerTransform.Builders.LastFirstFinders Assembly : MoreStructures.dll Syntax public class PrecomputedFinder : BinarySearchFinder, ILastFirstFinder Remarks Calls to FindOccurrenceRankOfCharInBWT(Int32) are still executed in O(n / sigma) time, where sigma is the size of the alphabet, or the number of distinct values in the BWT. If sigma is constant w.r.t. n, complexity is still linear. Calls to FindOccurrenceRankOfCharInSortedBWT(Int32) are still executed in O(log(n / sigma)), which is O(log(n)) when sigma is constant w.r.t. n. Constructors | Improve this Doc View Source PrecomputedFinder(RotatedTextWithTerminator, BWTransform.SortStrategy) Declaration public PrecomputedFinder(RotatedTextWithTerminator lastBWMColumn, BWTransform.SortStrategy bwtSorter) Parameters Type Name Description RotatedTextWithTerminator lastBWMColumn BWTransform.SortStrategy bwtSorter Remarks | Improve this Doc View Source PrecomputedFinder(RotatedTextWithTerminator, RotatedTextWithTerminator) Declaration public PrecomputedFinder(RotatedTextWithTerminator lastBWMColumn, RotatedTextWithTerminator firstBWMColumn) Parameters Type Name Description RotatedTextWithTerminator lastBWMColumn RotatedTextWithTerminator firstBWMColumn Remarks Properties | Improve this Doc View Source UnorderedListSearch The ISearch implementation to be used when searching for items in lists not sorted in any order. Declaration protected static ISearch UnorderedListSearch { get; } Property Value Type Description ISearch Methods | Improve this Doc View Source FindIndexOfNthOccurrenceInBWT(Int32, Int32) Declaration public override int FindIndexOfNthOccurrenceInBWT(int indexOfCharInBWT, int occurrenceRank) Parameters Type Name Description System.Int32 indexOfCharInBWT System.Int32 occurrenceRank Returns Type Description System.Int32 Overrides NaiveFinder.FindIndexOfNthOccurrenceInBWT(Int32, Int32) Remarks This implementation uses a precomputed hash-map of all the positions by each char. Time Complexity = O(1). Space Complexity = O(1). | Improve this Doc View Source FindIndexOfNthOccurrenceInSortedBWT(Int32, Int32) Declaration public override int FindIndexOfNthOccurrenceInSortedBWT(int indexOfCharInBWT, int occurrenceRank) Parameters Type Name Description System.Int32 indexOfCharInBWT System.Int32 occurrenceRank Returns Type Description System.Int32 Overrides BinarySearchFinder.FindIndexOfNthOccurrenceInSortedBWT(Int32, Int32) Remarks | Improve this Doc View Source FindOccurrenceRankOfCharInBWT(Int32) Declaration public override int FindOccurrenceRankOfCharInBWT(int indexOfCharInBWT) Parameters Type Name Description System.Int32 indexOfCharInBWT Returns Type Description System.Int32 Overrides NaiveFinder.FindOccurrenceRankOfCharInBWT(Int32) Remarks ALGORITHM This implementation uses a precomputed hash-map of all the positions by each char. However, unlike SortedBWT , BWT is not sorted, so the precomputed list storing all the indexes where the char of BWT at index indexOfCharInBWT appears can be accessed in O(1) but has to be iterated over linearly. Such a list has in average n / sigma elements, where sigma is the number of distinct chars in the text. If sigma is constant, the Time Complexity is O(n). Space Complexity is always O(1), since O(n * sigma) space has already been allocated to host the result of counts and first occurrences precomputation. | Improve this Doc View Source FindOccurrenceRankOfCharInSortedBWT(Int32) Declaration public override int FindOccurrenceRankOfCharInSortedBWT(int indexOfCharInSortedBWT) Parameters Type Name Description System.Int32 indexOfCharInSortedBWT Returns Type Description System.Int32 Overrides BinarySearchFinder.FindOccurrenceRankOfCharInSortedBWT(Int32) Remarks ALGORITHM This implementation uses a precomputed hash-map of all the positions by each char. It also takes advantage of the fact that SortedBWT is sorted, by running a Binary Search on it, which takes logarithmic time over the list of indexes for the char at position indexOfCharInSortedBWT in BWT . Such list has average size = n / sigma, where n = number of chars in SortedBWT and sigma = size of the alphabet of SortedBWT . If sigma is constant, the list has a size O(n). COMPLEXITY Therefore, Time Complexity = O(log(n)) and Space Complexity = O(1). Implements ILastFirstFinder Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.BurrowsWheelerTransform.Builders.LastFirstPropertyBasedBuilder.html": {
    "href": "api/MoreStructures.BurrowsWheelerTransform.Builders.LastFirstPropertyBasedBuilder.html",
    "title": "Class LastFirstPropertyBasedBuilder",
    "keywords": "Class LastFirstPropertyBasedBuilder An extension of NaiveBuilder which takes advantange of the last-first property to reduce the complexity of InvertTransform(RotatedTextWithTerminator) . Inheritance System.Object NaiveBuilder LastFirstPropertyBasedBuilder Implements IBuilder Inherited Members NaiveBuilder.BuildMatrix(TextWithTerminator) NaiveBuilder.BuildMatrix(BWTransform) NaiveBuilder.BuildTransform(BWMatrix) NaiveBuilder.BuildTransform(TextWithTerminator) NaiveBuilder.InvertMatrix(BWMatrix) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.BurrowsWheelerTransform.Builders Assembly : MoreStructures.dll Syntax public class LastFirstPropertyBasedBuilder : NaiveBuilder, IBuilder Remarks A ILastFirstFinder , built by FirstLastFinderBuilder is used to jump between the BWT and its sorted version. Properties | Improve this Doc View Source FirstLastFinderBuilder The strategy by which this builder finds chars in the BWT and its sorted version. Declaration public Func<RotatedTextWithTerminator, ILastFirstFinder> FirstLastFinderBuilder { get; set; } Property Value Type Description Func < RotatedTextWithTerminator , ILastFirstFinder > Methods | Improve this Doc View Source InvertTransform(RotatedTextWithTerminator) Declaration public override TextWithTerminator InvertTransform(RotatedTextWithTerminator lastBWMColumn) Parameters Type Name Description RotatedTextWithTerminator lastBWMColumn Returns Type Description TextWithTerminator Overrides NaiveBuilder.InvertTransform(RotatedTextWithTerminator) Remarks ALGORITHM This implementation inverts the BWT by using the last-first property. - First column of the matrix (sBWT) is just the last column (BWT), sorted. - By last-first property, the 1-st (and only) occurrence of terminator in sBWT at sBWT[0] corresponds to the 1st occurrence of terminator in BWT at BWT[i0]. BWTs[i0] is the 1-st char of the text. - Again by last-first property, the n-th occurrence of c in BWTs at sBWTs[i0] corresponds to the n-th occurrence of c in BWT at BWT[i1]. BWTs[i1] is the 2-st char of the text. - And so on, until BWTs[i(n-1)], the terminator, is reached. COMPLEXITY - Before any iteration, Sorted BWT is computed, taking O(n * log(n)) time, where n is the length of lastBWMColumn . If the alphabet is of constant size sigma, Counting Sort reduces the overall Time Complexity of this step to O(n). - After that the finder may also preallocate other supporting structures, to speed up searches (such the dictionary used in PrecomputedFinder . Although it depends on the specific implementation built by FirstLastFinderBuilder , we may assume this cost to also be linear with n. - From terminator to terminator, there are n top-level iterations. Each iteration takes m1 + m2, where m1 is the cost of FindIndexOfNthOccurrenceInBWT(Int32, Int32) and m2 is the cost of FindOccurrenceRankOfCharInSortedBWT(Int32) . - Finally, the used as accumulator generates the text string. At most O(n). - So total Time Complexity is O(n * (m1 + m2)) and Space Complexity is O(n). Using NaiveFinder , m1 and m2 are both O(n), so Time Complexity is O(n^2). Using BinarySearchFinder , m1 is O(n) and m2 is O(log(n)), so overall Time Complexity is still O(n^2). Using PrecomputedFinder , m1 is O(1), whereas m2 is O(log(n / sigma)) where sigma is the size of the alphabet, so overall Time Complexity is O(n * log(n)) if sigma is constant. Implements IBuilder Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.BurrowsWheelerTransform.Builders.NaiveBuilder.html": {
    "href": "api/MoreStructures.BurrowsWheelerTransform.Builders.NaiveBuilder.html",
    "title": "Class NaiveBuilder",
    "keywords": "Class NaiveBuilder This implementation adopts the simplest approach at BWMatrix building, which results in a more than quadratic time and space. BWTransform is calculated via the BWMatrix , therefore same level of Time and Space Complexity. Inheritance System.Object NaiveBuilder LastFirstPropertyBasedBuilder Implements IBuilder Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.BurrowsWheelerTransform.Builders Assembly : MoreStructures.dll Syntax public class NaiveBuilder : IBuilder Remarks Check specific builder methods, such as BuildMatrix(TextWithTerminator) , for further information about the complexity of each operation. Methods | Improve this Doc View Source BuildMatrix(BWTransform) Rebuilds the original BWMatrix from a BWTransform representing the last column of the Burrows-Wheeler Matrix (which is also the Burrows-Wheeler Transform). Declaration public BWMatrix BuildMatrix(BWTransform lastBWMColumn) Parameters Type Name Description BWTransform lastBWMColumn The last column of the Burrows-Wheeler Matrix. Returns Type Description BWMatrix The matrix, wrapped into a BWMatrix object. Remarks Because the entire Burrows-Wheeler Matrix is built from the text with an invertible function, and the same happens for the Burrows-Wheeler Transform of the text, it's possible to get back the entire matrix from its last column. | Improve this Doc View Source BuildMatrix(TextWithTerminator) Builds Burrows-Wheeler objects, such as BWMatrix and BWTransform of the provided TextWithTerminator . Declaration public virtual BWMatrix BuildMatrix(TextWithTerminator text) Parameters Type Name Description TextWithTerminator text The text to build the BWM, with its terminator (required). Returns Type Description BWMatrix The matrix, wrapped into a BWMatrix object. Remarks COMPLEXITY Since this operation requires computing a n * n matrix, where n is the Length of text , it can be intensive operation, both in time. Time Complexity: - Sorting a large number of strings on a large non-constant alphabet takes n * log(n) * m, where m is the cost of a comparison of two n-sized strings, which is O(n). - Therefore Time Complexity is O(n^2 * log(n)). - If the alphabet can be considered of constant size and comparison between two strings happens in constant time, the complexity is O(n * log(n)). Space Complexity: - The output is a n * n matrix of chars (all cyclic rotations of a n-sized string). - Therefore Space Complexity is O(n^2 * m), when no assumption is made on the size of a char being constant, where m = log(w, M), with w = size of a word in memory and M = size of the alphabet. - If the alphabet can be considered of constant size, the complexity is O(n^2). | Improve this Doc View Source BuildTransform(BWMatrix) Builds the Burrows-Wheeler Transform from the provided BWMatrix . Declaration public virtual BWTransform BuildTransform(BWMatrix matrix) Parameters Type Name Description BWMatrix matrix The matrix, whose BWT has to be calculated. Returns Type Description BWTransform The transform, wrapped into a BWTransform object. Remarks | Improve this Doc View Source BuildTransform(TextWithTerminator) Builds Burrows-Wheeler objects, such as BWMatrix and BWTransform of the provided TextWithTerminator . Declaration public virtual BWTransform BuildTransform(TextWithTerminator text) Parameters Type Name Description TextWithTerminator text The text, whose BWT has to be calculated. Returns Type Description BWTransform The transform, wrapped into a BWTransform object. Remarks COMPLEXITY - Done without constructing the BWMatrix of text , which would requires O(n^2) space. - Instead, n VirtuallyRotatedTextWithTerminator objects are created (one per char of text ), mapping a specific rotation of the original text and taking into account the rotation in its all its char-position dependent functionalities, such as CompareTo(VirtuallyRotatedTextWithTerminator) , GetEnumerator() etc. | Improve this Doc View Source InvertMatrix(BWMatrix) Rebuilds the original TextWithTerminator from the BWMatrix . Declaration public virtual TextWithTerminator InvertMatrix(BWMatrix matrix) Parameters Type Name Description BWMatrix matrix The matrix, whose original text has to be calculated. Returns Type Description TextWithTerminator The text which corresponds to the provided matrix. Remarks - No computation to be done, except for building the string of the TextWithTerminator . - Time Complexity = O(n), Space Complexity = O(n), where n = edge of matrix . | Improve this Doc View Source InvertTransform(RotatedTextWithTerminator) Declaration public virtual TextWithTerminator InvertTransform(RotatedTextWithTerminator lastBWMColumn) Parameters Type Name Description RotatedTextWithTerminator lastBWMColumn Returns Type Description TextWithTerminator Remarks ALGORITHM This implementation inverts the BWT by iteratively building n+1-mers from n-mers. - 1-mers (first column of the matrix) is just the last column (BWT), sorted. That gives a matrix M0 of 1 columns and n rows (where n = length of lastBWMColumn ). - 2-mers are derived from 1-mers, by juxtaposing side-by-side last column (BWT) and M0, sorted. That gives a matrix M1 of 2 columns and n rows. - 3-mers are derived from 2-mers, by juxtaposing side-by-side last column (BWT) and M1, sorted. That gives a matrix M2 of 3 columns and n rows. - And so on, up to (n - 1)-mers and matrix M(n - 2) of n - 1 columns and n rows. - The last column is already known (BWT), so the text can be extracted from the first line: the first char is the separator, the rest is the text without separator. COMPLEXITY - There are n top-level iterations, where n is the length of lastBWMColumn . - Each iteration takes n * log(n) * m time to sort, where m is the length of strings to compare = n. - So total Time Complexity is O(n^3 * log(n)) and Space Complexity is O(n^2). Implements IBuilder Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.BurrowsWheelerTransform.BWMatrix.html": {
    "href": "api/MoreStructures.BurrowsWheelerTransform.BWMatrix.html",
    "title": "Class BWMatrix",
    "keywords": "Class BWMatrix The Burrows-Wheeler Matrix (BWM) of a TextWithTerminator is the square matrix all cyclic rotations of the provided TextWithTerminator , with rows sorted in ascending order and taking into account that Terminator is to be considered smaller than any other char in the text. Inheritance System.Object BWMatrix Implements System.IEquatable < BWMatrix > Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.BurrowsWheelerTransform Assembly : MoreStructures.dll Syntax public class BWMatrix : IEquatable<BWMatrix> Remarks This langword_csharp_record is a typed wrapped of the underlying langword_csharp_IList{string} representing the BWM. It guarantes immutability and strong typing, and also keeps together the Text and its matrix Content , providing BWM-specific functionalities. Constructors | Improve this Doc View Source BWMatrix(TextWithTerminator, IList<String>) The Burrows-Wheeler Matrix (BWM) of a TextWithTerminator is the square matrix all cyclic rotations of the provided TextWithTerminator , with rows sorted in ascending order and taking into account that Terminator is to be considered smaller than any other char in the text. Declaration public BWMatrix(TextWithTerminator Text, IList<string> Content) Parameters Type Name Description TextWithTerminator Text The text, corresponding to the provided BWM. IList < System.String > Content The content of the Burrows-Wheeler Matrix (BWM) of Text . Remarks This langword_csharp_record is a typed wrapped of the underlying langword_csharp_IList{string} representing the BWM. It guarantes immutability and strong typing, and also keeps together the Text and its matrix Content , providing BWM-specific functionalities. Properties | Improve this Doc View Source Content Declaration public IList<string> Content { get; set; } Property Value Type Description IList < System.String > A readonly immutable list of strings, each one containing a row of the matrix, i.e. a string containing a cyclic rotation of Text . Examples Code: new BWTMatrix(new(\"ab\"), new string[] { \"$ab\", \"ab$\", \"b$a\" }).Content Result: { \"$ab\", \"ab$\", \"b$a\", } | Improve this Doc View Source FirstColumn Returns the first column of this BWMatrix . Corresponds to the sorted Text and also to the sorted Transform of this BWMatrix . Declaration public string FirstColumn { get; } Property Value Type Description System.String Remarks Unlike LastColumn and Transform , FirstColumn wouldn't require computation of the Content of this BWMatrix , since the FirstColumn can easily be calculated by sorting the input Text . Examples Code: new BWTMatrix(new(\"mississippi\")).FirstColumn Result: \"$iiiimppssss\" | Improve this Doc View Source LastColumn Returns the last column of this BWMatrix . Corresponds to the Content of the Transform of this BWMatrix . Declaration public string LastColumn { get; } Property Value Type Description System.String Remarks Requires Content calculation. Examples Code: new BWTMatrix(new(\"mississippi\")).LastColumn Result: \"ipssm$pissii\" | Improve this Doc View Source Text Declaration public TextWithTerminator Text { get; set; } Property Value Type Description TextWithTerminator | Improve this Doc View Source Transform Builds the Burrows-Wheeler Transform from this BWMatrix , which corresponds to the last column of the matrix, stored in Content . Declaration public BWTransform Transform { get; } Property Value Type Description BWTransform A BWTransform object wrapping the string containing the Burrows-Wheeler transform. Remarks Requires Content calculation. Examples Code: new BWTMatrix(new(\"mississippi\")).Transform; Result: \"ipssm$pissii\" Implements System.IEquatable<T> Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.BurrowsWheelerTransform.BWTransform.html": {
    "href": "api/MoreStructures.BurrowsWheelerTransform.BWTransform.html",
    "title": "Class BWTransform",
    "keywords": "Class BWTransform The Burrows-Wheeler Transform (BWT) of a TextWithTerminator Text is a permutation of the chars of Text which corresponds to the LastColumn of the BWMatrix of Text . Inheritance System.Object BWTransform Implements System.IEquatable < BWTransform > Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.BurrowsWheelerTransform Assembly : MoreStructures.dll Syntax public class BWTransform : IEquatable<BWTransform> Remarks This langword_csharp_record is a typed wrapped of the underlying langword_csharp_string representing the BWT. It guarantes immutability and strong typing, and also keeps together the Text and its transform Content . Constructors | Improve this Doc View Source BWTransform(TextWithTerminator, RotatedTextWithTerminator) The Burrows-Wheeler Transform (BWT) of a TextWithTerminator Text is a permutation of the chars of Text which corresponds to the LastColumn of the BWMatrix of Text . Declaration public BWTransform(TextWithTerminator Text, RotatedTextWithTerminator Content) Parameters Type Name Description TextWithTerminator Text The text to calculate the BWT of. RotatedTextWithTerminator Content The string which corresponds to the transform of the text. Remarks This langword_csharp_record is a typed wrapped of the underlying langword_csharp_string representing the BWT. It guarantes immutability and strong typing, and also keeps together the Text and its transform Content . Fields | Improve this Doc View Source QuickSort A strategy to sort a RotatedTextWithTerminator using , which in turn uses a QuickSort with Time Complexity = O(n * log(n)) in average and O(n^2) in the worst case. Declaration public static readonly BWTransform.SortStrategy QuickSort Field Value Type Description BWTransform.SortStrategy Remarks Tipically used to sort the Burrows-Wheeler Transform. Properties | Improve this Doc View Source Content Declaration public RotatedTextWithTerminator Content { get; set; } Property Value Type Description RotatedTextWithTerminator | Improve this Doc View Source Length The length of this transform, which corresponds to the length of Content . Declaration public int Length { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Text Declaration public TextWithTerminator Text { get; set; } Property Value Type Description TextWithTerminator Implements System.IEquatable<T> Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.BurrowsWheelerTransform.BWTransform.SortStrategy.html": {
    "href": "api/MoreStructures.BurrowsWheelerTransform.BWTransform.SortStrategy.html",
    "title": "Delegate BWTransform.SortStrategy",
    "keywords": "Delegate BWTransform.SortStrategy Any strategy to sort the System.Char of a RotatedTextWithTerminator , for example to turn a BWT into its sorted version. Namespace : MoreStructures.BurrowsWheelerTransform Assembly : MoreStructures.dll Syntax public delegate (RotatedTextWithTerminator sortedText, IEnumerable<int> indexesMapping) SortStrategy(RotatedTextWithTerminator text, IComparer<char>? comparer = null); Parameters Type Name Description RotatedTextWithTerminator text The text to be sorted. System.Nullable < IComparer < System.Char >> comparer The of System.Char to be used for comparison. If not specified, a CharOrTerminatorComparer using the Terminator of text is used instead. Returns Type Description System.ValueTuple < RotatedTextWithTerminator , IEnumerable < System.Int32 >> A new RotatedTextWithTerminator , sorted according to the provided comparer , together with a of System.Int32 , defining the mapping of the index of each char of the input text into the index of that char in the sorted version of the text. Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.BurrowsWheelerTransform.html": {
    "href": "api/MoreStructures.BurrowsWheelerTransform.html",
    "title": "Namespace MoreStructures.BurrowsWheelerTransform",
    "keywords": "Namespace MoreStructures.BurrowsWheelerTransform Classes BWMatrix The Burrows-Wheeler Matrix (BWM) of a TextWithTerminator is the square matrix all cyclic rotations of the provided TextWithTerminator , with rows sorted in ascending order and taking into account that Terminator is to be considered smaller than any other char in the text. BWTransform The Burrows-Wheeler Transform (BWT) of a TextWithTerminator Text is a permutation of the chars of Text which corresponds to the LastColumn of the BWMatrix of Text . Delegates BWTransform.SortStrategy Any strategy to sort the System.Char of a RotatedTextWithTerminator , for example to turn a BWT into its sorted version."
  },
  "api/MoreStructures.BurrowsWheelerTransform.Matching.CountBasedNarrowingIntervalMatcher.html": {
    "href": "api/MoreStructures.BurrowsWheelerTransform.Matching.CountBasedNarrowingIntervalMatcher.html",
    "title": "Class CountBasedNarrowingIntervalMatcher",
    "keywords": "Class CountBasedNarrowingIntervalMatcher A NarrowingIntervalMatcher refinement which precalculate the count of occurrences of each item at index i in BWT[0..(i - 1)], and the index of first occurrence of each char in SortedBWT, and later uses them to perform in constant time interval narrowing operations within the top-level loop of chars to match. Inheritance System.Object NarrowingIntervalMatcher CountBasedNarrowingIntervalMatcher Implements IMatcher Inherited Members NarrowingIntervalMatcher.OrderedAscListSearch NarrowingIntervalMatcher.BWT NarrowingIntervalMatcher.SortedBWT NarrowingIntervalMatcher.Match(IEnumerable<Char>) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.BurrowsWheelerTransform.Matching Assembly : MoreStructures.dll Syntax public class CountBasedNarrowingIntervalMatcher : NarrowingIntervalMatcher, IMatcher Remarks Precalculating counts requires iterating over all the chars of the BWT and populating a table of n rows and sigma columns. Precalculating first occurrences also requires iterating over the BWT, and storing a dictionary of n items. Therefore the cost paid upfront is O(n) in time and O(n * sigma) in space. Constructors | Improve this Doc View Source CountBasedNarrowingIntervalMatcher(RotatedTextWithTerminator, BWTransform.SortStrategy) Declaration public CountBasedNarrowingIntervalMatcher(RotatedTextWithTerminator bwt, BWTransform.SortStrategy bwtSorter) Parameters Type Name Description RotatedTextWithTerminator bwt BWTransform.SortStrategy bwtSorter Remarks This specific implementation also precalculates two dictionaries: the counts of BWT and the first occurrence of each of the chars of SortedBWT . These two data structures makes single char matching a linear operation. | Improve this Doc View Source CountBasedNarrowingIntervalMatcher(RotatedTextWithTerminator, RotatedTextWithTerminator) Declaration public CountBasedNarrowingIntervalMatcher(RotatedTextWithTerminator bwt, RotatedTextWithTerminator sbwt) Parameters Type Name Description RotatedTextWithTerminator bwt RotatedTextWithTerminator sbwt Remarks Properties | Improve this Doc View Source LinearSearch The ISearch implementation to be used when looking for the 1st occurrence of each of the items of an enumerable. Declaration protected static ISearch LinearSearch { get; } Property Value Type Description ISearch | Improve this Doc View Source OccurrencesCounter The IOccurrencesCounter implementation to be used when counting the number of occurrences of each of the items of an enumerable. Declaration protected static IOccurrencesCounter OccurrencesCounter { get; } Property Value Type Description IOccurrencesCounter Methods | Improve this Doc View Source BuildLastFirstFinder() Declaration protected override ILastFirstFinder BuildLastFirstFinder() Returns Type Description ILastFirstFinder Overrides NarrowingIntervalMatcher.BuildLastFirstFinder() Remarks Unlike NarrowingIntervalMatcher , this implementation of IMatcher doesn't make explicit calls to LastToFirst(Int32) . Instead it solely uses its precomputed structures and uses the last-first property implicitely when narrowing the current interval via such strucutes in NarrowInterval(Char, ILastFirstFinder, Int32, Int32) . Because of that, it doesn't need an optimized ILastFirstFinder , and in particular one which does precomputation (such as the PrecomputedFinder used by NarrowingIntervalMatcher ), and can just instantiate a NaiveFinder instead. | Improve this Doc View Source NarrowInterval(Char, ILastFirstFinder, Int32, Int32) Declaration protected override (bool success, int narrowedStartIndex, int narrowedEndIndex) NarrowInterval(char currentChar, ILastFirstFinder finder, int startIndex, int endIndex) Parameters Type Name Description System.Char currentChar ILastFirstFinder finder System.Int32 startIndex System.Int32 endIndex Returns Type Description System.ValueTuple < System.Boolean , System.Int32 , System.Int32 > Overrides NarrowingIntervalMatcher.NarrowInterval(Char, ILastFirstFinder, Int32, Int32) Remarks ALGORITHM Narrowing is performed in three sub-steps (compared to the five in NarrowingIntervalMatcher ): 1. The new start index is calculated as the 1st occurrence in SortedBWT of the current char + the count of such char in BWT up to the current start index excluded (i.e. the number of occurrences of the char up to the index before the current start index). 2. The new end index is calculated as the 1st occurrence in SortedBWT of the current char + the count of such char in BWT up to the current end index included, short of one (i.e. the number of occurrences of the char up to the current end index - 1). 3. The narrowed interval in Sorted BWT is returned. COMPLEXITY Total amortized cost is O(1), both in time and space. Implements IMatcher Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.BurrowsWheelerTransform.Matching.html": {
    "href": "api/MoreStructures.BurrowsWheelerTransform.Matching.html",
    "title": "Namespace MoreStructures.BurrowsWheelerTransform.Matching",
    "keywords": "Namespace MoreStructures.BurrowsWheelerTransform.Matching Classes CountBasedNarrowingIntervalMatcher A NarrowingIntervalMatcher refinement which precalculate the count of occurrences of each item at index i in BWT[0..(i - 1)], and the index of first occurrence of each char in SortedBWT, and later uses them to perform in constant time interval narrowing operations within the top-level loop of chars to match. Match The result of a pattern matching done by a . NarrowingIntervalMatcher Interfaces IMatcher A implementation of matching of a pattern against a RotatedTextWithTerminator containing a Burrows-Wheeler Transform of a text."
  },
  "api/MoreStructures.BurrowsWheelerTransform.Matching.IMatcher.html": {
    "href": "api/MoreStructures.BurrowsWheelerTransform.Matching.IMatcher.html",
    "title": "Interface IMatcher",
    "keywords": "Interface IMatcher A implementation of matching of a pattern against a RotatedTextWithTerminator containing a Burrows-Wheeler Transform of a text. Namespace : MoreStructures.BurrowsWheelerTransform.Matching Assembly : MoreStructures.dll Syntax public interface IMatcher Properties | Improve this Doc View Source BWT The Burrows-Wheeler Transform. Also, the last column of the Burrows-Wheeler Matrix. Declaration RotatedTextWithTerminator BWT { get; } Property Value Type Description RotatedTextWithTerminator | Improve this Doc View Source SortedBWT The sorted version of the Burrows-Wheeler Transform. Also, the first column of the Burrows-Wheeler Matrix. Declaration RotatedTextWithTerminator SortedBWT { get; } Property Value Type Description RotatedTextWithTerminator Methods | Improve this Doc View Source Match(IEnumerable<Char>) Tries to match the provided pattern against the BWT and its sorted version SortedBWT . Declaration Match Match(IEnumerable<char> pattern) Parameters Type Name Description IEnumerable < System.Char > pattern The patter to be matched against the text. Returns Type Description Match The result of the pattern matching, successful or not. Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.BurrowsWheelerTransform.Matching.Match.html": {
    "href": "api/MoreStructures.BurrowsWheelerTransform.Matching.Match.html",
    "title": "Class Match",
    "keywords": "Class Match The result of a pattern matching done by a . Inheritance System.Object Match Implements System.IEquatable < Match > Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.BurrowsWheelerTransform.Matching Assembly : MoreStructures.dll Syntax public class Match : IEquatable<Match> Constructors | Improve this Doc View Source Match(Boolean, Int32, Int32, Int32) The result of a pattern matching done by a . Declaration public Match(bool Success, int MatchedChars, int StartIndex, int EndIndex) Parameters Type Name Description System.Boolean Success Whether the pattern matching was successful or not. System.Int32 MatchedChars The number of chars matched from the pattern. If is false , the value will be strictly smaller than the length of the pattern. Otherwise, it will be equal to the length of the pattern. System.Int32 StartIndex The 0-based index, in the Sorted Burrows-Wheeler Transform, of the first char matching. Negative if no matching has happened. System.Int32 EndIndex The 0-based index, in the Sorted Burrows-Wheeler Transform, of the last char matching. Negative if no matching has happened. Properties | Improve this Doc View Source EndIndex Declaration public int EndIndex { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source MatchedChars Declaration public int MatchedChars { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source StartIndex Declaration public int StartIndex { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source Success Declaration public bool Success { get; set; } Property Value Type Description System.Boolean Implements System.IEquatable<T> Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.BurrowsWheelerTransform.Matching.NarrowingIntervalMatcher.html": {
    "href": "api/MoreStructures.BurrowsWheelerTransform.Matching.NarrowingIntervalMatcher.html",
    "title": "Class NarrowingIntervalMatcher",
    "keywords": "Class NarrowingIntervalMatcher Inheritance System.Object NarrowingIntervalMatcher CountBasedNarrowingIntervalMatcher Implements IMatcher Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.BurrowsWheelerTransform.Matching Assembly : MoreStructures.dll Syntax public class NarrowingIntervalMatcher : IMatcher Remarks ALGORITHM This is a basic implementation, narrowing the matching interval at every iteration with two linear scans of the BWT. No precomputation cost is paid on instantiation, except for sorting of the BWT to build the SortedBWT , which takes O(n * log(n)) time using QuickSort , but can also run in linear time for a constant size alphabet using the Counting Sort. Either way, the predominant cost is the main narrowing interval algorithm, which runs for each char in the BWT (i.e. n times) two linear scans of the BWT itself (on the order of n), resulting in quadratic time execution. COMPLEXITY Time Complexity = O(n^2). Space Complexity = O(n). Constructors | Improve this Doc View Source NarrowingIntervalMatcher(RotatedTextWithTerminator, BWTransform.SortStrategy) Builds an instance of this matcher, for the provided bwt , using bwtSorter to calculate SortedBWT from it. Declaration public NarrowingIntervalMatcher(RotatedTextWithTerminator bwt, BWTransform.SortStrategy bwtSorter) Parameters Type Name Description RotatedTextWithTerminator bwt The last column of the Burrows-Wheeler Matrix. Corresponds to the BWT. BWTransform.SortStrategy bwtSorter A function sorting the provided RotatedTextWithTerminator into a sorted RotatedTextWithTerminator , according to the provided of chars. | Improve this Doc View Source NarrowingIntervalMatcher(RotatedTextWithTerminator, RotatedTextWithTerminator) Builds an instance of this finder, for the provided bwt and sbwt . Because both BWT and SortedBWT are provided, no sorting happens. Declaration public NarrowingIntervalMatcher(RotatedTextWithTerminator bwt, RotatedTextWithTerminator sbwt) Parameters Type Name Description RotatedTextWithTerminator bwt The Burrows-Wheeler Transform. RotatedTextWithTerminator sbwt The sorted version of the Burrows-Wheeler Transform. Properties | Improve this Doc View Source BWT The Burrows-Wheeler Transform. Also, the last column of the Burrows-Wheeler Matrix. Declaration public RotatedTextWithTerminator BWT { get; } Property Value Type Description RotatedTextWithTerminator | Improve this Doc View Source OrderedAscListSearch The ISearch implementation to be used when searching for items in lists sorted in ascending order. Declaration protected static ISearch OrderedAscListSearch { get; } Property Value Type Description ISearch | Improve this Doc View Source SortedBWT The sorted version of the Burrows-Wheeler Transform. Also, the first column of the Burrows-Wheeler Matrix. Declaration public RotatedTextWithTerminator SortedBWT { get; } Property Value Type Description RotatedTextWithTerminator Methods | Improve this Doc View Source BuildLastFirstFinder() Builds the ILastFirstFinder instance which is then (potentially) used by all iterations of the matching algorithm over the pattern to match against BWT and SortedBWT . Declaration protected virtual ILastFirstFinder BuildLastFirstFinder() Returns Type Description ILastFirstFinder An instance of ILastFirstFinder . Remarks The ILastFirstFinder implementation used is PrecomputedFinder . | Improve this Doc View Source Match(IEnumerable<Char>) Declaration public Match Match(IEnumerable<char> pattern) Parameters Type Name Description IEnumerable < System.Char > pattern Returns Type Description Match Remarks The pattern matching is done via successive narrowing of a interval, defined by a start and an end index. At the beginning the interval is as big as the provided BWTransform (and its text). The algorithmn proceeds in reverse: from the last char of the pattern P, P[^1] to the first, P[0]. Search in Sorted BWT for the range of indexes (first1, last1) having value P[^1] via a ISearch implementation (because the input is sorted, binary search is possible). The char in BWT at indexes first1 and last1 represent the predecessor of all instances of P[^1] in P. The interval (first1, last1) can then be narrowed down to (first2, last2), taking into account only the chars in BWT which match the predecessor of P[^1], P[^2]. By last-first property, new indexes (first3, last3) of the chars in Sorted BWT corresponding to first2 and last2 in BWT, can be found. Those are the first and last of the new narrowed range, ready for step 4. When all chars of P, up to P[0], have been consumed, all matches have been identified as an interval in Sorted BWT. | Improve this Doc View Source NarrowInterval(Char, ILastFirstFinder, Int32, Int32) Narrows the provided ( startIndex , endIndex ) interval, (possibly) using the provided ILastFirstFinder finder for last-first matching. Declaration protected virtual (bool success, int narrowedStartIndex, int narrowedEndIndex) NarrowInterval(char currentChar, ILastFirstFinder finder, int startIndex, int endIndex) Parameters Type Name Description System.Char currentChar The char currently being processed. ILastFirstFinder finder The finder used to perform last-first matching, if needed. When pattern matching a single instance is shared across all iterations over the pattern. System.Int32 startIndex The lower extreme of the interval to be narrowed. System.Int32 endIndex The higher extreme of the interval to be narrowed. Returns Type Description System.ValueTuple < System.Boolean , System.Int32 , System.Int32 > An interval narrower than the one provided as input, or (-1, -1), if narrowing resulted into an empty set (i.e. overall matching has failed). Remarks Narrowing is performed in five sub-steps: a linear scan in BWT from startIndex downwards is done, to identify the narrowed start; a linear scan in BWT from endIndex upwards is done, to identify the narrowed end; a last-first of the narrowed start is done, to find the corresponding narrowed start in the Sorted BWT; a last-first of the narrowed end is done, to find the corresponding narrowed end in the Sorted BWT; the narrowed interval in Sorted BWT is returned. Implements IMatcher Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.CountTrees.CountTreeEdge-2.html": {
    "href": "api/MoreStructures.CountTrees.CountTreeEdge-2.html",
    "title": "Class CountTreeEdge<TEdge, TNode>",
    "keywords": "Class CountTreeEdge<TEdge, TNode> An implementation of , wrapping another implementation of , and linking two instances of wrapper nodes . Inheritance System.Object CountTreeEdge<TEdge, TNode> Implements IRecImmDictIndexedTreeEdge < CountTreeEdge <TEdge, TNode>, CountTreeNode <TEdge, TNode>> System.IEquatable < CountTreeEdge <TEdge, TNode>> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.CountTrees Assembly : MoreStructures.dll Syntax public sealed class CountTreeEdge<TEdge, TNode> : IRecImmDictIndexedTreeEdge<CountTreeEdge<TEdge, TNode>, CountTreeNode<TEdge, TNode>>, IEquatable<CountTreeEdge<TEdge, TNode>> where TEdge : IRecImmDictIndexedTreeEdge<TEdge, TNode> where TNode : IRecImmDictIndexedTreeNode<TEdge, TNode> Type Parameters Name Description TEdge TNode Remarks Due to records semantics, two instances wrapping the same underlying edge, or two equivalent edges, will be equal. Examples Edge edge = ... CountTreeEdge<Edge, Node> countEdge = new(edge); Constructors | Improve this Doc View Source CountTreeEdge(TEdge) An implementation of , wrapping another implementation of , and linking two instances of wrapper nodes . Declaration public CountTreeEdge(TEdge WrappedEdge) Parameters Type Name Description TEdge WrappedEdge The edge being wrapped, pointing to descendants which are going to be counted. Remarks Due to records semantics, two instances wrapping the same underlying edge, or two equivalent edges, will be equal. Examples Edge edge = ... CountTreeEdge<Edge, Node> countEdge = new(edge); Properties | Improve this Doc View Source WrappedEdge Declaration public TEdge WrappedEdge { get; set; } Property Value Type Description TEdge Implements IRecImmDictIndexedTreeEdge<TEdge, TNode> System.IEquatable<T> Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.CountTrees.CountTreeNode-2.html": {
    "href": "api/MoreStructures.CountTrees.CountTreeNode-2.html",
    "title": "Class CountTreeNode<TEdge, TNode>",
    "keywords": "Class CountTreeNode<TEdge, TNode> An implementation of IRecImmDictIndexedTreeNode<TEdge, TNode> , wrapping another implementation of IRecImmDictIndexedTreeNode<TEdge, TNode> , and counting the total number of descendands the wrapped node has below (node itself excluded). Inheritance System.Object CountTreeNode<TEdge, TNode> Implements IRecImmDictIndexedTreeNode < CountTreeEdge <TEdge, TNode>, CountTreeNode <TEdge, TNode>> System.IEquatable < CountTreeNode <TEdge, TNode>> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.CountTrees Assembly : MoreStructures.dll Syntax public sealed class CountTreeNode<TEdge, TNode> : IRecImmDictIndexedTreeNode<CountTreeEdge<TEdge, TNode>, CountTreeNode<TEdge, TNode>>, IEquatable<CountTreeNode<TEdge, TNode>> where TEdge : IRecImmDictIndexedTreeEdge<TEdge, TNode> where TNode : IRecImmDictIndexedTreeNode<TEdge, TNode> Type Parameters Name Description TEdge TNode Remarks RECORDS SEMANTICS Due to records semantics, and the use of value readonly dictionaries, two CountTreeNode<TEdge, TNode> instances wrapping the same underlying node, or two equivalent nodes, will be equal. ITERATIVITY CountTreeNode<TEdge, TNode> structure construction and properties calculation are done lazily and fully iteratively, so the use of this structure is not limited by call stack depth but rather by the maximum size of the stack stored in the heap. Convenient with deep trees (i.e. trees having a height > ~1K nodes). CACHING Once Children and DescendantsCount properties are calculated, they are cached to avoid multiple calculation. This is also one of the reasons why immutability of the wrapped tree is a requirement to use CountTreeNode<TEdge, TNode> . COMPLEXITY Time Complexity = O(n) and Space Complexity = O(n) where n = number of nodes in WrappedNode structure. Leafs are visited only once, intermediate nodes are visited (at most) twice. Examples var wrapped = new Node(1) { Children = new Dictionary<Edge, Node> { [new(1)] = new(2), [new(2)] = new(3) { ... }, [new(5)] = new(6), } }; var wrapping = new CountTreeNode<Edge, Node>(wrapped); Assert.AreEqual(3, wrapping.Children.Count); Constructors | Improve this Doc View Source CountTreeNode(TNode) An implementation of IRecImmDictIndexedTreeNode<TEdge, TNode> , wrapping another implementation of IRecImmDictIndexedTreeNode<TEdge, TNode> , and counting the total number of descendands the wrapped node has below (node itself excluded). Declaration public CountTreeNode(TNode WrappedNode) Parameters Type Name Description TNode WrappedNode The node being wrapped, and whose descendants are going to be counted. Remarks RECORDS SEMANTICS Due to records semantics, and the use of value readonly dictionaries, two CountTreeNode<TEdge, TNode> instances wrapping the same underlying node, or two equivalent nodes, will be equal. ITERATIVITY CountTreeNode<TEdge, TNode> structure construction and properties calculation are done lazily and fully iteratively, so the use of this structure is not limited by call stack depth but rather by the maximum size of the stack stored in the heap. Convenient with deep trees (i.e. trees having a height > ~1K nodes). CACHING Once Children and DescendantsCount properties are calculated, they are cached to avoid multiple calculation. This is also one of the reasons why immutability of the wrapped tree is a requirement to use CountTreeNode<TEdge, TNode> . COMPLEXITY Time Complexity = O(n) and Space Complexity = O(n) where n = number of nodes in WrappedNode structure. Leafs are visited only once, intermediate nodes are visited (at most) twice. Examples var wrapped = new Node(1) { Children = new Dictionary<Edge, Node> { [new(1)] = new(2), [new(2)] = new(3) { ... }, [new(5)] = new(6), } }; var wrapping = new CountTreeNode<Edge, Node>(wrapped); Assert.AreEqual(3, wrapping.Children.Count); Properties | Improve this Doc View Source Children A readonly view of the children private collection of this node. Empty for leaves. Declaration public IDictionary<CountTreeEdge<TEdge, TNode>, CountTreeNode<TEdge, TNode>> Children { get; } Property Value Type Description IDictionary < CountTreeEdge <TEdge, TNode>, CountTreeNode <TEdge, TNode>> Remarks | Improve this Doc View Source DescendantsCount The number of descendands below this node (node itself excluded). Declaration public int DescendantsCount { get; } Property Value Type Description System.Int32 Remarks | Improve this Doc View Source WrappedNode Declaration public TNode WrappedNode { get; set; } Property Value Type Description TNode Implements IRecImmDictIndexedTreeNode<TEdge, TNode> System.IEquatable<T> Extension Methods RecImmDictIndexedTreeNodeExtensions.IsLeaf<TEdge, TNode>(IRecImmDictIndexedTreeNode<TEdge, TNode>) SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.CountTrees.html": {
    "href": "api/MoreStructures.CountTrees.html",
    "title": "Namespace MoreStructures.CountTrees",
    "keywords": "Namespace MoreStructures.CountTrees Classes CountTreeEdge<TEdge, TNode> An implementation of , wrapping another implementation of , and linking two instances of wrapper nodes . CountTreeNode<TEdge, TNode> An implementation of IRecImmDictIndexedTreeNode<TEdge, TNode> , wrapping another implementation of IRecImmDictIndexedTreeNode<TEdge, TNode> , and counting the total number of descendands the wrapped node has below (node itself excluded)."
  },
  "api/MoreStructures.html": {
    "href": "api/MoreStructures.html",
    "title": "Namespace MoreStructures",
    "keywords": "Namespace MoreStructures Classes RotatedTextWithTerminator A text string with a terminator character which has been rotated leftwards or rightwards, of a number of positions (0 included). TextWithTerminator A text string with a terminator character, not present in the text. TextWithTerminatorExtensions Extension methods for TextWithTerminator . VirtuallyRotatedTextWithTerminator A text string with a terminator character which has been rotated leftwards or rightwards, of a number of positions (0 included). Interfaces TextWithTerminator.ISelector A selector of a part of a TextWithTerminator or RotatedTextWithTerminator ."
  },
  "api/MoreStructures.Lists.Counting.DictionaryBasedOccurrencesCounter.html": {
    "href": "api/MoreStructures.Lists.Counting.DictionaryBasedOccurrencesCounter.html",
    "title": "Class DictionaryBasedOccurrencesCounter",
    "keywords": "Class DictionaryBasedOccurrencesCounter An implementation of IOccurrencesCounter which uses a to build the two-level of occurrences, indexed by distinct item values and index. Inheritance System.Object DictionaryBasedOccurrencesCounter Implements IOccurrencesCounter Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Lists.Counting Assembly : MoreStructures.dll Syntax public class DictionaryBasedOccurrencesCounter : IOccurrencesCounter Methods | Improve this Doc View Source Count<T>(IEnumerable<T>) Declaration public IDictionary<T, IDictionary<int, int>> Count<T>(IEnumerable<T> enumerable) Parameters Type Name Description IEnumerable <T> enumerable Returns Type Description IDictionary <T, IDictionary < System.Int32 , System.Int32 >> Type Parameters Name Description T The type of items of enumerable . Remarks Perform counting by keeping a of the current number of occurrences per item encountered, by distinct value of T and index, while enumerating enumerable . Both Time Complexity and Space Complexity are O(n * sigma), where n = number of items in enumerable and sigma = number of the alphabet of enumerable , i.e. the number of distinct items of type T in enumerable . Implements IOccurrencesCounter Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.Lists.Counting.html": {
    "href": "api/MoreStructures.Lists.Counting.html",
    "title": "Namespace MoreStructures.Lists.Counting",
    "keywords": "Namespace MoreStructures.Lists.Counting Classes DictionaryBasedOccurrencesCounter An implementation of IOccurrencesCounter which uses a to build the two-level of occurrences, indexed by distinct item values and index. Interfaces IOccurrencesCounter An object able to count the number of occurrences of each item of a , also known as Count Array."
  },
  "api/MoreStructures.Lists.Counting.IOccurrencesCounter.html": {
    "href": "api/MoreStructures.Lists.Counting.IOccurrencesCounter.html",
    "title": "Interface IOccurrencesCounter",
    "keywords": "Interface IOccurrencesCounter An object able to count the number of occurrences of each item of a , also known as Count Array. Namespace : MoreStructures.Lists.Counting Assembly : MoreStructures.dll Syntax public interface IOccurrencesCounter Methods | Improve this Doc View Source Count<T>(IEnumerable<T>) For each item t of type T in enumerable and for each index i of E, counts the total number of items equal to t in E[0..i] (extremes included). Declaration IDictionary<T, IDictionary<int, int>> Count<T>(IEnumerable<T> enumerable) Parameters Type Name Description IEnumerable <T> enumerable The enumerable, to count the items of. Returns Type Description IDictionary <T, IDictionary < System.Int32 , System.Int32 >> A new, lazy evaluated two-levels dictionary of System.Int32 , the 1st-level one having as many items as the number of distinct chars in enumerable , the 2nd-level one having as many items as the length of enumerable . Type Parameters Name Description T The type of items of enumerable . Required to be a non-nullable type (value or reference). Examples var counter = ... var enumerable = new List<int> { 1, 4, 2, 1, 3, 4, 2, 2 } var counts = counter.Count(enumerable) // Result = // { // [1, 0] = 1, [2, 0] = 0, [3, 0] = 0, [4, 0] = 0, // Counts by char in E[0..0] // [1, 1] = 1, [2, 1] = 0, [3, 1] = 0, [4, 1] = 1, // Counts by char in E[0..1] // [1, 2] = 1, [2, 2] = 1, [3, 2] = 0, [4, 2] = 1, // Counts by char in E[0..2] // ... // [1, 7] = 2, [2, 7] = 2, [3, 7] = 1, [4, 7] = 2, // Counts by char in E[0..7] // } Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.Lists.Searching.BinarySearch.html": {
    "href": "api/MoreStructures.Lists.Searching.BinarySearch.html",
    "title": "Class BinarySearch",
    "keywords": "Class BinarySearch An object able to search in logarithmic time for items in direct random access structures, such as lists and arrays, which are monodimensional, implement the interface and are sorted in ascending order according to the provided comparer (which is the property enabling the search to be carried out in O(log(n)) time. Inheritance System.Object BinarySearch Implements ISearch Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Lists.Searching Assembly : MoreStructures.dll Syntax public class BinarySearch : ISearch Remarks The sorting order assumed by this search can be reversed by simply inverting the comparer implementation. Methods | Improve this Doc View Source First<T>(IEnumerable<T>, T, Nullable<IComparer<T>>, Nullable<Int32>, Nullable<Int32>) This specific implementation assumes that source is sorted in ascending order. Declaration public int First<T>(IEnumerable<T> source, T item, IComparer<T>? comparer = null, int? fromIndex = null, int? toIndex = null) Parameters Type Name Description IEnumerable <T> source T item System.Nullable < IComparer <T>> comparer System.Nullable < System.Int32 > fromIndex System.Nullable < System.Int32 > toIndex Returns Type Description System.Int32 Type Parameters Name Description T Remarks The algorithm split in half the search space at every iteration, reducing it exponentially to a single item or to an empty set. Time Complexity = O(log(n)), Space Complexity = O(1), where n = number of items between fromIndex and toIndex . | Improve this Doc View Source FirstAll<T>(IEnumerable<T>, Nullable<IComparer<T>>, Nullable<Int32>, Nullable<Int32>) This specific implementation assumes that source is sorted in ascending order. Declaration public IDictionary<T, int> FirstAll<T>(IEnumerable<T> source, IComparer<T>? comparer = null, int? fromIndex = null, int? toIndex = null) Parameters Type Name Description IEnumerable <T> source System.Nullable < IComparer <T>> comparer System.Nullable < System.Int32 > fromIndex System.Nullable < System.Int32 > toIndex Returns Type Description IDictionary <T, System.Int32 > Type Parameters Name Description T Remarks The size of the output and the Space Complexity is O(sigma), where: A binary search for the next different element gives an overall O(sigma * log(sigma)) Time Complexity. | Improve this Doc View Source Interval<T>(IEnumerable<T>, T, Nullable<IComparer<T>>, Nullable<Int32>, Nullable<Int32>) This specific implementation assumes that source is sorted in ascending order. Declaration public (int first, int last) Interval<T>(IEnumerable<T> source, T item, IComparer<T>? comparer = null, int? fromIndex = null, int? toIndex = null) Parameters Type Name Description IEnumerable <T> source T item System.Nullable < IComparer <T>> comparer System.Nullable < System.Int32 > fromIndex System.Nullable < System.Int32 > toIndex Returns Type Description System.ValueTuple < System.Int32 , System.Int32 > Type Parameters Name Description T Remarks The algorithm peforms two successive binary search operations: the first to find the lower extreme of the interval and the second to find the higher extreme of the interval. Each binary search runs in logarithmic time. Time Complexity = O(log(n)), Space Complexity = O(1), where n = number of items between fromIndex and toIndex . | Improve this Doc View Source Last<T>(IEnumerable<T>, T, Nullable<IComparer<T>>, Nullable<Int32>, Nullable<Int32>) This specific implementation assumes that source is sorted in ascending order. Declaration public int Last<T>(IEnumerable<T> source, T item, IComparer<T>? comparer = null, int? fromIndex = null, int? toIndex = null) Parameters Type Name Description IEnumerable <T> source T item System.Nullable < IComparer <T>> comparer System.Nullable < System.Int32 > fromIndex System.Nullable < System.Int32 > toIndex Returns Type Description System.Int32 Type Parameters Name Description T Remarks The algorithm split in half the search space at every iteration, reducing it exponentially to a single item or to an empty set. Time Complexity = O(log(n)), Space Complexity = O(1), where n = number of items between fromIndex and toIndex . | Improve this Doc View Source Nth<T>(IEnumerable<T>, T, Int32, Nullable<IComparer<T>>, Nullable<Int32>, Nullable<Int32>) This specific implementation assumes that source is sorted in ascending order. Declaration public int Nth<T>(IEnumerable<T> source, T item, int occurrenceRank, IComparer<T>? comparer = null, int? fromIndex = null, int? toIndex = null) Parameters Type Name Description IEnumerable <T> source T item System.Int32 occurrenceRank System.Nullable < IComparer <T>> comparer System.Nullable < System.Int32 > fromIndex System.Nullable < System.Int32 > toIndex Returns Type Description System.Int32 Type Parameters Name Description T Remarks The algorithm first performs a binary search to find the index i of the 1st item. Then it checks whether the n-th occurrence of the item exists at index i + n, taking advantage of the fact that source is sorted. The first step takes logarithmic time, whereas the second step takes constant time and space to execute. Time Complexity = O(log(n)), Space Complexity = O(1), where n = number of items between fromIndex and toIndex . Implements ISearch Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.Lists.Searching.html": {
    "href": "api/MoreStructures.Lists.Searching.html",
    "title": "Namespace MoreStructures.Lists.Searching",
    "keywords": "Namespace MoreStructures.Lists.Searching Classes BinarySearch An object able to search in logarithmic time for items in direct random access structures, such as lists and arrays, which are monodimensional, implement the interface and are sorted in ascending order according to the provided comparer (which is the property enabling the search to be carried out in O(log(n)) time. LinearSearch An object able to search in linear time for items in direct random access structures, such as lists and arrays, which are monodimensional and implement the interface. Interfaces ISearch An object able to search for items in direct random access structures, such as lists and arrays, which are monodimensional and implement the interface."
  },
  "api/MoreStructures.Lists.Searching.ISearch.html": {
    "href": "api/MoreStructures.Lists.Searching.ISearch.html",
    "title": "Interface ISearch",
    "keywords": "Interface ISearch An object able to search for items in direct random access structures, such as lists and arrays, which are monodimensional and implement the interface. Namespace : MoreStructures.Lists.Searching Assembly : MoreStructures.dll Syntax public interface ISearch Remarks In .NET, random access structures usually have an indexer defined, which takes as an index the address of the item in the data structure (usually an integer). Most random access structures (but not all) inherit and define . A notable exception is System.String , which has an indexer ( System.String.Chars(System.Int32) ), but does not implement . For System.String , specific optimizations are done, to ensure random access in O(1) time. Methods | Improve this Doc View Source First<T>(IEnumerable<T>, T, Nullable<IComparer<T>>, Nullable<Int32>, Nullable<Int32>) Find the index of the first item in the sub-sequence of items of source from fromIndex to toIndex included, which is equal to item . Declaration int First<T>(IEnumerable<T> source, T item, IComparer<T>? comparer = null, int? fromIndex = null, int? toIndex = null) Parameters Type Name Description IEnumerable <T> source The enumerable where to search for item . T item The item to search for. System.Nullable < IComparer <T>> comparer The comparer to be used when performing the search. If not specified, is used. System.Nullable < System.Int32 > fromIndex The first index, marking the begin of the sub-sequence of source where to search. If not specified, 0 is used. System.Nullable < System.Int32 > toIndex The last index, marking the end of the sub-sequence of source where to search. If not specified, is called on source to calculate the count of items, and count - 1 is used. If source is a System.String , however, System.String.Length is used instead. Returns Type Description System.Int32 The first index of item in source . Type Parameters Name Description T The type of items of source . Must be comparable. If it is System.String , random access is done in O(1) via System.String.Chars(System.Int32) . Otherwise, random access is done via the generic LINQ method , which is O(n) or O(1) dependending on the concretion. | Improve this Doc View Source FirstAll<T>(IEnumerable<T>, Nullable<IComparer<T>>, Nullable<Int32>, Nullable<Int32>) Find the indexes of the first occurrence of each item in the sub-sequence of items of source from fromIndex to toIndex included. Declaration IDictionary<T, int> FirstAll<T>(IEnumerable<T> source, IComparer<T>? comparer = null, int? fromIndex = null, int? toIndex = null) Parameters Type Name Description IEnumerable <T> source The enumerable. System.Nullable < IComparer <T>> comparer The comparer to be used when performing the search, to tell apart different items. If not specified, is used. System.Nullable < System.Int32 > fromIndex The first index, marking the begin of the sub-sequence of source where to search. If not specified, 0 is used. System.Nullable < System.Int32 > toIndex The last index, marking the end of the sub-sequence of source where to search. If not specified, is called on source to calculate the count of items, and count - 1 is used. If source is a System.String , however, System.String.Length is used instead. Returns Type Description IDictionary <T, System.Int32 > A containing the 0-based index first occurrence of each item, indexed by the item itself. Type Parameters Name Description T The type of items of source . Must be comparable and non-null, since it is used as key to index first occurrence indexes in the output . If it is System.String , random access is done in O(1) via System.String.Chars(System.Int32) . Otherwise, random access is done via the generic LINQ method , which is O(n) or O(1) dependending on the concretion. | Improve this Doc View Source Interval<T>(IEnumerable<T>, T, Nullable<IComparer<T>>, Nullable<Int32>, Nullable<Int32>) Find the indexes of the first and last items in the sub-sequence of items of source from fromIndex to toIndex included, which is equal to item . Declaration (int first, int last) Interval<T>(IEnumerable<T> source, T item, IComparer<T>? comparer = null, int? fromIndex = null, int? toIndex = null) Parameters Type Name Description IEnumerable <T> source The enumerable where to search for item . T item The item to search for. System.Nullable < IComparer <T>> comparer The comparer to be used when performing the search. If not specified, is used. System.Nullable < System.Int32 > fromIndex The first index, marking the begin of the sub-sequence of source where to search. If not specified, 0 is used. System.Nullable < System.Int32 > toIndex The last index, marking the end of the sub-sequence of source where to search. If not specified, is called on source to calculate the count of items, and count - 1 is used. If source is a System.String , however, System.String.Length is used instead. Returns Type Description System.ValueTuple < System.Int32 , System.Int32 > The first and last index, marking the end of the sub-sequence of source where to search. Type Parameters Name Description T The type of items of source . Must be comparable. If it is System.String , random access is done in O(1) via System.String.Chars(System.Int32) . Otherwise, random access is done via the generic LINQ method , which is O(n) or O(1) dependending on the concretion. | Improve this Doc View Source Last<T>(IEnumerable<T>, T, Nullable<IComparer<T>>, Nullable<Int32>, Nullable<Int32>) Find the index of the last item in the sub-sequence of items of source from fromIndex to toIndex included, which is equal to item . Declaration int Last<T>(IEnumerable<T> source, T item, IComparer<T>? comparer = null, int? fromIndex = null, int? toIndex = null) Parameters Type Name Description IEnumerable <T> source The enumerable where to search for item . T item The item to search for. System.Nullable < IComparer <T>> comparer The comparer to be used when performing the search. If not specified, is used. System.Nullable < System.Int32 > fromIndex The first index, marking the begin of the sub-sequence of source where to search. If not specified, 0 is used. System.Nullable < System.Int32 > toIndex The last index, marking the end of the sub-sequence of source where to search. If not specified, is called on source to calculate the count of items, and count - 1 is used. If source is a System.String , however, System.String.Length is used instead. Returns Type Description System.Int32 The first and last index, marking the end of the sub-sequence of source where to search. Type Parameters Name Description T The type of items of source . Must be comparable. If it is System.String , random access is done in O(1) via System.String.Chars(System.Int32) . Otherwise, random access is done via the generic LINQ method , which is O(n) or O(1) dependending on the concretion. | Improve this Doc View Source Nth<T>(IEnumerable<T>, T, Int32, Nullable<IComparer<T>>, Nullable<Int32>, Nullable<Int32>) Find the index of the n-th occurence (0-based) of the item in the sub-sequence of items of source from fromIndex to toIndex included, which is equal to item . Declaration int Nth<T>(IEnumerable<T> source, T item, int occurrenceRank, IComparer<T>? comparer = null, int? fromIndex = null, int? toIndex = null) Parameters Type Name Description IEnumerable <T> source T item System.Int32 occurrenceRank System.Nullable < IComparer <T>> comparer System.Nullable < System.Int32 > fromIndex System.Nullable < System.Int32 > toIndex Returns Type Description System.Int32 The n-th index, marking the end of the sub-sequence of source where to search. Type Parameters Name Description T The type of items of source . Must be comparable. If it is System.String , random access is done in O(1) via System.String.Chars(System.Int32) . Otherwise, random access is done via the generic LINQ method , which is O(n) or O(1) dependending on the concretion. Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.Lists.Searching.LinearSearch.html": {
    "href": "api/MoreStructures.Lists.Searching.LinearSearch.html",
    "title": "Class LinearSearch",
    "keywords": "Class LinearSearch An object able to search in linear time for items in direct random access structures, such as lists and arrays, which are monodimensional and implement the interface. Inheritance System.Object LinearSearch Implements ISearch Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Lists.Searching Assembly : MoreStructures.dll Syntax public class LinearSearch : ISearch Remarks Unlike BinarySearch , this implementation doesn't make any assumption on the order of items in in the data structure. Methods | Improve this Doc View Source First<T>(IEnumerable<T>, T, Nullable<IComparer<T>>, Nullable<Int32>, Nullable<Int32>) This specific implementation does not make any assunption on source being sorted. Declaration public int First<T>(IEnumerable<T> source, T item, IComparer<T>? comparer = null, int? fromIndex = null, int? toIndex = null) Parameters Type Name Description IEnumerable <T> source T item System.Nullable < IComparer <T>> comparer System.Nullable < System.Int32 > fromIndex System.Nullable < System.Int32 > toIndex Returns Type Description System.Int32 Type Parameters Name Description T Remarks The algorithm linearly scans the search space from fromIndex to toIndex , one index at every iteration, reducing it linearly to a single item or to an empty set. Time Complexity = O(n), Space Complexity = O(1), where n = number of items between fromIndex and toIndex . | Improve this Doc View Source FirstAll<T>(IEnumerable<T>, Nullable<IComparer<T>>, Nullable<Int32>, Nullable<Int32>) This specific implementation does not make any assunption on source being sorted. Declaration public IDictionary<T, int> FirstAll<T>(IEnumerable<T> source, IComparer<T>? comparer = null, int? fromIndex = null, int? toIndex = null) Parameters Type Name Description IEnumerable <T> source System.Nullable < IComparer <T>> comparer System.Nullable < System.Int32 > fromIndex System.Nullable < System.Int32 > toIndex Returns Type Description IDictionary <T, System.Int32 > Type Parameters Name Description T Remarks ALGORITHM The algorithm linearly scans the search space from fromIndex to toIndex , one index at every iteration, collecting first occurrences into a . COMPLEXITY Time Complexity = O(n), Space Complexity = O(sigma), where: - n is the number of items between fromIndex and toIndex . - For \"large alphabets\" scenarios (such as when the alphabet is int - 2^32 possible values, but source is way smaller than that), sigma is the number of distinct elements of source . - For \"small alphabets\" scenarios (such as when the alphabet is comprised of few symbols only), sigma is the size of the alphabet. - In either scenario the worst case of the O(sigma) Space Complexity is O(n), which is when all the symbols in source are different from each other). | Improve this Doc View Source Interval<T>(IEnumerable<T>, T, Nullable<IComparer<T>>, Nullable<Int32>, Nullable<Int32>) This specific implementation does not make any assunption on source being sorted. Declaration public (int first, int last) Interval<T>(IEnumerable<T> source, T item, IComparer<T>? comparer = null, int? fromIndex = null, int? toIndex = null) Parameters Type Name Description IEnumerable <T> source T item System.Nullable < IComparer <T>> comparer System.Nullable < System.Int32 > fromIndex System.Nullable < System.Int32 > toIndex Returns Type Description System.ValueTuple < System.Int32 , System.Int32 > Type Parameters Name Description T Remarks The algorithm linearly scans the search space from fromIndex to toIndex , one index at every iteration. It just stores the smallest and the biggest index among the ones which correspond to items equal to item . So it has constant, and not linear, space requirements. Time Complexity = O(n), Space Complexity = O(1), where n = number of items between fromIndex and toIndex . | Improve this Doc View Source Last<T>(IEnumerable<T>, T, Nullable<IComparer<T>>, Nullable<Int32>, Nullable<Int32>) This specific implementation does not make any assunption on source being sorted. Declaration public int Last<T>(IEnumerable<T> source, T item, IComparer<T>? comparer = null, int? fromIndex = null, int? toIndex = null) Parameters Type Name Description IEnumerable <T> source T item System.Nullable < IComparer <T>> comparer System.Nullable < System.Int32 > fromIndex System.Nullable < System.Int32 > toIndex Returns Type Description System.Int32 Type Parameters Name Description T Remarks The algorithm linearly scans the search space from toIndex to fromIndex , one index at every iteration, reducing it linearly to a single item or to an empty set. Time Complexity = O(n), Space Complexity = O(1), where n = number of items between fromIndex and toIndex . | Improve this Doc View Source Nth<T>(IEnumerable<T>, T, Int32, Nullable<IComparer<T>>, Nullable<Int32>, Nullable<Int32>) This specific implementation does not make any assunption on source being sorted. Declaration public int Nth<T>(IEnumerable<T> source, T item, int occurrenceRank, IComparer<T>? comparer = null, int? fromIndex = null, int? toIndex = null) Parameters Type Name Description IEnumerable <T> source T item System.Int32 occurrenceRank System.Nullable < IComparer <T>> comparer System.Nullable < System.Int32 > fromIndex System.Nullable < System.Int32 > toIndex Returns Type Description System.Int32 Type Parameters Name Description T Remarks The algorithm linearly scans the search space from toIndex to fromIndex , one index at every iteration, reducing it linearly to a single item or to an empty set. It just stores the current counter of occurrences of item in source , not all of them. So it has constant, and not linear, space requirements. Time Complexity = O(n), Space Complexity = O(1), where n = number of items between fromIndex and toIndex . Implements ISearch Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.RecImmTrees.Conversions.FullyIterativeStringifier-2.html": {
    "href": "api/MoreStructures.RecImmTrees.Conversions.FullyIterativeStringifier-2.html",
    "title": "Class FullyIterativeStringifier<TEdge, TNode>",
    "keywords": "Class FullyIterativeStringifier<TEdge, TNode> Iterative implementation. Inheritance System.Object StringifierBase <TEdge, TNode> FullyIterativeStringifier<TEdge, TNode> Implements IStringifier <TEdge, TNode> Inherited Members StringifierBase<TEdge, TNode>.NewLine StringifierBase<TEdge, TNode>.Indent StringifierBase<TEdge, TNode>.PathSeparator StringifierBase<TEdge, TNode>.RootStringifier StringifierBase<TEdge, TNode>.EdgeAndNodeStringifier StringifierBase<TEdge, TNode>.Stringify(TNode) StringifierBase<TEdge, TNode>.Stringify(TreePath<TEdge, TNode>) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.RecImmTrees.Conversions Assembly : MoreStructures.dll Syntax public class FullyIterativeStringifier<TEdge, TNode> : StringifierBase<TEdge, TNode>, IStringifier<TEdge, TNode> where TEdge : IRecImmDictIndexedTreeEdge<TEdge, TNode> where TNode : IRecImmDictIndexedTreeNode<TEdge, TNode> Type Parameters Name Description TEdge The type of edges of the specific structure. TNode The type of nodes of the specific structure. Remarks ADVANTAGES AND DISADVANTAGES Implemented fully iteratively via a , so not limited by call stack depth but rather by the maximum size of the stack stored in the heap. Convenient with deep trees (i.e. trees having a height > ~1K nodes). Constructors | Improve this Doc View Source FullyIterativeStringifier(Func<TNode, String>, Func<TEdge, TNode, String>) Declaration public FullyIterativeStringifier(Func<TNode, string> rootStringifier, Func<TEdge, TNode, string> edgeAndNodeStringifier) Parameters Type Name Description Func <TNode, System.String > rootStringifier Func <TEdge, TNode, System.String > edgeAndNodeStringifier Properties | Improve this Doc View Source PrependLevelAfterStopIndenting Whether the actual level should be prepended to the line, once the maximum level of indentation defined at StopIndentingLevel has been reached. Default is true . Declaration public bool PrependLevelAfterStopIndenting { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source StopIndentingLevel The maximum level at which indentation should not be done anymore. Default is System.Int32.MaxValue . Declaration public int StopIndentingLevel { get; set; } Property Value Type Description System.Int32 Remarks COMPLEXITY - When trying to render a very deep structure to string, the resulting string can become extremely big due to indentation. - This can easily happen with structures like SuffixTrieNode . Less with SuffixTreeNode , due to their coalescing of paths of nodes with single child. - For example if the structure is a linear chain of n in depth, 4 chars of indentation per line would yield a string of 2n(n-1) chars = O(n^2). - For n = 10000 nodes the produced string would be ~ 200M. - To avoid that StopIndentingLevel can be set to a constant c, limiting the size of the resulting string by an upper bound of cn = O(n). - For n = 10000 nodes and c = 10 levels the produced string would be 100K. Methods | Improve this Doc View Source Stringify(TNode) Converts the provided IRecImmDictIndexedTreeNode<TEdge, TNode> into a string. Declaration public override string Stringify(TNode node) Parameters Type Name Description TNode node The root of the tree to stringify. Returns Type Description System.String A string version of the provided structure. Overrides MoreStructures.RecImmTrees.Conversions.StringifierBase<TEdge, TNode>.Stringify(TNode) | Improve this Doc View Source Stringify(TreePath<TEdge, TNode>) Converts the provided TreePath<TEdge, TNode> into a string. Declaration public override string Stringify(TreePath<TEdge, TNode> path) Parameters Type Name Description TreePath <TEdge, TNode> path The tree path to stringify. Returns Type Description System.String A string version of the provided path. Overrides MoreStructures.RecImmTrees.Conversions.StringifierBase<TEdge, TNode>.Stringify(MoreStructures.RecImmTrees.TreePath<TEdge, TNode>) Implements IStringifier<TEdge, TNode> Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.RecImmTrees.Conversions.FullyRecursiveStringifier-2.html": {
    "href": "api/MoreStructures.RecImmTrees.Conversions.FullyRecursiveStringifier-2.html",
    "title": "Class FullyRecursiveStringifier<TEdge, TNode>",
    "keywords": "Class FullyRecursiveStringifier<TEdge, TNode> Recursive implementation. The type of edges of the specific structure. The type of nodes of the specific structure. Inheritance System.Object StringifierBase <TEdge, TNode> FullyRecursiveStringifier<TEdge, TNode> Implements IStringifier <TEdge, TNode> Inherited Members StringifierBase<TEdge, TNode>.NewLine StringifierBase<TEdge, TNode>.Indent StringifierBase<TEdge, TNode>.PathSeparator StringifierBase<TEdge, TNode>.RootStringifier StringifierBase<TEdge, TNode>.EdgeAndNodeStringifier StringifierBase<TEdge, TNode>.Stringify(TNode) StringifierBase<TEdge, TNode>.Stringify(TreePath<TEdge, TNode>) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.RecImmTrees.Conversions Assembly : MoreStructures.dll Syntax public class FullyRecursiveStringifier<TEdge, TNode> : StringifierBase<TEdge, TNode>, IStringifier<TEdge, TNode> where TEdge : IRecImmDictIndexedTreeEdge<TEdge, TNode>, IComparable<TEdge> where TNode : IRecImmDictIndexedTreeNode<TEdge, TNode> Type Parameters Name Description TEdge TNode Remarks ADVANTAGES AND DISADVANTAGES Implemented fully recursively, so limited by stack depth and usable with tree of a \"reasonable\" height. Constructors | Improve this Doc View Source FullyRecursiveStringifier(Func<TNode, String>, Func<TEdge, TNode, String>) Declaration public FullyRecursiveStringifier(Func<TNode, string> rootStringifier, Func<TEdge, TNode, string> edgeAndNodeStringifier) Parameters Type Name Description Func <TNode, System.String > rootStringifier Func <TEdge, TNode, System.String > edgeAndNodeStringifier Methods | Improve this Doc View Source Stringify(TNode) Converts the provided IRecImmDictIndexedTreeNode<TEdge, TNode> into a string. Declaration public override string Stringify(TNode node) Parameters Type Name Description TNode node The root of the tree to stringify. Returns Type Description System.String A string version of the provided structure. Overrides MoreStructures.RecImmTrees.Conversions.StringifierBase<TEdge, TNode>.Stringify(TNode) | Improve this Doc View Source Stringify(TreePath<TEdge, TNode>) Converts the provided TreePath<TEdge, TNode> into a string. Declaration public override string Stringify(TreePath<TEdge, TNode> path) Parameters Type Name Description TreePath <TEdge, TNode> path The tree path to stringify. Returns Type Description System.String A string version of the provided path. Overrides MoreStructures.RecImmTrees.Conversions.StringifierBase<TEdge, TNode>.Stringify(MoreStructures.RecImmTrees.TreePath<TEdge, TNode>) Implements IStringifier<TEdge, TNode> Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.RecImmTrees.Conversions.html": {
    "href": "api/MoreStructures.RecImmTrees.Conversions.html",
    "title": "Namespace MoreStructures.RecImmTrees.Conversions",
    "keywords": "Namespace MoreStructures.RecImmTrees.Conversions Classes FullyIterativeStringifier<TEdge, TNode> Iterative implementation. FullyRecursiveStringifier<TEdge, TNode> Recursive implementation. The type of edges of the specific structure. The type of nodes of the specific structure. StringifierBase<TEdge, TNode> Provides concrete properties and defaults for new line, identation and stringifiers. Interfaces IStringifier<TEdge, TNode> A converter from IRecImmDictIndexedTreeNode<TEdge, TNode> structures and paths to string."
  },
  "api/MoreStructures.RecImmTrees.Conversions.IStringifier-2.html": {
    "href": "api/MoreStructures.RecImmTrees.Conversions.IStringifier-2.html",
    "title": "Interface IStringifier<TEdge, TNode>",
    "keywords": "Interface IStringifier<TEdge, TNode> A converter from IRecImmDictIndexedTreeNode<TEdge, TNode> structures and paths to string. Namespace : MoreStructures.RecImmTrees.Conversions Assembly : MoreStructures.dll Syntax public interface IStringifier<TEdge, TNode> where TEdge : IRecImmDictIndexedTreeEdge<TEdge, TNode> where TNode : IRecImmDictIndexedTreeNode<TEdge, TNode> Type Parameters Name Description TEdge The type of edges of the specific structure. TNode The type of nodes of the specific structure. Remarks REQUIREMENTS Requires TEdge to implement , so that output lines are sorted. COMPLEXITY Time Complexity = O(n) and Space Complexity = O(n) where n = number of nodes in the TNode structure/path. Each node and its incoming edge is visited once. Examples var stringifier = ... { NewLine = Environment.NewLine, Indent = '\\t', RootStringifier = n => \"R\", EdgeAndNodeStringifier = (e, n) => $\"{e} -> {n}\", }; var node = ... Console.WriteLine(stringifier.Stringify(node)); Properties | Improve this Doc View Source EdgeAndNodeStringifier A function mapping the provided edge and node to a string. Used for all lines of the output but the first. Declaration Func<TEdge, TNode, string> EdgeAndNodeStringifier { get; set; } Property Value Type Description Func <TEdge, TNode, System.String > | Improve this Doc View Source Indent The character or string used to indent output, to visually express tree levels. Declaration string Indent { get; set; } Property Value Type Description System.String Examples 2 or 4 spaces, a tab, ... | Improve this Doc View Source NewLine The character or string used to separate lines of the output. Declaration string NewLine { get; set; } Property Value Type Description System.String | Improve this Doc View Source PathSeparator The character or string used to join stringified path nodes, when building the output string. Declaration string PathSeparator { get; set; } Property Value Type Description System.String Examples \" -> \", \", \", ... | Improve this Doc View Source RootStringifier A function mapping the top-level node to a string. Used for the first line of the output. Declaration Func<TNode, string> RootStringifier { get; set; } Property Value Type Description Func <TNode, System.String > Methods | Improve this Doc View Source Stringify(TNode) Converts the provided IRecImmDictIndexedTreeNode<TEdge, TNode> into a string. Declaration string Stringify(TNode node) Parameters Type Name Description TNode node The root of the tree to stringify. Returns Type Description System.String A string version of the provided structure. Examples Using 4 spaces as indent, RootStringifier = n => \"R\", and EdgeAndNodeStringifier = (e, n) => $\"{e} -> N\": R e1 -> N e3 -> N e4 -> N e5 -> N e2 -> N e6 -> N | Improve this Doc View Source Stringify(TreePath<TEdge, TNode>) Converts the provided TreePath<TEdge, TNode> into a string. Declaration string Stringify(TreePath<TEdge, TNode> path) Parameters Type Name Description TreePath <TEdge, TNode> path The tree path to stringify. Returns Type Description System.String A string version of the provided path. Examples Using PathSeparator = \" -> \" and EdgeAndNodeStringifier = (e, n) => $\"{e}\": e1 -> e4 -> e5 Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.RecImmTrees.Conversions.StringifierBase-2.html": {
    "href": "api/MoreStructures.RecImmTrees.Conversions.StringifierBase-2.html",
    "title": "Class StringifierBase<TEdge, TNode>",
    "keywords": "Class StringifierBase<TEdge, TNode> Provides concrete properties and defaults for new line, identation and stringifiers. Inheritance System.Object StringifierBase<TEdge, TNode> FullyIterativeStringifier<TEdge, TNode> FullyRecursiveStringifier<TEdge, TNode> Implements IStringifier <TEdge, TNode> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.RecImmTrees.Conversions Assembly : MoreStructures.dll Syntax public abstract class StringifierBase<TEdge, TNode> : IStringifier<TEdge, TNode> where TEdge : IRecImmDictIndexedTreeEdge<TEdge, TNode> where TNode : IRecImmDictIndexedTreeNode<TEdge, TNode> Type Parameters Name Description TEdge The type of edges of the specific structure. TNode The type of nodes of the specific structure. Constructors | Improve this Doc View Source StringifierBase(Func<TNode, String>, Func<TEdge, TNode, String>) Builds an instance of an IStringifier<TEdge, TNode> with the provided stringifiers, for the root and for all other nodes in the three, and with default new line and indent. Declaration protected StringifierBase(Func<TNode, string> rootStringifier, Func<TEdge, TNode, string> edgeAndNodeStringifier) Parameters Type Name Description Func <TNode, System.String > rootStringifier Func <TEdge, TNode, System.String > edgeAndNodeStringifier Properties | Improve this Doc View Source EdgeAndNodeStringifier A function mapping the provided edge and node to a string. Used for all lines of the output but the first. Declaration public Func<TEdge, TNode, string> EdgeAndNodeStringifier { get; set; } Property Value Type Description Func <TEdge, TNode, System.String > | Improve this Doc View Source Indent By default is 4 spaces. Declaration public string Indent { get; set; } Property Value Type Description System.String | Improve this Doc View Source NewLine By default is . Declaration public string NewLine { get; set; } Property Value Type Description System.String | Improve this Doc View Source PathSeparator By default is a single space. Declaration public string PathSeparator { get; set; } Property Value Type Description System.String | Improve this Doc View Source RootStringifier A function mapping the top-level node to a string. Used for the first line of the output. Declaration public Func<TNode, string> RootStringifier { get; set; } Property Value Type Description Func <TNode, System.String > Methods | Improve this Doc View Source Stringify(TNode) Converts the provided IRecImmDictIndexedTreeNode<TEdge, TNode> into a string. Declaration public abstract string Stringify(TNode node) Parameters Type Name Description TNode node The root of the tree to stringify. Returns Type Description System.String A string version of the provided structure. | Improve this Doc View Source Stringify(TreePath<TEdge, TNode>) Converts the provided TreePath<TEdge, TNode> into a string. Declaration public abstract string Stringify(TreePath<TEdge, TNode> path) Parameters Type Name Description TreePath <TEdge, TNode> path The tree path to stringify. Returns Type Description System.String A string version of the provided path. Implements IStringifier<TEdge, TNode> Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.RecImmTrees.html": {
    "href": "api/MoreStructures.RecImmTrees.html",
    "title": "Namespace MoreStructures.RecImmTrees",
    "keywords": "Namespace MoreStructures.RecImmTrees Classes RecImmDictIndexedTreeNodeExtensions Extension methods for all IRecImmDictIndexedTreeNode<TEdge, TNode> node concretions. TreePath<TEdge, TNode> An immutable sequence of TNode , where each node is child of its predecessor and parent of its successor and where node relationships are stored in TEdge instances. TreePathExtensions Extension methods for TreePath<TEdge, TNode> . Interfaces IRecImmDictIndexedTreeEdge<TEdge, TNode> An edge of a IRecImmDictIndexedTreeNode<TEdge, TNode> , directionally linking two nodes and forming a path hop. IRecImmDictIndexedTreeNode<TEdge, TNode> The node of a generic Tree Structure recursively defined and whose nodes are indexed in an immutable dictionary of edges. Has no specific use case in mind and can be a root node, an intermediate node or a leaf node."
  },
  "api/MoreStructures.RecImmTrees.IRecImmDictIndexedTreeEdge-2.html": {
    "href": "api/MoreStructures.RecImmTrees.IRecImmDictIndexedTreeEdge-2.html",
    "title": "Interface IRecImmDictIndexedTreeEdge<TEdge, TNode>",
    "keywords": "Interface IRecImmDictIndexedTreeEdge<TEdge, TNode> An edge of a IRecImmDictIndexedTreeNode<TEdge, TNode> , directionally linking two nodes and forming a path hop. Namespace : MoreStructures.RecImmTrees Assembly : MoreStructures.dll Syntax public interface IRecImmDictIndexedTreeEdge<TEdge, TNode> where TEdge : IRecImmDictIndexedTreeEdge<TEdge, TNode> where TNode : IRecImmDictIndexedTreeNode<TEdge, TNode> Type Parameters Name Description TEdge The type of edges of the specific structure. TNode The type of nodes of the specific structure. Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.RecImmTrees.IRecImmDictIndexedTreeNode-2.html": {
    "href": "api/MoreStructures.RecImmTrees.IRecImmDictIndexedTreeNode-2.html",
    "title": "Interface IRecImmDictIndexedTreeNode<TEdge, TNode>",
    "keywords": "Interface IRecImmDictIndexedTreeNode<TEdge, TNode> The node of a generic Tree Structure recursively defined and whose nodes are indexed in an immutable dictionary of edges. Has no specific use case in mind and can be a root node, an intermediate node or a leaf node. Namespace : MoreStructures.RecImmTrees Assembly : MoreStructures.dll Syntax public interface IRecImmDictIndexedTreeNode<TEdge, TNode> where TEdge : IRecImmDictIndexedTreeEdge<TEdge, TNode> where TNode : IRecImmDictIndexedTreeNode<TEdge, TNode> Type Parameters Name Description TEdge The type of edges of the specific structure. TNode The type of nodes of the specific structure. Properties | Improve this Doc View Source Children A readonly view of the children private collection of this node. Empty for leaves. Declaration IDictionary<TEdge, TNode> Children { get; } Property Value Type Description IDictionary <TEdge, TNode> Extension Methods RecImmDictIndexedTreeNodeExtensions.IsLeaf<TEdge, TNode>(IRecImmDictIndexedTreeNode<TEdge, TNode>) SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.RecImmTrees.Paths.FullyIterativeNodeToLeafPathsBuilder.html": {
    "href": "api/MoreStructures.RecImmTrees.Paths.FullyIterativeNodeToLeafPathsBuilder.html",
    "title": "Class FullyIterativeNodeToLeafPathsBuilder",
    "keywords": "Class FullyIterativeNodeToLeafPathsBuilder Iterative implementation. Inheritance System.Object FullyIterativeNodeToLeafPathsBuilder Implements INodeToLeafPathsBuilder Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.RecImmTrees.Paths Assembly : MoreStructures.dll Syntax public class FullyIterativeNodeToLeafPathsBuilder : INodeToLeafPathsBuilder Remarks ADVANTAGES AND DISADVANTAGES Implemented fully iteratively via a , so not limited by call stack depth but rather by the maximum size of the stack stored in the heap. Convenient with deep trees (i.e. trees having a height > ~1K nodes). ALGORITHM The implementation uses a , onto which quadrules are stacked up: (incoming edge, node, queue of subpaths of the parent node of node, queue of subpaths of the node itself). - A queue of subpaths of the root node is instantiated empty. It will collect the output TreePath<TEdge, TNode> instances. - Children (node and incoming edge) of the root node are pushed onto the stack in reverse order. The queue of subpaths of the root is passed to each child. The queue of the child is set to null , since children of the child haven't been processed yet (i.e. the child queue of subpath hasn't been populated yet). - Then the stack processing loop is performed. After every stack item is processed, the queue of subpaths of the root is unloaded, emitting TreePath<TEdge, TNode> instances from the collected of of edges and nodes. Stack processing iteration: - The frame at the top of the stack is popped. - If the node is a leaf, the node and its incoming edge are added to the queue of subpaths of the parent node. - If the node has children and the queue of subpaths of the node is set, children have been already processed. So as many paths are enqueued to the queue of subpaths of the parent node as paths in the queue of subpaths of the node. Each subpath of the node is prepended with the node itself. - If the node has children and the queue of subpaths of the node is not set, children have not been processed yet. So create a new queue for the subpaths of the node and push the node back to the stack, this time with the queue of subpaths set. Then push all the children of the node to the stack (in reverse order), passing the queue of subpaths of the node as queue of subpaths of the parent, and the queue of subpaths of the child not set. COMPLEXITY - Each node is pushed to the stack and then processed at most twice (only once for leaves). So the maximum number of items in the stack is 2 * n, where n = number of nodes in the tree. - The total number of paths from root to leaf is equal to the total number of leaves of the tree, which can be at most n (if the root itself is a leaf), n - 1 (if the root is not a leaf and the tree is completely flat) or anything down to 1 (if the tree is as unbalanced as it can be). - Each stack processing iteration does constant time work: stack item deconstruction, check whether the node is a leaf or not, instantiate a queue of subpaths of the node. Children are iterated, however, the total number of children iteration over all the nodes of the tree is equal to the number of edges, which is n - 1. - For each non-leaf node (and there can be O(n) of those), a queue of subpaths is instantiated and populated. Such queue can have O(n) items in it (for a flattish tree), each being a subpath of length O(n). This would suggest a cubic complexity. However, there is at most a total of n root-to-leaf paths, each being at most of length n, so overall Space Complexity is quadratic. - So Time Complexity is O(n) and Space Complexity is O(n^2). Methods | Improve this Doc View Source GetAllNodeToLeafPaths<TEdge, TNode>(TNode) Returns all TreePath<TEdge, TNode> from the provided node to a leaf. Declaration public IEnumerable<TreePath<TEdge, TNode>> GetAllNodeToLeafPaths<TEdge, TNode>(TNode node) where TEdge : IRecImmDictIndexedTreeEdge<TEdge, TNode> where TNode : IRecImmDictIndexedTreeNode<TEdge, TNode> Parameters Type Name Description TNode node The node, to start the structure traversal from. Returns Type Description IEnumerable < TreePath <TEdge, TNode>> A sequence of TreePath<TEdge, TNode> . Type Parameters Name Description TEdge The type of edges of the specific structure. TNode The type of nodes of the specific structure. Implements INodeToLeafPathsBuilder Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.RecImmTrees.Paths.FullyRecursiveNodeToLeafPathsBuilder.html": {
    "href": "api/MoreStructures.RecImmTrees.Paths.FullyRecursiveNodeToLeafPathsBuilder.html",
    "title": "Class FullyRecursiveNodeToLeafPathsBuilder",
    "keywords": "Class FullyRecursiveNodeToLeafPathsBuilder Recursive implementation. Inheritance System.Object FullyRecursiveNodeToLeafPathsBuilder Implements INodeToLeafPathsBuilder Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.RecImmTrees.Paths Assembly : MoreStructures.dll Syntax public class FullyRecursiveNodeToLeafPathsBuilder : INodeToLeafPathsBuilder Remarks ADVANTAGES AND DISADVANTAGES Implemented fully recursively, so limited by stack depth and usable with tree of a \"reasonable\" height. ALGORITHM - The implementation iterates over the children, getting its node-to-leaf subpaths by calling GetAllNodeToLeafPaths<TEdge, TNode>(TNode) recursively. - Then, it prepends the child and its incoming edge to each subpath of each child. - If the node has no child, a singleton path is returned, containing only the child and its incoming edge. COMPLEXITY - Each node is processed once and the number of node-to-leaf paths returned has an upper bound on n = number of nodes in the tree. The length of each node-to-leaf path is also limited by n. - So, both Time and Space Complexity are O(n). Methods | Improve this Doc View Source GetAllNodeToLeafPaths<TEdge, TNode>(TNode) Returns all TreePath<TEdge, TNode> from the provided node to a leaf. Declaration public IEnumerable<TreePath<TEdge, TNode>> GetAllNodeToLeafPaths<TEdge, TNode>(TNode node) where TEdge : IRecImmDictIndexedTreeEdge<TEdge, TNode> where TNode : IRecImmDictIndexedTreeNode<TEdge, TNode> Parameters Type Name Description TNode node The node, to start the structure traversal from. Returns Type Description IEnumerable < TreePath <TEdge, TNode>> A sequence of TreePath<TEdge, TNode> . Type Parameters Name Description TEdge The type of edges of the specific structure. TNode The type of nodes of the specific structure. Implements INodeToLeafPathsBuilder Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.RecImmTrees.Paths.html": {
    "href": "api/MoreStructures.RecImmTrees.Paths.html",
    "title": "Namespace MoreStructures.RecImmTrees.Paths",
    "keywords": "Namespace MoreStructures.RecImmTrees.Paths Classes FullyIterativeNodeToLeafPathsBuilder Iterative implementation. FullyRecursiveNodeToLeafPathsBuilder Recursive implementation. Interfaces INodeToLeafPathsBuilder An algorithm building all TreePath<TEdge, TNode> from the provided IRecImmDictIndexedTreeNode<TEdge, TNode> to a leaf."
  },
  "api/MoreStructures.RecImmTrees.Paths.INodeToLeafPathsBuilder.html": {
    "href": "api/MoreStructures.RecImmTrees.Paths.INodeToLeafPathsBuilder.html",
    "title": "Interface INodeToLeafPathsBuilder",
    "keywords": "Interface INodeToLeafPathsBuilder An algorithm building all TreePath<TEdge, TNode> from the provided IRecImmDictIndexedTreeNode<TEdge, TNode> to a leaf. Namespace : MoreStructures.RecImmTrees.Paths Assembly : MoreStructures.dll Syntax public interface INodeToLeafPathsBuilder Methods | Improve this Doc View Source GetAllNodeToLeafPaths<TEdge, TNode>(TNode) Returns all TreePath<TEdge, TNode> from the provided node to a leaf. Declaration IEnumerable<TreePath<TEdge, TNode>> GetAllNodeToLeafPaths<TEdge, TNode>(TNode node) where TEdge : IRecImmDictIndexedTreeEdge<TEdge, TNode> where TNode : IRecImmDictIndexedTreeNode<TEdge, TNode> Parameters Type Name Description TNode node The node, to start the structure traversal from. Returns Type Description IEnumerable < TreePath <TEdge, TNode>> A sequence of TreePath<TEdge, TNode> . Type Parameters Name Description TEdge The type of edges of the specific structure. TNode The type of nodes of the specific structure. Examples Given the following tree structure: 0 |- 0 -> 1 | |- 1 -> 2 | |- 2 -> 3 | | |- 3 -> 4 | |- 4 -> 5 |- 5 -> 6 |- 6 -> 7 |- 7 -> 8 |- 8 -> 9 |- 9 -> 10 The method would return the following node-to-leaf paths: (0 -> 1) => (1 -> 2) (0 -> 1) => (2 -> 3) => (3 -> 4) (0 -> 1) => (4 -> 5) (5 -> 6) (6 -> 7) => (7 -> 8) => (8 -> 9) (6 -> 7) => (7 -> 8) => (9 -> 10) Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.RecImmTrees.RecImmDictIndexedTreeNodeExtensions.html": {
    "href": "api/MoreStructures.RecImmTrees.RecImmDictIndexedTreeNodeExtensions.html",
    "title": "Class RecImmDictIndexedTreeNodeExtensions",
    "keywords": "Class RecImmDictIndexedTreeNodeExtensions Extension methods for all IRecImmDictIndexedTreeNode<TEdge, TNode> node concretions. Inheritance System.Object RecImmDictIndexedTreeNodeExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.RecImmTrees Assembly : MoreStructures.dll Syntax public static class RecImmDictIndexedTreeNodeExtensions Methods | Improve this Doc View Source IsLeaf<TEdge, TNode>(IRecImmDictIndexedTreeNode<TEdge, TNode>) Whether the provided node is a leaf (i.e. has no children), or not. Declaration public static bool IsLeaf<TEdge, TNode>(this IRecImmDictIndexedTreeNode<TEdge, TNode> node) where TEdge : IRecImmDictIndexedTreeEdge<TEdge, TNode> where TNode : IRecImmDictIndexedTreeNode<TEdge, TNode> Parameters Type Name Description IRecImmDictIndexedTreeNode <TEdge, TNode> node The node whose children have to be checked. Returns Type Description System.Boolean Type Parameters Name Description TEdge TNode"
  },
  "api/MoreStructures.RecImmTrees.TreePath-2.html": {
    "href": "api/MoreStructures.RecImmTrees.TreePath-2.html",
    "title": "Class TreePath<TEdge, TNode>",
    "keywords": "Class TreePath<TEdge, TNode> An immutable sequence of TNode , where each node is child of its predecessor and parent of its successor and where node relationships are stored in TEdge instances. Inheritance System.Object TreePath<TEdge, TNode> Implements System.IEquatable < TreePath <TEdge, TNode>> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : MoreStructures.RecImmTrees Assembly : MoreStructures.dll Syntax public class TreePath<TEdge, TNode> : IEquatable<TreePath<TEdge, TNode>> where TEdge : IRecImmDictIndexedTreeEdge<TEdge, TNode> where TNode : IRecImmDictIndexedTreeNode<TEdge, TNode> Type Parameters Name Description TEdge The type of edges of the specific structure. TNode The type of nodes of the specific structure. Remarks Immutability is guaranteed by using ValueReadOnlyDictionary<TKey, TValue> . Constructors | Improve this Doc View Source TreePath() Builds an empty path, i.e. an empty sequence of nodes. Declaration public TreePath() | Improve this Doc View Source TreePath(TEdge, TNode) Builds a path composed of a single node with its incoming edge. Declaration public TreePath(TEdge edge, TNode node) Parameters Type Name Description TEdge edge The edge leading to the node. TNode node The node defining the singleton path. | Improve this Doc View Source TreePath(IEnumerable<KeyValuePair<TEdge, TNode>>) An immutable sequence of TNode , where each node is child of its predecessor and parent of its successor and where node relationships are stored in TEdge instances. Declaration public TreePath(IEnumerable<KeyValuePair<TEdge, TNode>> PathNodes) Parameters Type Name Description IEnumerable < KeyValuePair <TEdge, TNode>> PathNodes The sequence of nodes respecting the parent-child relationship. Remarks Immutability is guaranteed by using ValueReadOnlyDictionary<TKey, TValue> . | Improve this Doc View Source TreePath((TEdge edge, TNode node)[]) Builds a path composed of the provided couples of edges and nodes. Declaration public TreePath(params (TEdge edge, TNode node)[] pathNodes) Parameters Type Name Description System.ValueTuple <TEdge, TNode>[] pathNodes An array of couples (edge, node). Properties | Improve this Doc View Source PathNodes A readonly view of the private collection of path TNode instances. Declaration public IEnumerable<KeyValuePair<TEdge, TNode>> PathNodes { get; } Property Value Type Description IEnumerable < KeyValuePair <TEdge, TNode>> Methods | Improve this Doc View Source ToString() Uses a IStringifier<TEdge, TNode> to generate the string. Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Implements System.IEquatable<T> Extension Methods TreePathExtensions.Concat<TEdge, TNode>(TreePath<TEdge, TNode>, TreePath<TEdge, TNode>) TreePathExtensions.Append<TEdge, TNode>(TreePath<TEdge, TNode>, TEdge, TNode) SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.RecImmTrees.TreePathExtensions.html": {
    "href": "api/MoreStructures.RecImmTrees.TreePathExtensions.html",
    "title": "Class TreePathExtensions",
    "keywords": "Class TreePathExtensions Extension methods for TreePath<TEdge, TNode> . Inheritance System.Object TreePathExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.RecImmTrees Assembly : MoreStructures.dll Syntax public static class TreePathExtensions Methods | Improve this Doc View Source Append<TEdge, TNode>(TreePath<TEdge, TNode>, TEdge, TNode) Append the provided node with its incoming edge to the provided path, bulding a new path. Declaration public static TreePath<TEdge, TNode> Append<TEdge, TNode>(this TreePath<TEdge, TNode> path, TEdge edge, TNode node) where TEdge : IRecImmDictIndexedTreeEdge<TEdge, TNode> where TNode : IRecImmDictIndexedTreeNode<TEdge, TNode> Parameters Type Name Description TreePath <TEdge, TNode> path The path, to appended the node and the edge to. TEdge edge The edge, pointing to the node to be appended. TNode node The node to be appended. Returns Type Description TreePath <TEdge, TNode> A new path, whose nodes are the concatenation of the nodes of the provided path and the one appended. Type Parameters Name Description TEdge TNode | Improve this Doc View Source Concat<TEdge, TNode>(TreePath<TEdge, TNode>, TreePath<TEdge, TNode>) Builds a new path of nodes, appending the nodes of the second path to the first path. Declaration public static TreePath<TEdge, TNode> Concat<TEdge, TNode>(this TreePath<TEdge, TNode> first, TreePath<TEdge, TNode> second) where TEdge : IRecImmDictIndexedTreeEdge<TEdge, TNode> where TNode : IRecImmDictIndexedTreeNode<TEdge, TNode> Parameters Type Name Description TreePath <TEdge, TNode> first The path, to append nodes to. TreePath <TEdge, TNode> second The path, whose nodes have to be appended. Returns Type Description TreePath <TEdge, TNode> A new path, whose nodes are the concatenation of the nodes of the two paths. Type Parameters Name Description TEdge TNode"
  },
  "api/MoreStructures.RecImmTrees.Visitor.BreadthFirstTraversal-2.html": {
    "href": "api/MoreStructures.RecImmTrees.Visitor.BreadthFirstTraversal-2.html",
    "title": "Class BreadthFirstTraversal<TEdge, TNode>",
    "keywords": "Class BreadthFirstTraversal<TEdge, TNode> Base class for all BFT strategies, i.e. all traversing strategies which visit all the nodes at the current depth, along any path of the tree, before going deeper or shallower, exploring nodes with higher or lower depth. Inheritance System.Object TreeTraversal <TEdge, TNode> BreadthFirstTraversal<TEdge, TNode> FullyIterativeBreadthFirstTraversal<TEdge, TNode> FullyRecursiveBreadthFirstTraversal<TEdge, TNode> Implements IVisitStrategy <TNode, TreeTraversalVisit <TEdge, TNode>> Inherited Members TreeTraversal<TEdge, TNode>.TraversalOrder TreeTraversal<TEdge, TNode>.ChildrenSorter TreeTraversal<TEdge, TNode>.Visit(TNode) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.RecImmTrees.Visitor Assembly : MoreStructures.dll Syntax public abstract class BreadthFirstTraversal<TEdge, TNode> : TreeTraversal<TEdge, TNode>, IVisitStrategy<TNode, TreeTraversalVisit<TEdge, TNode>> where TEdge : IRecImmDictIndexedTreeEdge<TEdge, TNode> where TNode : IRecImmDictIndexedTreeNode<TEdge, TNode> Type Parameters Name Description TEdge TNode Remarks TRAVERSAL VS VISIT The word \"traversal\" in TreeTraversal<TEdge, TNode> and its derivations, is here used with narrower scope than the word \"visit\" in IVisitStrategy<TNode, TVisitContext> . - \"Traversal\" is used here as common class between DFS and BFS, as a visit strategy that starts from the root of the tree and proceeds downwards, following edges and terminating when leafs are reached. - \"Visit\" is used in a more general sense, as any algorithm which \"touches\" 0 or more nodes of the tree, walking the tree in any possible way (up, down, sideways, ...). Examples Given the following tree structure: 0 |- 0 -> 1 | |- 1 -> 2 | |- 2 -> 3 | | |- 3 -> 4 | |- 4 -> 5 |- 5 -> 6 |- 6 -> 7 |- 7 -> 8 |- 8 -> 9 |- 9 -> 10 A BFT visit strategy \"parent first\" would visit nodes and edges in either of the following ways, depending on how children are sorted (lower-id edge first, lower-id edge last, median-id edge first, ...): - { (null, 0), (0, 1), (5, 6), (6, 7), (1, 2), (2, 3), (4, 5), (7, 8), (3, 4), (8, 9), (9, 10) } - { (null, 0), (6, 7), (5, 6), (0, 1), (7, 8), (4, 5), (2, 3), (1, 2), (9, 10), (8, 9), (3, 4) } - { (null, 0), (5, 6), (6, 7), (0, 1), (7, 8), (2, 3), (4, 5), (1, 2), (9, 10), (8, 9), (3, 4) } - ... A BFT visit strategy \"children first\" would visit nodes and edges in either of the following ways, depending on how children are sorted: - { (3, 4), (8, 9), (9, 10), (1, 2), (2, 3), (4, 5), (7, 8), (0, 1), (5, 6), (6, 7), (null, 0) } - { (9, 10), (8, 9), (3, 4), (7, 8), (4, 5), (2, 3), (1, 2), (6, 7), (5, 6), (0, 1), (null, 0) } - ... Implements IVisitStrategy<TNode, TVisitContext> Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.RecImmTrees.Visitor.DepthFirstTraversal-2.html": {
    "href": "api/MoreStructures.RecImmTrees.Visitor.DepthFirstTraversal-2.html",
    "title": "Class DepthFirstTraversal<TEdge, TNode>",
    "keywords": "Class DepthFirstTraversal<TEdge, TNode> Base class for all DFS strategies, i.e. all traversing strategies which goes in depth as far as possible along each path of the tree, only backtracking when a leaf is reached. Inheritance System.Object TreeTraversal <TEdge, TNode> DepthFirstTraversal<TEdge, TNode> FullyIterativeDepthFirstTraversal<TEdge, TNode> FullyRecursiveDepthFirstTraversal<TEdge, TNode> Implements IVisitStrategy <TNode, TreeTraversalVisit <TEdge, TNode>> Inherited Members TreeTraversal<TEdge, TNode>.TraversalOrder TreeTraversal<TEdge, TNode>.ChildrenSorter TreeTraversal<TEdge, TNode>.Visit(TNode) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.RecImmTrees.Visitor Assembly : MoreStructures.dll Syntax public abstract class DepthFirstTraversal<TEdge, TNode> : TreeTraversal<TEdge, TNode>, IVisitStrategy<TNode, TreeTraversalVisit<TEdge, TNode>> where TEdge : IRecImmDictIndexedTreeEdge<TEdge, TNode> where TNode : IRecImmDictIndexedTreeNode<TEdge, TNode> Type Parameters Name Description TEdge TNode Remarks TRAVERSAL VS VISIT The word \"traversal\" in TreeTraversal<TEdge, TNode> and its derivations, is here used with narrower scope than the word \"visit\" in IVisitStrategy<TNode, TVisitContext> . - \"Traversal\" is used here as common class between DFS and BFS, as a visit strategy that starts from the root of the tree and proceeds downwards, following edges and terminating when leafs are reached. - \"Visit\" is used in a more general sense, as any algorithm which \"touches\" 0 or more nodes of the tree, walking the tree in any possible way (up, down, sideways, ...). Examples Given the following tree structure: 0 |- 0 -> 1 | |- 1 -> 2 | |- 2 -> 3 | | |- 3 -> 4 | |- 4 -> 5 |- 5 -> 6 |- 6 -> 7 |- 7 -> 8 |- 8 -> 9 |- 9 -> 10 A DFS visit strategy \"parent first\" would visit nodes and edges in either of the following ways, depending on how children are sorted (lower-id edge first, lower-id edge last, median-id edge first, ...): - { (null, 0), (0, 1), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10) } - { (null, 0), (6, 7), (7, 8), (9, 10), (8, 9), (5, 6), (0, 1), (4, 5), (2, 3), (3, 4), (1, 2) } - { (null, 0), (5, 6), (6, 7), (7, 8), (9, 10), (8, 9), (0, 1), (2, 3), (3, 4), (4, 5), (1, 2) } - ... A DFS visit strategy \"children first\" would visit nodes and edges in either of the following ways, depending on how children are sorted: - { (1, 2), (3, 4), (2, 3), (4, 5), (0, 1), (5, 6), (8, 9), (9, 10), (7, 8), (6, 7), (null, 0) } - { (9, 10), (8, 9), (7, 8), (6, 7), (5, 6), (4, 5), (3, 4), (2, 3), (1, 2), (0, 1), (null, 0) } - ... Implements IVisitStrategy<TNode, TVisitContext> Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.RecImmTrees.Visitor.FullyIterativeBreadthFirstTraversal-2.html": {
    "href": "api/MoreStructures.RecImmTrees.Visitor.FullyIterativeBreadthFirstTraversal-2.html",
    "title": "Class FullyIterativeBreadthFirstTraversal<TEdge, TNode>",
    "keywords": "Class FullyIterativeBreadthFirstTraversal<TEdge, TNode> A lazy, fully-iterative, breadth-first IVisitStrategy<TNode, TVisitContext> implementation, i.e. a traversing strategy which visits all the nodes at the current depth, along any path of the tree, before going deeper or shallower, exploring nodes with higher or lower depth. Inheritance System.Object TreeTraversal <TEdge, TNode> BreadthFirstTraversal <TEdge, TNode> FullyIterativeBreadthFirstTraversal<TEdge, TNode> Implements IVisitStrategy <TNode, TreeTraversalVisit <TEdge, TNode>> Inherited Members TreeTraversal<TEdge, TNode>.TraversalOrder TreeTraversal<TEdge, TNode>.ChildrenSorter TreeTraversal<TEdge, TNode>.Visit(TNode) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.RecImmTrees.Visitor Assembly : MoreStructures.dll Syntax public class FullyIterativeBreadthFirstTraversal<TEdge, TNode> : BreadthFirstTraversal<TEdge, TNode>, IVisitStrategy<TNode, TreeTraversalVisit<TEdge, TNode>> where TEdge : IRecImmDictIndexedTreeEdge<TEdge, TNode> where TNode : IRecImmDictIndexedTreeNode<TEdge, TNode> Type Parameters Name Description TEdge TNode Remarks ADVANTAGES AND DISADVANTAGES Implemented fully iteratively, so not limited by call stack depth but rather by the maximum size of the stack stored in the heap. Convenient with deep trees (i.e. trees having a height > ~1K nodes). Methods | Improve this Doc View Source Visit(TNode) Lazily and iteratively visits the structure of the provided node , returning the sequence of IRecImmDictIndexedTreeNode<TEdge, TNode> of the structure, in breadth-first order. Declaration public override IEnumerable<TreeTraversalVisit<TEdge, TNode>> Visit(TNode node) Parameters Type Name Description TNode node The node on where to start visit the structure. Returns Type Description IEnumerable < TreeTraversalVisit <TEdge, TNode>> A sequence emitting (node, visit context) couples, in the visit order defined by the visit strategy. Overrides MoreStructures.RecImmTrees.Visitor.TreeTraversal<TEdge, TNode>.Visit(TNode) Remarks ALGORITHM The algorithm performs a double walk: - The first walk is of the nodes of the tree structure and always proceeds top-down, enqueuing each encountered child for each node into a \"traversal\" , which is used to reproduce the breadth-first order. - The first walk also enqueues each encountered node into a \"visit\" , if the TraversalOrder is ParentFirst , or it pushes it onto a \"visit\" , if it is ChildrenFirst . - The second walk goes through the \"visit\" queue/stack, yielding to the output sequence, so that the client code implementing the visitor can lazily process the nodes. COMPLEXITY Each of the walk goes through all the n nodes and n - 1 edges of the tree. Each walk uses a O(1) insertion and extraction data structure, which contains at most n elements of constant size (reference to the node, reference to its parent, reference to its incoming edge). Time Complexity is O(n) for the first walk, when the visit queue/stack is populated and no actual node visit is performed, and O(n) for the second walk, when the actual visit of all nodes is performed. So O(n) in total. Space Complexity is O(2n) for the first walk, due to the traversal and visit queue/stack being allocated and populated, and O(n) for the second walk, when the actual visit of all nodes is performed. So O(n) in total. Implements IVisitStrategy<TNode, TVisitContext> Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.RecImmTrees.Visitor.FullyIterativeDepthFirstTraversal-2.html": {
    "href": "api/MoreStructures.RecImmTrees.Visitor.FullyIterativeDepthFirstTraversal-2.html",
    "title": "Class FullyIterativeDepthFirstTraversal<TEdge, TNode>",
    "keywords": "Class FullyIterativeDepthFirstTraversal<TEdge, TNode> A lazy, fully-iterative, depth-first IVisitStrategy<TNode, TVisitContext> implementation, i.e. a traversing strategy which goes in depth as far as possible along each path of the tree, only backtracking when a leaf is reached. Inheritance System.Object TreeTraversal <TEdge, TNode> DepthFirstTraversal <TEdge, TNode> FullyIterativeDepthFirstTraversal<TEdge, TNode> Implements IVisitStrategy <TNode, TreeTraversalVisit <TEdge, TNode>> Inherited Members TreeTraversal<TEdge, TNode>.TraversalOrder TreeTraversal<TEdge, TNode>.ChildrenSorter TreeTraversal<TEdge, TNode>.Visit(TNode) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.RecImmTrees.Visitor Assembly : MoreStructures.dll Syntax public class FullyIterativeDepthFirstTraversal<TEdge, TNode> : DepthFirstTraversal<TEdge, TNode>, IVisitStrategy<TNode, TreeTraversalVisit<TEdge, TNode>> where TEdge : IRecImmDictIndexedTreeEdge<TEdge, TNode> where TNode : IRecImmDictIndexedTreeNode<TEdge, TNode> Type Parameters Name Description TEdge TNode Remarks ADVANTAGES AND DISADVANTAGES Implemented fully iteratively, so not limited by call stack depth but rather by the maximum size of the stack stored in the heap. Convenient with deep trees (i.e. trees having a height > ~1K nodes). Methods | Improve this Doc View Source Visit(TNode) Lazily and iteratively visits the structure of the provided node , returning the sequence of IRecImmDictIndexedTreeNode<TEdge, TNode> of the structure, in depth-first order. Declaration public override IEnumerable<TreeTraversalVisit<TEdge, TNode>> Visit(TNode node) Parameters Type Name Description TNode node The node on where to start visit the structure. Returns Type Description IEnumerable < TreeTraversalVisit <TEdge, TNode>> A sequence emitting (node, visit context) couples, in the visit order defined by the visit strategy. Overrides MoreStructures.RecImmTrees.Visitor.TreeTraversal<TEdge, TNode>.Visit(TNode) Remarks ALGORITHM The algorithm uses a : - At the beginning the stack contains only a frame with the root node, no parent node nor incoming edge and with a System.Boolean indicating the children for this node haven't been added to the stack yet; - Then each frame at the top of the stack is popped out and processed, until the stack is empty. - If the node being processed has the \"children stacked\" flag not set, all children are stacked up. The node itself is also stacked up, again, this time with the \"children stacked\" flag set. - If the node being processed has the \"children stacked\" flag set, or is a leaf, it's yielded to the output sequence, so that the client code implementing the visitor can lazily process the nodes. COMPLEXITY - Each of the n nodes and n - 1 edges of the tree is visited at most twice: the first time with the \"children stacked\" flag unset and a second time with the flag set. Leafs are only visited once, since they have no children and don't have to wait for their children to be visited. - ChildrenSorter can also increase time and space complexity, especially if it perform an actual sorting of nodes. For example, if the sorter takes n * log(n) time - The emitted by ChildrenSorter is reversed to be pushed onto the stack in the right order, and that takes additional O(n - 1) total space, since there are n - 1 edges, which are 1-to-1 with nodes in the tree. - Each frame processing of a node with the \"children stacked\" flag set takes constant time (e.g.to check traversal order) and space (e.g. to extract parent node, incoming edge and node itself from the frame and to build a TreeTraversalVisit<TEdge, TNode> object for the visit). - Time Complexity is O(n * Ts) in total, where Ts is the amortized Time Complexity of ChildrenSorter per edge/node. Taking into account the visit of each emitted node, Time Complexity is O(n * Ts * Tv), where Tv is the Time Complexity of the visitor per node. - Space Complexity is O(n * Ss) in total, where Ss is the amortized Space Complexity of ChildrenSorter per edge/node. Taking into account the visit of each emitted node, Space Complexity is O(n * (Ss + Sv)), where Sv is the Space Complexity of the visitor per node. Implements IVisitStrategy<TNode, TVisitContext> Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.RecImmTrees.Visitor.FullyRecursiveBreadthFirstTraversal-2.html": {
    "href": "api/MoreStructures.RecImmTrees.Visitor.FullyRecursiveBreadthFirstTraversal-2.html",
    "title": "Class FullyRecursiveBreadthFirstTraversal<TEdge, TNode>",
    "keywords": "Class FullyRecursiveBreadthFirstTraversal<TEdge, TNode> A lazy, fully-recursive, breadth-first IVisitStrategy<TNode, TVisitContext> implementation, i.e. a traversing strategy which visits all the nodes at the current depth, along any path of the tree, before going deeper or shallower, exploring nodes with higher or lower depth. Inheritance System.Object TreeTraversal <TEdge, TNode> BreadthFirstTraversal <TEdge, TNode> FullyRecursiveBreadthFirstTraversal<TEdge, TNode> Implements IVisitStrategy <TNode, TreeTraversalVisit <TEdge, TNode>> Inherited Members TreeTraversal<TEdge, TNode>.TraversalOrder TreeTraversal<TEdge, TNode>.ChildrenSorter TreeTraversal<TEdge, TNode>.Visit(TNode) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.RecImmTrees.Visitor Assembly : MoreStructures.dll Syntax public class FullyRecursiveBreadthFirstTraversal<TEdge, TNode> : BreadthFirstTraversal<TEdge, TNode>, IVisitStrategy<TNode, TreeTraversalVisit<TEdge, TNode>> where TEdge : IRecImmDictIndexedTreeEdge<TEdge, TNode> where TNode : IRecImmDictIndexedTreeNode<TEdge, TNode> Type Parameters Name Description TEdge TNode Remarks ADVANTAGES AND DISADVANTAGES Implemented fully recursively, so limited by stack depth and usable with tree of a \"reasonable\" height. Methods | Improve this Doc View Source Visit(TNode) Lazily and recursively visits the structure of the provided node , returning the sequence of IRecImmDictIndexedTreeNode<TEdge, TNode> of the structure, in breadth-first order. Declaration public override IEnumerable<TreeTraversalVisit<TEdge, TNode>> Visit(TNode node) Parameters Type Name Description TNode node The node on where to start visit the structure. Returns Type Description IEnumerable < TreeTraversalVisit <TEdge, TNode>> A sequence emitting (node, visit context) couples, in the visit order defined by the visit strategy. Overrides MoreStructures.RecImmTrees.Visitor.TreeTraversal<TEdge, TNode>.Visit(TNode) Remarks ALGORITHM - The algorithm first lazily visits all nodes in structure in natural recursion/depth-first order, returning an instance of all nodes with their level in the structure. - Then, it lazily sort and visit them level by level, according to TraversalOrder , yielding to the output sequence, so that the client code implementing the visitor can lazily process the nodes. COMPLEXITY - Excluding visitor, constant time work is done for each of the n nodes of the tree (such as destructuring of items and construction of the input record for the recursive call). - Recursive traversal, as well as sorting, are lazily executed. Iteration-cost is constant w.r.t. n. ChildrenSorter cost depends on the actual algorithm used. When no sorting, Counting Sort or QuickSort is applied (respectively O(1), O(n), O(n * log(n)), the cost is tipically equalized or exceeded by sorting cost (see below). - So Time Complexity is dominated by the two operations on the generated by the recursive traversal: sorting and visitor. - Sorting done on the of all the n nodes retrieved during recursive traversal via the LINQ functionalities and . - Visitor is client code invoked during iteration of the output sequence, containing each of the n nodes of the sorted . - If the size of alphabet of elements of the tree is a small constant c, sorting could be done in linear time via Counting Sort. Otherwise, a comparison-based sorting takes at best a time proportional to n * log(n). However, LINQ sorting by and is QuickSort based, and has a O(n * log(n)) average runtime, with O(n^2) worst case. In conclusion: - Time Complexity is O(n * (log(n) + Ts)), where Ts is the amortized time cost of ChildrenSorter per node. Taking into account the visit of each emitted node, Time Complexity is O(n * (log(n) + Ts + Tv)), where Tv is the time cost of the visitor per node. - Space Complexity is O(n). Taking into account the visit of each emitted node, Space Complexity is O(n * Sv), where Sv is the space cost of visitor per node. Implements IVisitStrategy<TNode, TVisitContext> Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.RecImmTrees.Visitor.FullyRecursiveDepthFirstTraversal-2.html": {
    "href": "api/MoreStructures.RecImmTrees.Visitor.FullyRecursiveDepthFirstTraversal-2.html",
    "title": "Class FullyRecursiveDepthFirstTraversal<TEdge, TNode>",
    "keywords": "Class FullyRecursiveDepthFirstTraversal<TEdge, TNode> A lazy, fully-recursive, depth-first IVisitStrategy<TNode, TVisitContext> implementation, i.e. a traversing strategy which goes in depth as far as possible along each path of the tree, only backtracking when a leaf is reached. Inheritance System.Object TreeTraversal <TEdge, TNode> DepthFirstTraversal <TEdge, TNode> FullyRecursiveDepthFirstTraversal<TEdge, TNode> Implements IVisitStrategy <TNode, TreeTraversalVisit <TEdge, TNode>> Inherited Members TreeTraversal<TEdge, TNode>.TraversalOrder TreeTraversal<TEdge, TNode>.ChildrenSorter TreeTraversal<TEdge, TNode>.Visit(TNode) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.RecImmTrees.Visitor Assembly : MoreStructures.dll Syntax public class FullyRecursiveDepthFirstTraversal<TEdge, TNode> : DepthFirstTraversal<TEdge, TNode>, IVisitStrategy<TNode, TreeTraversalVisit<TEdge, TNode>> where TEdge : IRecImmDictIndexedTreeEdge<TEdge, TNode> where TNode : IRecImmDictIndexedTreeNode<TEdge, TNode> Type Parameters Name Description TEdge TNode Remarks ADVANTAGES AND DISADVANTAGES Implemented fully recursively, so limited by stack depth and usable with tree of a \"reasonable\" height. Methods | Improve this Doc View Source Visit(TNode) Lazily and recursively visits the structure of the provided node , returning the sequence of IRecImmDictIndexedTreeNode<TEdge, TNode> of the structure, in depth-first order. Declaration public override IEnumerable<TreeTraversalVisit<TEdge, TNode>> Visit(TNode node) Parameters Type Name Description TNode node The node on where to start visit the structure. Returns Type Description IEnumerable < TreeTraversalVisit <TEdge, TNode>> A sequence emitting (node, visit context) couples, in the visit order defined by the visit strategy. Overrides MoreStructures.RecImmTrees.Visitor.TreeTraversal<TEdge, TNode>.Visit(TNode) Remarks ALGORITHM - The algorithm visits all nodes in structure in natural recursion/depth-first order, yielding to the output sequence, so that the client code implementing the visitor can lazily process the nodes. COMPLEXITY - Excluding visitor, constant time work is done for each of the n nodes of the tree (such as construction of the input record for the visitor). - Iteration-cost is constant w.r.t. n. ChildrenSorter cost depends on the actual algorithm used. - So Time Complexity is dominated by ChildrenSorter and visitor. In conclusion: - Time Complexity is O(n * Ts), where Ts is the amortized time cost of ChildrenSorter per node. Taking into account the visit of each emitted node, Time Complexity is O(n * (Ts + Tv)), where Tv is the time cost of the visitor per node. - Space Complexity is O(n). Taking into account the visit of each emitted node, Space Complexity is O(n * Sv), where Sv is the space cost of visitor per node. Implements IVisitStrategy<TNode, TVisitContext> Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.RecImmTrees.Visitor.html": {
    "href": "api/MoreStructures.RecImmTrees.Visitor.html",
    "title": "Namespace MoreStructures.RecImmTrees.Visitor",
    "keywords": "Namespace MoreStructures.RecImmTrees.Visitor Classes BreadthFirstTraversal<TEdge, TNode> Base class for all BFT strategies, i.e. all traversing strategies which visit all the nodes at the current depth, along any path of the tree, before going deeper or shallower, exploring nodes with higher or lower depth. DepthFirstTraversal<TEdge, TNode> Base class for all DFS strategies, i.e. all traversing strategies which goes in depth as far as possible along each path of the tree, only backtracking when a leaf is reached. FullyIterativeBreadthFirstTraversal<TEdge, TNode> A lazy, fully-iterative, breadth-first IVisitStrategy<TNode, TVisitContext> implementation, i.e. a traversing strategy which visits all the nodes at the current depth, along any path of the tree, before going deeper or shallower, exploring nodes with higher or lower depth. FullyIterativeDepthFirstTraversal<TEdge, TNode> A lazy, fully-iterative, depth-first IVisitStrategy<TNode, TVisitContext> implementation, i.e. a traversing strategy which goes in depth as far as possible along each path of the tree, only backtracking when a leaf is reached. FullyRecursiveBreadthFirstTraversal<TEdge, TNode> A lazy, fully-recursive, breadth-first IVisitStrategy<TNode, TVisitContext> implementation, i.e. a traversing strategy which visits all the nodes at the current depth, along any path of the tree, before going deeper or shallower, exploring nodes with higher or lower depth. FullyRecursiveDepthFirstTraversal<TEdge, TNode> A lazy, fully-recursive, depth-first IVisitStrategy<TNode, TVisitContext> implementation, i.e. a traversing strategy which goes in depth as far as possible along each path of the tree, only backtracking when a leaf is reached. TreeTraversal<TEdge, TNode> Base class for all tree traversal strategies, such as DepthFirstTraversal<TEdge, TNode> and BreadthFirstTraversal<TEdge, TNode> strategies, which are different strategies of traversing a IRecImmDictIndexedTreeNode<TEdge, TNode> structure top-down. TreeTraversalVisit<TEdge, TNode> The emitted information of a root-to-leaf traversal of a tree composed of nodes and edges. Interfaces IVisitStrategy<TNode, TVisitContext> A visit strategy of IRecImmDictIndexedTreeNode<TEdge, TNode> structures. Can be any way of moving through the structure and touching nodes: partial or exaustive, hierarchical or random, upwards or downwards, etc. Enums TreeTraversalOrder The order of visit of a \"node and its children\" sub-tree."
  },
  "api/MoreStructures.RecImmTrees.Visitor.IVisitStrategy-2.html": {
    "href": "api/MoreStructures.RecImmTrees.Visitor.IVisitStrategy-2.html",
    "title": "Interface IVisitStrategy<TNode, TVisitContext>",
    "keywords": "Interface IVisitStrategy<TNode, TVisitContext> A visit strategy of IRecImmDictIndexedTreeNode<TEdge, TNode> structures. Can be any way of moving through the structure and touching nodes: partial or exaustive, hierarchical or random, upwards or downwards, etc. Namespace : MoreStructures.RecImmTrees.Visitor Assembly : MoreStructures.dll Syntax public interface IVisitStrategy<in TNode, out TVisitContext> Type Parameters Name Description TNode The type of nodes of the specific structure. TVisitContext The type of visit context. Depends on the IVisitStrategy<TNode, TVisitContext> used. Methods | Improve this Doc View Source Visit(TNode) Lazily visits the structure of the provided node , returning an enumerable of the sequence of IRecImmDictIndexedTreeNode<TEdge, TNode> of the structure, in the order defined by this IVisitStrategy<TNode, TVisitContext> . Declaration IEnumerable<TVisitContext> Visit(TNode node) Parameters Type Name Description TNode node The node on where to start visit the structure. Returns Type Description IEnumerable <TVisitContext> A sequence emitting (node, visit context) couples, in the visit order defined by the visit strategy. Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.RecImmTrees.Visitor.TreeTraversal-2.html": {
    "href": "api/MoreStructures.RecImmTrees.Visitor.TreeTraversal-2.html",
    "title": "Class TreeTraversal<TEdge, TNode>",
    "keywords": "Class TreeTraversal<TEdge, TNode> Base class for all tree traversal strategies, such as DepthFirstTraversal<TEdge, TNode> and BreadthFirstTraversal<TEdge, TNode> strategies, which are different strategies of traversing a IRecImmDictIndexedTreeNode<TEdge, TNode> structure top-down. Inheritance System.Object TreeTraversal<TEdge, TNode> BreadthFirstTraversal <TEdge, TNode> DepthFirstTraversal <TEdge, TNode> Implements IVisitStrategy <TNode, TreeTraversalVisit <TEdge, TNode>> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.RecImmTrees.Visitor Assembly : MoreStructures.dll Syntax public abstract class TreeTraversal<TEdge, TNode> : IVisitStrategy<TNode, TreeTraversalVisit<TEdge, TNode>> where TEdge : IRecImmDictIndexedTreeEdge<TEdge, TNode> where TNode : IRecImmDictIndexedTreeNode<TEdge, TNode> Type Parameters Name Description TEdge TNode Remarks TRAVERSAL VS VISIT The word \"traversal\" in TreeTraversal<TEdge, TNode> and its derivations, is here used with narrower scope than the word \"visit\" in IVisitStrategy<TNode, TVisitContext> . - \"Traversal\" is used here as common class between DFS and BFS, as a visit strategy that starts from the root of the tree and proceeds downwards, following edges and terminating when leafs are reached. - \"Visit\" is used in a more general sense, as any algorithm which \"touches\" 0 or more nodes of the tree, walking the tree in any possible way (up, down, sideways, ...). Properties | Improve this Doc View Source ChildrenSorter The order of visit of the children. By default Children is returned as is, and no specific order is imposed to the sequence of (edge, node) couples, during the visit. Declaration public Func<TreeTraversalVisit<TEdge, TNode>, IEnumerable<KeyValuePair<TEdge, TNode>>> ChildrenSorter { get; set; } Property Value Type Description Func < TreeTraversalVisit <TEdge, TNode>, IEnumerable < KeyValuePair <TEdge, TNode>>> Remarks Specifying a well-defined, deterministic order ensures that children are visited in a consistent and reproducible way across executions of the visit. | Improve this Doc View Source TraversalOrder The traversal order between parent and its children, to be applied when visiting the tree. By default ParentFirst is applied, meaning that the parent node is visited before its children. Declaration public TreeTraversalOrder TraversalOrder { get; set; } Property Value Type Description TreeTraversalOrder Methods | Improve this Doc View Source Visit(TNode) Lazily visits the structure of the provided node , returning an enumerable of the sequence of IRecImmDictIndexedTreeNode<TEdge, TNode> of the structure, in the order defined by this IVisitStrategy<TNode, TVisitContext> . Declaration public abstract IEnumerable<TreeTraversalVisit<TEdge, TNode>> Visit(TNode node) Parameters Type Name Description TNode node The node on where to start visit the structure. Returns Type Description IEnumerable < TreeTraversalVisit <TEdge, TNode>> A sequence emitting (node, visit context) couples, in the visit order defined by the visit strategy. Examples Implements IVisitStrategy<TNode, TVisitContext> Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.RecImmTrees.Visitor.TreeTraversalOrder.html": {
    "href": "api/MoreStructures.RecImmTrees.Visitor.TreeTraversalOrder.html",
    "title": "Enum TreeTraversalOrder",
    "keywords": "Enum TreeTraversalOrder The order of visit of a \"node and its children\" sub-tree. Namespace : MoreStructures.RecImmTrees.Visitor Assembly : MoreStructures.dll Syntax public enum TreeTraversalOrder Fields Name Description ChildrenFirst First visit all the children nodes, then the parent. ParentFirst First visit the parent node, then its children. Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TreeTraversalOrder>(TextWithTerminator)"
  },
  "api/MoreStructures.RecImmTrees.Visitor.TreeTraversalVisit-2.html": {
    "href": "api/MoreStructures.RecImmTrees.Visitor.TreeTraversalVisit-2.html",
    "title": "Class TreeTraversalVisit<TEdge, TNode>",
    "keywords": "Class TreeTraversalVisit<TEdge, TNode> The emitted information of a root-to-leaf traversal of a tree composed of nodes and edges. Inheritance System.Object TreeTraversalVisit<TEdge, TNode> Implements System.IEquatable < TreeTraversalVisit <TEdge, TNode>> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.RecImmTrees.Visitor Assembly : MoreStructures.dll Syntax public class TreeTraversalVisit<TEdge, TNode> : IEquatable<TreeTraversalVisit<TEdge, TNode>> where TEdge : IRecImmDictIndexedTreeEdge<TEdge, TNode> where TNode : IRecImmDictIndexedTreeNode<TEdge, TNode> Type Parameters Name Description TEdge The type of edges of the specific structure. TNode The type of nodes of the specific structure. Constructors | Improve this Doc View Source TreeTraversalVisit(TNode, TNode, TEdge, Int32) The emitted information of a root-to-leaf traversal of a tree composed of nodes and edges. Declaration public TreeTraversalVisit(TNode Node, TNode ParentNode, TEdge IncomingEdge, int Level) Parameters Type Name Description TNode Node The visited node. TNode ParentNode The parent of the node being visited. Null when visiting the root node. TEdge IncomingEdge The edge outgoing from the parent, traversed to reach this node. Null when visiting the root node. System.Int32 Level The level of visit: 0 is assigned to the top-level node, 1 to its children, 2 to its grandchildren, etc. Properties | Improve this Doc View Source IncomingEdge Declaration public TEdge IncomingEdge { get; set; } Property Value Type Description TEdge | Improve this Doc View Source Level Declaration public int Level { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source Node Declaration public TNode Node { get; set; } Property Value Type Description TNode | Improve this Doc View Source ParentNode Declaration public TNode ParentNode { get; set; } Property Value Type Description TNode Implements System.IEquatable<T> Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.RotatedTextWithTerminator.html": {
    "href": "api/MoreStructures.RotatedTextWithTerminator.html",
    "title": "Class RotatedTextWithTerminator",
    "keywords": "Class RotatedTextWithTerminator A text string with a terminator character which has been rotated leftwards or rightwards, of a number of positions (0 included). Inheritance System.Object RotatedTextWithTerminator Implements IValueEnumerable < System.Char > IEnumerable < System.Char > System.IEquatable < RotatedTextWithTerminator > Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures Assembly : MoreStructures.dll Syntax public class RotatedTextWithTerminator : IValueEnumerable<char>, IEquatable<RotatedTextWithTerminator> Remarks USECASES - A terminator-terminated rotated text is required by Burrows-Wheeler Transform operations, such as inversion. - This object provides type safety, as it allows to tell apart rotated terminator-terminated strings from generic ones. - Consistently using RotatedTextWithTerminator , rather than System.String , in all library functionalities ensures that the invariant of a rotated terminator-terminated string is always respected. - Most string-related functionalities provided by RotatedTextWithTerminator , such as Length and Item[Index] , as well as and System.Collections.IEnumerable support, are delegated to the underlying string. Constructors | Improve this Doc View Source RotatedTextWithTerminator(IEnumerable<Char>, Char, Boolean) A text string with a terminator character which has been rotated leftwards or rightwards, of a number of positions (0 included). Declaration public RotatedTextWithTerminator(IEnumerable<char> RotatedText, char Terminator = '$', bool ValidateInput = true) Parameters Type Name Description System.Collections.IEnumerable < System.Char > RotatedText The text, defined as an of chars and containing the terminator character once, in any position of the text. System.Char Terminator A terminator character, present in the text at most once. If not specified DefaultTerminator is used. System.Boolean ValidateInput Whether the input, and in particular RotatedText should be validated, while this object is created. Validation takes O(n) time, where n = number of chars in RotatedText and can be an heavy operation. Remarks USECASES - A terminator-terminated rotated text is required by Burrows-Wheeler Transform operations, such as inversion. - This object provides type safety, as it allows to tell apart rotated terminator-terminated strings from generic ones. - Consistently using RotatedTextWithTerminator , rather than System.String , in all library functionalities ensures that the invariant of a rotated terminator-terminated string is always respected. - Most string-related functionalities provided by RotatedTextWithTerminator , such as Length and Item[Index] , as well as and System.Collections.IEnumerable support, are delegated to the underlying string. Properties | Improve this Doc View Source Item[Index] Select a part of RotatedText by the provided index (either w.r.t. the start or to the end of the text). Declaration public char this[Index index] { get; } Parameters Type Name Description Index index The index applied to the underlying string. Property Value Type Description System.Char A char containing the selected part. | Improve this Doc View Source Item[TextWithTerminator.ISelector] Select a part of RotatedText by the provided selector. Declaration public string this[TextWithTerminator.ISelector selector] { get; } Parameters Type Name Description TextWithTerminator.ISelector selector Any selector acting on a RotatedTextWithTerminator . Property Value Type Description System.String A string containing the selected part. | Improve this Doc View Source Item[Range] Select a part of RotatedText by the provided range (start index included, end index excluded). Declaration public IEnumerable<char> this[Range range] { get; } Parameters Type Name Description Range range The range applied to the underlying string. Property Value Type Description System.Collections.IEnumerable < System.Char > A sequence of chars containing the selected part. | Improve this Doc View Source Length The total length of RotatedText , including the terminator. Declaration public int Length { get; } Property Value Type Description System.Int32 A positive integer (at least 1). Remarks | Improve this Doc View Source RotatedText Declaration public IEnumerable<char> RotatedText { get; set; } Property Value Type Description System.Collections.IEnumerable < System.Char > A sequence of chars. Remarks Wrapped into a IValueEnumerable<T> to preserve value equality. | Improve this Doc View Source Terminator Declaration public char Terminator { get; set; } Property Value Type Description System.Char A single char. | Improve this Doc View Source ValidateInput Declaration public bool ValidateInput { get; set; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source EndsWith(String) Whether this text ends with suffix . Declaration public bool EndsWith(string suffix) Parameters Type Name Description System.String suffix A terminator-included string. Returns Type Description System.Boolean True if RotatedText ends by suffix . | Improve this Doc View Source GetEnumerator() Returns an enumerator that iterates through the collection of chars of the underlying RotatedText string, including the Terminator char. Declaration public IEnumerator<char> GetEnumerator() Returns Type Description System.Collections.IEnumerator < System.Char > | Improve this Doc View Source StartsWith(String) Whether this text starts with prefix . Declaration public bool StartsWith(string prefix) Parameters Type Name Description System.String prefix A terminator-included string. Returns Type Description System.Boolean True if RotatedText starts by prefix . Explicit Interface Implementations | Improve this Doc View Source IEnumerable.GetEnumerator() Returns an enumerator that iterates through the collection of chars of the underlying RotatedText string, including the Terminator char. Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator Implements IValueEnumerable<T> IEnumerable<> System.IEquatable<T> Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.SuffixArrays.Builders.html": {
    "href": "api/MoreStructures.SuffixArrays.Builders.html",
    "title": "Namespace MoreStructures.SuffixArrays.Builders",
    "keywords": "Namespace MoreStructures.SuffixArrays.Builders Classes NaiveSuffixArrayBuilder<TEdge, TNode> An algorithm for building Suffix Arrays directly from a TextWithTerminator , listing and sorting all suffixes of the text. SuffixStructureBasedSuffixArrayBuilder<TEdge, TNode> An algorithm for building Suffix Arrays from an already built ISuffixStructureNode<TEdge, TNode> structure for the provided TextWithTerminator . Interfaces ISuffixArrayBuilder<TEdge, TNode> An algorithm for building Suffix Arrays."
  },
  "api/MoreStructures.SuffixArrays.Builders.ISuffixArrayBuilder-2.html": {
    "href": "api/MoreStructures.SuffixArrays.Builders.ISuffixArrayBuilder-2.html",
    "title": "Interface ISuffixArrayBuilder<TEdge, TNode>",
    "keywords": "Interface ISuffixArrayBuilder<TEdge, TNode> An algorithm for building Suffix Arrays. Namespace : MoreStructures.SuffixArrays.Builders Assembly : MoreStructures.dll Syntax public interface ISuffixArrayBuilder<TEdge, TNode> where TEdge : ISuffixStructureEdge<TEdge, TNode> where TNode : ISuffixStructureNode<TEdge, TNode> Type Parameters Name Description TEdge The type of edges of the specific structure. TNode The type of nodes of the specific structure. Remarks The Suffix Array of a terminator-terminated text T is an array where the i-th element is the index in T of the 1st char of a suffix Si of T, and Si < Sj for each i < j. Methods | Improve this Doc View Source Build() Builds the Suffix Array. Declaration IEnumerable<int> Build() Returns Type Description IEnumerable < System.Int32 > A of System.Int32 . Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.SuffixArrays.Builders.NaiveSuffixArrayBuilder-2.html": {
    "href": "api/MoreStructures.SuffixArrays.Builders.NaiveSuffixArrayBuilder-2.html",
    "title": "Class NaiveSuffixArrayBuilder<TEdge, TNode>",
    "keywords": "Class NaiveSuffixArrayBuilder<TEdge, TNode> An algorithm for building Suffix Arrays directly from a TextWithTerminator , listing and sorting all suffixes of the text. Inheritance System.Object NaiveSuffixArrayBuilder<TEdge, TNode> Implements ISuffixArrayBuilder <TEdge, TNode> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.SuffixArrays.Builders Assembly : MoreStructures.dll Syntax public class NaiveSuffixArrayBuilder<TEdge, TNode> : ISuffixArrayBuilder<TEdge, TNode> where TEdge : ISuffixStructureEdge<TEdge, TNode> where TNode : ISuffixStructureNode<TEdge, TNode> Type Parameters Name Description TEdge TNode Remarks ALGORITHM The following steps are performed, lazily. - First all suffixes of the input TextWithTerminator are generated. - Then the suffixes are sorted in ascending order. - Finally, the 1st char of each suffix is taken. COMPLEXITY - There are n suffixes, where n is the length of the input text (including the terminator). - Sorting n strings requires n * log(n) comparisons, each comparing at most n chars. - Taking the first char of each of the suffixes takes O(1) time, and there are n of them. - Therefore, Time Complexity is O(n^2 * log(n)) and Space Complexity is O(n). Constructors | Improve this Doc View Source NaiveSuffixArrayBuilder(TextWithTerminator) Declaration public NaiveSuffixArrayBuilder(TextWithTerminator text) Parameters Type Name Description TextWithTerminator text Properties | Improve this Doc View Source Text The TextWithTerminator , to build the Suffix Array of. Declaration public TextWithTerminator Text { get; } Property Value Type Description TextWithTerminator Methods | Improve this Doc View Source Build() Declaration public IEnumerable<int> Build() Returns Type Description IEnumerable < System.Int32 > Implements ISuffixArrayBuilder<TEdge, TNode> Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.SuffixArrays.Builders.SuffixStructureBasedSuffixArrayBuilder-2.html": {
    "href": "api/MoreStructures.SuffixArrays.Builders.SuffixStructureBasedSuffixArrayBuilder-2.html",
    "title": "Class SuffixStructureBasedSuffixArrayBuilder<TEdge, TNode>",
    "keywords": "Class SuffixStructureBasedSuffixArrayBuilder<TEdge, TNode> An algorithm for building Suffix Arrays from an already built ISuffixStructureNode<TEdge, TNode> structure for the provided TextWithTerminator . Inheritance System.Object SuffixStructureBasedSuffixArrayBuilder<TEdge, TNode> Implements ISuffixArrayBuilder <TEdge, TNode> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.SuffixArrays.Builders Assembly : MoreStructures.dll Syntax public class SuffixStructureBasedSuffixArrayBuilder<TEdge, TNode> : ISuffixArrayBuilder<TEdge, TNode> where TEdge : ISuffixStructureEdge<TEdge, TNode> where TNode : ISuffixStructureNode<TEdge, TNode> Type Parameters Name Description TEdge TNode Constructors | Improve this Doc View Source SuffixStructureBasedSuffixArrayBuilder(TextWithTerminator, TNode) Declaration public SuffixStructureBasedSuffixArrayBuilder(TextWithTerminator text, TNode node) Parameters Type Name Description TextWithTerminator text TNode node Properties | Improve this Doc View Source Node The root node of the ISuffixStructureNode<TEdge, TNode> structure, to build the Suffix Array of. Declaration public TNode Node { get; } Property Value Type Description TNode | Improve this Doc View Source Text The TextWithTerminator , to build the Suffix Array of. Declaration public TextWithTerminator Text { get; } Property Value Type Description TextWithTerminator Methods | Improve this Doc View Source Build() Builds the Suffix Array for . Declaration public IEnumerable<int> Build() Returns Type Description IEnumerable < System.Int32 > Implements ISuffixArrayBuilder<TEdge, TNode> Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.SuffixStructures.AdjacencyOrders.html": {
    "href": "api/MoreStructures.SuffixStructures.AdjacencyOrders.html",
    "title": "Enum AdjacencyOrders",
    "keywords": "Enum AdjacencyOrders The possible adjacency order relationships between two edges by the parts they refer to in the text. Namespace : MoreStructures.SuffixStructures Assembly : MoreStructures.dll Syntax public enum AdjacencyOrders Fields Name Description After Adjacent in a specific order: the first comes after the second. Before Adjacent in a specific order: the first comes before the second. BeforeOrAfter Adjacent in any order. None Non-adjacent (overlapping on more than an extreme or not at all). Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, AdjacencyOrders>(TextWithTerminator)"
  },
  "api/MoreStructures.SuffixStructures.Builders.BuilderExtensions.html": {
    "href": "api/MoreStructures.SuffixStructures.Builders.BuilderExtensions.html",
    "title": "Class BuilderExtensions",
    "keywords": "Class BuilderExtensions Extension methods for all IBuilder<TEdge, TNode> concretions. Inheritance System.Object BuilderExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.SuffixStructures.Builders Assembly : MoreStructures.dll Syntax public static class BuilderExtensions Methods | Improve this Doc View Source BuildTree<TEdge, TNode>(IBuilder<TEdge, TNode>, String) Text is provided as a plain string. Declaration public static TNode BuildTree<TEdge, TNode>(this IBuilder<TEdge, TNode> builder, string text) where TEdge : ISuffixStructureEdge<TEdge, TNode> where TNode : ISuffixStructureNode<TEdge, TNode> Parameters Type Name Description IBuilder <TEdge, TNode> builder The builder to be used, to build the structure. System.String text The text to build the structure of, without any terminator (automatically added). Returns Type Description TNode Type Parameters Name Description TEdge TNode"
  },
  "api/MoreStructures.SuffixStructures.Builders.html": {
    "href": "api/MoreStructures.SuffixStructures.Builders.html",
    "title": "Namespace MoreStructures.SuffixStructures.Builders",
    "keywords": "Namespace MoreStructures.SuffixStructures.Builders Classes BuilderExtensions Extension methods for all IBuilder<TEdge, TNode> concretions. Interfaces IBuilder<TEdge, TNode> Builds objects, such as edges and nodes, for the ISuffixStructureNode<TEdge, TNode> concretion it is the builder of."
  },
  "api/MoreStructures.SuffixStructures.Builders.IBuilder-2.html": {
    "href": "api/MoreStructures.SuffixStructures.Builders.IBuilder-2.html",
    "title": "Interface IBuilder<TEdge, TNode>",
    "keywords": "Interface IBuilder<TEdge, TNode> Builds objects, such as edges and nodes, for the ISuffixStructureNode<TEdge, TNode> concretion it is the builder of. Namespace : MoreStructures.SuffixStructures.Builders Assembly : MoreStructures.dll Syntax public interface IBuilder<TEdge, TNode> where TEdge : ISuffixStructureEdge<TEdge, TNode> where TNode : ISuffixStructureNode<TEdge, TNode> Type Parameters Name Description TEdge TNode Remarks This interface allows to have a shared construction interface for objects among all structures. Object construction is externalized into a Builder object as a workaround to the limitation of not having constructor signatures directly in interfaces. See https://codeblog.jonskeet.uk/2008/08/29/lessons-learned-from-protocol-buffers-part-4-static-interfaces/ Methods | Improve this Doc View Source BuildTree(TextWithTerminator[]) Build a ISuffixStructureEdge<TEdge, TNode> of the provided text(s), which is a n-ary search tree in which edges coming out of a node are substrings of at least one of the texts and nodes are not directly labeled instead. Declaration TNode BuildTree(params TextWithTerminator[] texts) Parameters Type Name Description TextWithTerminator [] texts The text(s) to build the Suffix Structure of, each one with its own unique terminator (required for traversal). Returns Type Description TNode The root node of the Suffix Structure. Remarks TERMINATORS Terminators have to be unique characters, not just on the single TextWithTerminator they are appended to, but to all TextWithTerminator items in texts . That means that if texts is (T1, ..., Tn), where each TextWithTerminator Ti has ti as Terminator , ti should not be in any of the Text of Tj, for any j. GENERALIZED SUFFIX STRUCTURES When multiple TextWithTerminator instances are passed into texts , the Suffix Structure built is known as Generalized Suffix Structure (e.g. Generalized Suffix Tree or Trie). It differs from a normal Suffix Structure built for the concatenation of items in texts by the fact that it doesn't contain any root-to-leaf path identifying a suffix which spans multiple texts. When a Suffix Structure is built for a single TextWithTerminator which a concatenation of multiple texts, each with its own terminator T1 || t1 || ... || Tn || tn , the resulting structure has branches which span over multiple texts, such as suffixOf[Ti] || ti || prefixOf[T(i+1)] or suffixOf[Ti] || ti || T(i+1) || t(i+1) || prefixOf[T(i+2)] . A Generalized Suffix Structure trims those branches in construction, so that each node-to-leaf branch ends with any of the terminator t1, ..., tn (not always tn) and doesn't contain any other terminator except the ending one. EDGES Substrings of a text are identified by their start position in text and their length, rather than by a copy of the substring itself. The technique, known as Edge Compression allows to store edges information in constant space, and the entire tree in linear space w.r.t. the number of nodes in the tree (which can be linear or not in the input, depending on the type of suffix structure). The sequence of edges in root-to-node paths in the tree identify prefixes in common to multiple suffixes of the text(s). Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator) BuilderExtensions.BuildTree<TEdge, TNode>(IBuilder<TEdge, TNode>, String)"
  },
  "api/MoreStructures.SuffixStructures.Conversions.FullyIterativeConverter.html": {
    "href": "api/MoreStructures.SuffixStructures.Conversions.FullyIterativeConverter.html",
    "title": "Class FullyIterativeConverter",
    "keywords": "Class FullyIterativeConverter Inheritance System.Object FullyIterativeConverter Implements IConverter Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.SuffixStructures.Conversions Assembly : MoreStructures.dll Syntax public class FullyIterativeConverter : IConverter Remarks ADVANTAGES AND DISADVANTAGES Conversion is done iteratively both for branching and no-branching paths (i.e. on nodes having a single child) of the input SuffixTrieNode , with occasional mutation of internal state of the conversion and the use of a stack to store nodes to process. Not limited by call stack depth. Convenient with deep trees (i.e. trees having a height > ~1K nodes). Methods | Improve this Doc View Source TreeToTrie(SuffixTreeNode) Declaration public SuffixTrieNode TreeToTrie(SuffixTreeNode treeNode) Parameters Type Name Description SuffixTreeNode treeNode Returns Type Description SuffixTrieNode Remarks | Improve this Doc View Source TrieToTree(SuffixTrieNode) Declaration public SuffixTreeNode TrieToTree(SuffixTrieNode trieNode) Parameters Type Name Description SuffixTrieNode trieNode Returns Type Description SuffixTreeNode Remarks Implements IConverter Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.SuffixStructures.Conversions.FullyRecursiveConverter.html": {
    "href": "api/MoreStructures.SuffixStructures.Conversions.FullyRecursiveConverter.html",
    "title": "Class FullyRecursiveConverter",
    "keywords": "Class FullyRecursiveConverter Inheritance System.Object FullyRecursiveConverter Implements IConverter Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.SuffixStructures.Conversions Assembly : MoreStructures.dll Syntax public class FullyRecursiveConverter : IConverter Remarks Implemented fully recursively, with one level of recursion per level of the input SuffixTrieNode . Limited by call stack depth and usable with input trees of a \"reasonable\" height (i.e. trees having a height < ~1K nodes). Methods | Improve this Doc View Source TreeToTrie(SuffixTreeNode) Declaration public SuffixTrieNode TreeToTrie(SuffixTreeNode treeNode) Parameters Type Name Description SuffixTreeNode treeNode Returns Type Description SuffixTrieNode Remarks | Improve this Doc View Source TrieToTree(SuffixTrieNode) Declaration public SuffixTreeNode TrieToTree(SuffixTrieNode trieNode) Parameters Type Name Description SuffixTrieNode trieNode Returns Type Description SuffixTreeNode Remarks Implements IConverter Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.SuffixStructures.Conversions.html": {
    "href": "api/MoreStructures.SuffixStructures.Conversions.html",
    "title": "Namespace MoreStructures.SuffixStructures.Conversions",
    "keywords": "Namespace MoreStructures.SuffixStructures.Conversions Classes FullyIterativeConverter FullyRecursiveConverter PartiallyIterativeConverter Interfaces IConverter A converter between different ISuffixStructureNode<TEdge, TNode> structures, such as SuffixTrieNode and SuffixTreeNode ."
  },
  "api/MoreStructures.SuffixStructures.Conversions.IConverter.html": {
    "href": "api/MoreStructures.SuffixStructures.Conversions.IConverter.html",
    "title": "Interface IConverter",
    "keywords": "Interface IConverter A converter between different ISuffixStructureNode<TEdge, TNode> structures, such as SuffixTrieNode and SuffixTreeNode . Namespace : MoreStructures.SuffixStructures.Conversions Assembly : MoreStructures.dll Syntax public interface IConverter Methods | Improve this Doc View Source TreeToTrie(SuffixTreeNode) Converts the provided SuffixTreeNode instance into an equivalent instance of SuffixTrieNode , building its entire structure. Declaration SuffixTrieNode TreeToTrie(SuffixTreeNode treeNode) Parameters Type Name Description SuffixTreeNode treeNode The node identifying the trie structure to be converted. Returns Type Description SuffixTrieNode A trie, equivalent to the provided tree. Remarks COMPLEXITY Time Complexity = O(n^2) and Space Complexity = O(n^2) where n = number of nodes in the input structure. Each node of the input tree is visited at most twice. However, expansion increase the number of nodes, in the worst case to the number of characters in all suffixes of the text which has generated the tree. | Improve this Doc View Source TrieToTree(SuffixTrieNode) Converts the provided SuffixTrieNode instance into an equivalent instance of SuffixTreeNode , building its entire structure. Declaration SuffixTreeNode TrieToTree(SuffixTrieNode trieNode) Parameters Type Name Description SuffixTrieNode trieNode The node identifying the trie structure to be converted. Returns Type Description SuffixTreeNode A tree, equivalent to the provided trie. Remarks COMPLEXITY Time Complexity = O(n) and Space Complexity = O(n) where n = number of nodes in the input structure. Each node of the input trie is visited at most twice and coalescing reduces the number of nodes. Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.SuffixStructures.Conversions.PartiallyIterativeConverter.html": {
    "href": "api/MoreStructures.SuffixStructures.Conversions.PartiallyIterativeConverter.html",
    "title": "Class PartiallyIterativeConverter",
    "keywords": "Class PartiallyIterativeConverter Inheritance System.Object PartiallyIterativeConverter Implements IConverter Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.SuffixStructures.Conversions Assembly : MoreStructures.dll Syntax public class PartiallyIterativeConverter : IConverter Remarks Conversion is iteratively for no-branching paths (i.e. on nodes having a single child) and recursively on branching of the input SuffixTrieNode , with occasional mutation of internal state of the conversion. Limited by stack depth (but less than FullyRecursiveConverter ) and usable with output trees of a \"reasonable\" height (i.e. trees having a height < ~1K nodes). Methods | Improve this Doc View Source TreeToTrie(SuffixTreeNode) Declaration public SuffixTrieNode TreeToTrie(SuffixTreeNode treeNode) Parameters Type Name Description SuffixTreeNode treeNode Returns Type Description SuffixTrieNode Remarks | Improve this Doc View Source TrieToTree(SuffixTrieNode) Declaration public SuffixTreeNode TrieToTree(SuffixTrieNode trieNode) Parameters Type Name Description SuffixTrieNode trieNode Returns Type Description SuffixTreeNode Remarks Implements IConverter Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.SuffixStructures.html": {
    "href": "api/MoreStructures.SuffixStructures.html",
    "title": "Namespace MoreStructures.SuffixStructures",
    "keywords": "Namespace MoreStructures.SuffixStructures Classes SuffixStructureEdgeExtensions Extension methods for all ISuffixStructureEdge<TEdge, TNode> edge concretions. SuffixStructureNodeExtensions Extension methods for all ISuffixStructureNode<TEdge, TNode> node concretions. SuffixStructureTreePathExtensions Extension methods for all TreePath<TEdge, TNode> used in ISuffixStructureNode<TEdge, TNode> structures. Interfaces ISuffixStructureEdge<TEdge, TNode> An edge of a ISuffixStructureEdge<TEdge, TNode> , directionally linking two nodes and forming a path hop. Represents prefix matching. ISuffixStructureNode<TEdge, TNode> The node of a Suffix Structure, linked by edges and forming paths. Represents pattern matching state. Enums AdjacencyOrders The possible adjacency order relationships between two edges by the parts they refer to in the text."
  },
  "api/MoreStructures.SuffixStructures.ISuffixStructureEdge-2.html": {
    "href": "api/MoreStructures.SuffixStructures.ISuffixStructureEdge-2.html",
    "title": "Interface ISuffixStructureEdge<TEdge, TNode>",
    "keywords": "Interface ISuffixStructureEdge<TEdge, TNode> An edge of a ISuffixStructureEdge<TEdge, TNode> , directionally linking two nodes and forming a path hop. Represents prefix matching. Inherited Members TextWithTerminator.ISelector.Of(TextWithTerminator) TextWithTerminator.ISelector.OfRotated(RotatedTextWithTerminator) Namespace : MoreStructures.SuffixStructures Assembly : MoreStructures.dll Syntax public interface ISuffixStructureEdge<TEdge, TNode> : TextWithTerminator.ISelector, IRecImmDictIndexedTreeEdge<TEdge, TNode> where TEdge : ISuffixStructureEdge<TEdge, TNode> where TNode : ISuffixStructureNode<TEdge, TNode> Type Parameters Name Description TEdge TNode Properties | Improve this Doc View Source Length The length of the edge string. Declaration int Length { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Start The index of the first character of the edge string in the text. Declaration int Start { get; } Property Value Type Description System.Int32 Extension Methods SuffixStructureEdgeExtensions.IsAdjacentTo<TEdge, TNode>(ISuffixStructureEdge<TEdge, TNode>, TEdge, AdjacencyOrders) SuffixStructureEdgeExtensions.ContainsIndex<TEdge, TNode>(ISuffixStructureEdge<TEdge, TNode>, Int32) SuffixStructureEdgeExtensions.ContainsIndexesNonBiggerThan<TEdge, TNode>(ISuffixStructureEdge<TEdge, TNode>, Int32) SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.SuffixStructures.ISuffixStructureNode-2.html": {
    "href": "api/MoreStructures.SuffixStructures.ISuffixStructureNode-2.html",
    "title": "Interface ISuffixStructureNode<TEdge, TNode>",
    "keywords": "Interface ISuffixStructureNode<TEdge, TNode> The node of a Suffix Structure, linked by edges and forming paths. Represents pattern matching state. Inherited Members IRecImmDictIndexedTreeNode<TEdge, TNode>.Children Namespace : MoreStructures.SuffixStructures Assembly : MoreStructures.dll Syntax public interface ISuffixStructureNode<TEdge, TNode> : IRecImmDictIndexedTreeNode<TEdge, TNode> where TEdge : ISuffixStructureEdge<TEdge, TNode> where TNode : ISuffixStructureNode<TEdge, TNode> Type Parameters Name Description TEdge TNode Properties | Improve this Doc View Source Start The index of the character, the path from the root leading to this leaf starts with. Non-null for leaves only. Declaration int? Start { get; } Property Value Type Description System.Nullable < System.Int32 > Extension Methods RecImmDictIndexedTreeNodeExtensions.IsLeaf<TEdge, TNode>(IRecImmDictIndexedTreeNode<TEdge, TNode>) SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator) Matcher.Match<TEdge, TNode>(ISuffixStructureNode<TEdge, TNode>, TextWithTerminator, String)"
  },
  "api/MoreStructures.SuffixStructures.Matching.html": {
    "href": "api/MoreStructures.SuffixStructures.Matching.html",
    "title": "Namespace MoreStructures.SuffixStructures.Matching",
    "keywords": "Namespace MoreStructures.SuffixStructures.Matching Classes Match<TPath> The result of matching a against a concretion. Matcher Exposes utility methods to match a TextWithTerminator against a ISuffixStructureNode<TEdge, TNode> concretion. NaiveSnssFinder A ISnssFinder implementation which checks for the presence of each substring of the first text in the second text, from the longest to the shortest. SuffixStructureBasedSnssFinder Base class for all ISnssFinder concretions which implement Find(IEnumerable<Char>, IEnumerable<Char>) using a suffix structure (a concretions of ISuffixStructureNode<TEdge, TNode> , implementing IRecImmDictIndexedTreeNode<TEdge, TNode> ), such as SuffixTreeNode or SuffixTrieNode ). SuffixTreeBasedSnssFinder A ISnssFinder implementation and SuffixStructureBasedSnssFinder concretion which uses a SuffixTreeNode structure to implement Find(IEnumerable<Char>, IEnumerable<Char>) . SuffixTrieBasedSnssFinder A ISnssFinder implementation and SuffixStructureBasedSnssFinder concretion which uses a SuffixTrieNode structure to implement Find(IEnumerable<Char>, IEnumerable<Char>) . Interfaces ISnssFinder Any algorithm finding the Shortest Non-shared Substring (Snss) between two strings."
  },
  "api/MoreStructures.SuffixStructures.Matching.ISnssFinder.html": {
    "href": "api/MoreStructures.SuffixStructures.Matching.ISnssFinder.html",
    "title": "Interface ISnssFinder",
    "keywords": "Interface ISnssFinder Any algorithm finding the Shortest Non-shared Substring (Snss) between two strings. Namespace : MoreStructures.SuffixStructures.Matching Assembly : MoreStructures.dll Syntax public interface ISnssFinder Methods | Improve this Doc View Source Find(IEnumerable<Char>, IEnumerable<Char>) Returns any substring of text1 which is not present in text2 and has minimal length. Returns null if there is no substring of text1 which is not a substring of text2 , i.e. if the two string coincide. Declaration IEnumerable<string> Find(IEnumerable<char> text1, IEnumerable<char> text2) Parameters Type Name Description IEnumerable < System.Char > text1 The sequence of chars of the first text. IEnumerable < System.Char > text2 The sequence of chars of the second text. Returns Type Description IEnumerable < System.String > A sequence of strings, each being a substring of text1 not in text2 , of minimal length. Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.SuffixStructures.Matching.Match-1.html": {
    "href": "api/MoreStructures.SuffixStructures.Matching.Match-1.html",
    "title": "Class Match<TPath>",
    "keywords": "Class Match<TPath> The result of matching a against a concretion. Inheritance System.Object Match<TPath> Implements System.IEquatable < Match <TPath>> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.SuffixStructures.Matching Assembly : MoreStructures.dll Syntax public sealed class Match<TPath> : IEquatable<Match<TPath>> Type Parameters Name Description TPath Remarks Generated by methods. Constructors | Improve this Doc View Source Match(Boolean, Int32, Int32, TPath) The result of matching a against a concretion. Declaration public Match(bool Success, int Begin, int MatchedChars, TPath Path) Parameters Type Name Description System.Boolean Success Whether the text has been completely matched or not. System.Int32 Begin The index in text of the best match in the Suffix Tree. System.Int32 MatchedChars The number of chars matched from the text. TPath Path The path of nodes visited by the matching algorithm, from the root downwards. Remarks Generated by methods. Properties | Improve this Doc View Source Begin Declaration public int Begin { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source MatchedChars Declaration public int MatchedChars { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source Path Declaration public TPath Path { get; set; } Property Value Type Description TPath | Improve this Doc View Source Success Declaration public bool Success { get; set; } Property Value Type Description System.Boolean Implements System.IEquatable<T> Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.SuffixStructures.Matching.Matcher.html": {
    "href": "api/MoreStructures.SuffixStructures.Matching.Matcher.html",
    "title": "Class Matcher",
    "keywords": "Class Matcher Exposes utility methods to match a TextWithTerminator against a ISuffixStructureNode<TEdge, TNode> concretion. Inheritance System.Object Matcher Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.SuffixStructures.Matching Assembly : MoreStructures.dll Syntax public static class Matcher Methods | Improve this Doc View Source Match<TEdge, TNode>(ISuffixStructureNode<TEdge, TNode>, TextWithTerminator, String) Tries to match a pattern against a ISuffixStructureNode<TEdge, TNode> built on a text. Declaration public static Match<TreePath<TEdge, TNode>> Match<TEdge, TNode>(this ISuffixStructureNode<TEdge, TNode> node, TextWithTerminator text, string pattern) where TEdge : ISuffixStructureEdge<TEdge, TNode> where TNode : ISuffixStructureNode<TEdge, TNode> Parameters Type Name Description ISuffixStructureNode <TEdge, TNode> node The root of the Suffix Tree, to match the suffix of text against. TextWithTerminator text The text whose Suffix Tree has to be matched against the pattern. System.String pattern The pattern to match. Unlike text, is a string without terminator. Returns Type Description Match < TreePath <TEdge, TNode>> A successful or non-successful match. Type Parameters Name Description TEdge TNode Remarks COMPLEXITY Time Complexity = O(t * as) and Space Complexity = O(t * as) where t = length of the text to match and as = size of the alphabet of the text. If the alphabet is of constant size, complexity is linear."
  },
  "api/MoreStructures.SuffixStructures.Matching.NaiveSnssFinder.html": {
    "href": "api/MoreStructures.SuffixStructures.Matching.NaiveSnssFinder.html",
    "title": "Class NaiveSnssFinder",
    "keywords": "Class NaiveSnssFinder A ISnssFinder implementation which checks for the presence of each substring of the first text in the second text, from the longest to the shortest. Inheritance System.Object NaiveSnssFinder Implements ISnssFinder Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.SuffixStructures.Matching Assembly : MoreStructures.dll Syntax public class NaiveSnssFinder : ISnssFinder Remarks ADVANTAGES AND DISADVANTAGES - Unlike SuffixStructureBasedSnssFinder derivations, this implementation doesn't require terminators, since it does not build any auxialiary structure. - It also doesn't require additional space, except for iterations and index variables. So, it's a good solution for small input, when space is a hard constraint, much more than time. ALGORITHM - Lazily iterates over all substrings of text1, from the shortest (length 1) to the longest (length - 1). - As soon as it finds one which is not contained in text2, it yield returns it. COMPLEXITY - Checking all substrings of text1 of variable length, from 1 to length - 1, is a quadratic with the length of text1. It doesn't require more than constant space (for iterators and index variables) when using string ranges (which are views of larger strings, optimized thanks to immutability. - Each check of a substring of text1 in text2 takes O(sl) time, where sl is the length of the substring. Since the average length of the substring depends linearly on the length of text1 n, the check takes O(n). - So overall Time Complexity is O(n^3) and Space Complexity is O(1). Methods | Improve this Doc View Source Find(IEnumerable<Char>, IEnumerable<Char>) Declaration public IEnumerable<string> Find(IEnumerable<char> text1, IEnumerable<char> text2) Parameters Type Name Description IEnumerable < System.Char > text1 IEnumerable < System.Char > text2 Returns Type Description IEnumerable < System.String > Remarks Implements ISnssFinder Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.SuffixStructures.Matching.SuffixStructureBasedSnssFinder.html": {
    "href": "api/MoreStructures.SuffixStructures.Matching.SuffixStructureBasedSnssFinder.html",
    "title": "Class SuffixStructureBasedSnssFinder",
    "keywords": "Class SuffixStructureBasedSnssFinder Base class for all ISnssFinder concretions which implement Find(IEnumerable<Char>, IEnumerable<Char>) using a suffix structure (a concretions of ISuffixStructureNode<TEdge, TNode> , implementing IRecImmDictIndexedTreeNode<TEdge, TNode> ), such as SuffixTreeNode or SuffixTrieNode ). Inheritance System.Object SuffixStructureBasedSnssFinder SuffixTreeBasedSnssFinder SuffixTrieBasedSnssFinder Implements ISnssFinder Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.SuffixStructures.Matching Assembly : MoreStructures.dll Syntax public abstract class SuffixStructureBasedSnssFinder : ISnssFinder Constructors | Improve this Doc View Source SuffixStructureBasedSnssFinder(Char, Char) Builds an instance with the provided terminators, validating the input by default. All text passed to Find(IEnumerable<Char>, IEnumerable<Char>) must conform with these two terminators. Declaration protected SuffixStructureBasedSnssFinder(char terminator1, char terminator2) Parameters Type Name Description System.Char terminator1 System.Char terminator2 Properties | Improve this Doc View Source Terminator1 A special char to be used as end delimiter for the first text, used for building the suffix structure. Should not occur in first text, nor in the second, since a single suffix structure is built, embedding both texts (a.k.a. generalized suffix structure). Declaration public char Terminator1 { get; } Property Value Type Description System.Char | Improve this Doc View Source Terminator2 A special char to be used as end delimiter for the second text, used for building the suffix structure. Should not occur in first text, nor in the second, since a single suffix structure is built, embedding both texts (a.k.a. generalized suffix structure). Declaration public char Terminator2 { get; } Property Value Type Description System.Char | Improve this Doc View Source ValidateInput Whether the two sequences of chars (first and second text) should be evaluated, in order to make sure that are valid, i.e. they don't contain Terminator1 nor Terminator2 . By default set to true . Declaration public bool ValidateInput { get; set; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source CollectPrefixChars<TEdge, TNode>(TextWithTerminator, TNode, IDictionary<TNode, TreeTraversalVisit<TEdge, TNode>>) Rebuilds the root-to-node prefix, from initialNode up to the root of the Suffix Tree (node with no parent), using the provided cache of visited nodes, cachedVisits , to navigate the Suffix Tree upwards. Declaration protected static IEnumerable<string> CollectPrefixChars<TEdge, TNode>(TextWithTerminator text, TNode initialNode, IDictionary<TNode, TreeTraversalVisit<TEdge, TNode>> cachedVisits) where TEdge : IRecImmDictIndexedTreeEdge<TEdge, TNode>, TextWithTerminator.ISelector where TNode : IRecImmDictIndexedTreeNode<TEdge, TNode> Parameters Type Name Description TextWithTerminator text The text used to generate the Suffix Tree, and to be used to rebuild the prefix. TNode initialNode The node, to start navigating from. IDictionary <TNode, TreeTraversalVisit <TEdge, TNode>> cachedVisits A dictionary of visits by node, to jump from a node to its parent. Returns Type Description IEnumerable < System.String > A lazily generated sequence of strings, corresponding to the edges from initialNode up to the root of the Suffix Tree. Empty if initialNode is the root of the tree. Type Parameters Name Description TEdge TNode | Improve this Doc View Source Find(IEnumerable<Char>, IEnumerable<Char>) Returns any substring of text1 which is not present in text2 and has minimal length. Returns null if there is no substring of text1 which is not a substring of text2 , i.e. if the two string coincide. Declaration public abstract IEnumerable<string> Find(IEnumerable<char> text1, IEnumerable<char> text2) Parameters Type Name Description IEnumerable < System.Char > text1 The sequence of chars of the first text. IEnumerable < System.Char > text2 The sequence of chars of the second text. Returns Type Description IEnumerable < System.String > A sequence of strings, each being a substring of text1 not in text2 , of minimal length. | Improve this Doc View Source ValidateTexts(IEnumerable<Char>, IEnumerable<Char>) Validates the provided texts against this finder, checking that they are compatible with Terminator1 and Terminator2 . Declaration protected void ValidateTexts(IEnumerable<char> text1, IEnumerable<char> text2) Parameters Type Name Description IEnumerable < System.Char > text1 The first text to validate. IEnumerable < System.Char > text2 The second text to validate. Implements ISnssFinder Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.SuffixStructures.Matching.SuffixTreeBasedSnssFinder.html": {
    "href": "api/MoreStructures.SuffixStructures.Matching.SuffixTreeBasedSnssFinder.html",
    "title": "Class SuffixTreeBasedSnssFinder",
    "keywords": "Class SuffixTreeBasedSnssFinder A ISnssFinder implementation and SuffixStructureBasedSnssFinder concretion which uses a SuffixTreeNode structure to implement Find(IEnumerable<Char>, IEnumerable<Char>) . Inheritance System.Object SuffixStructureBasedSnssFinder SuffixTreeBasedSnssFinder Implements ISnssFinder Inherited Members SuffixStructureBasedSnssFinder.Terminator1 SuffixStructureBasedSnssFinder.Terminator2 SuffixStructureBasedSnssFinder.ValidateInput SuffixStructureBasedSnssFinder.ValidateTexts(IEnumerable<Char>, IEnumerable<Char>) SuffixStructureBasedSnssFinder.CollectPrefixChars<TEdge, TNode>(TextWithTerminator, TNode, IDictionary<TNode, TreeTraversalVisit<TEdge, TNode>>) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.SuffixStructures.Matching Assembly : MoreStructures.dll Syntax public class SuffixTreeBasedSnssFinder : SuffixStructureBasedSnssFinder, ISnssFinder Remarks ADVANTAGES AND DISADVANTAGES - Compared to the naive implementation of NaiveSnssFinder , has both average and worst case better runtime, at the cost of space used (which is O(1) for the naive implementation). - Compared to SuffixTrieBasedSnssFinder , it has better Time and Space Complexity, due to Branches Coaleascing combined with Path Compression. It's, however, more complex to implement, visualize and debug step-by-step. ALGORITHM - First uses the UkkonenSuffixTreeBuilder to build a suffix tree of the concatenation of first text, Terminator1 , second text and Terminator2 , stopping branches at the first terminator encountered. This structure is also known as Generalized Suffix Tree. - Visit the suffix tree breadth-first, stopping at the first node such that the root-to-node prefix is substring of text1 but not of text2. - The root-to-node prefix is a substring of text1 when there is a path-to-leaf which contains an edge including Terminator1 . - The root-to-node prefix is NOT a substring of text2 when there is no path-to-leaf which doesn't contain Terminator1 . - Such substring of text1 is guaranteed to be the shortest in number of edges by the visit order imposed by the breadth-first search. However, unlike for Suffix Tries, in Suffix Trees the number of chars per edges varies. - Therefore, all pontential results have to be collected, then sorted by actual prefix length. COMPLEXITY - Validating the input requires going through text1 and text2, and takes linear time in the the number of chars n of the concatenated text \"text1 ## separator1 ## text2 ## separator2\", and constant space. - Building the Generalized Suffix Tree via the Ukkonen algorithm takes time and space at least proportional to the number of nodes of the tree, which is linear with n. - For each level of the breadth-first traversal of the trie, all node-to-leaf paths are checked (in the worst case). - There are at most n levels in the tree, since there can't be a path longer than a suffix of the concatenated text. The higher is the level, the shorter are node-to-leaf paths. However, their number is always the same or lower. - For each node there are as many node-to-leaf paths as leaves, and there are at most n leaves in the tree (since each suffix can add at most a single intermediate node and a single leaf, having terminator 1 or terminator2 as incoming edge). - Checking whether a path contains terminator1 takes constant space and a time proportional to the number of nodes in the path, which is O(n). - The following optimization is implemented: if a path P1 starting from a node N1 identifies a prefix p1 which is a potential SNSS, all paths starting from nodes Pi which are descendants of N1 would identify prefixes pi which would be longer than p1, so they can be excluded. - Rebuilding the string from each identified path takes O(n) time and space. Sorting would take time O(m * log(m) * n) where m is the number of potential SNSS (which is in average much smaller than n). - So in conclusion, Time Complexity is O(n^2) and Space Complexity is O(n). Constructors | Improve this Doc View Source SuffixTreeBasedSnssFinder(Char, Char) Builds an instance with the provided terminators, validating the input by default. All text passed to Find(IEnumerable<Char>, IEnumerable<Char>) must conform with these two terminators. Declaration public SuffixTreeBasedSnssFinder(char terminator1, char terminator2) Parameters Type Name Description System.Char terminator1 System.Char terminator2 Methods | Improve this Doc View Source Find(IEnumerable<Char>, IEnumerable<Char>) This implementation builds and uses a SuffixTreeNode structure to perform the search. Declaration public override IEnumerable<string> Find(IEnumerable<char> text1, IEnumerable<char> text2) Parameters Type Name Description IEnumerable < System.Char > text1 IEnumerable < System.Char > text2 Returns Type Description IEnumerable < System.String > Overrides SuffixStructureBasedSnssFinder.Find(IEnumerable<Char>, IEnumerable<Char>) Remarks Implements ISnssFinder Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.SuffixStructures.Matching.SuffixTrieBasedSnssFinder.html": {
    "href": "api/MoreStructures.SuffixStructures.Matching.SuffixTrieBasedSnssFinder.html",
    "title": "Class SuffixTrieBasedSnssFinder",
    "keywords": "Class SuffixTrieBasedSnssFinder A ISnssFinder implementation and SuffixStructureBasedSnssFinder concretion which uses a SuffixTrieNode structure to implement Find(IEnumerable<Char>, IEnumerable<Char>) . Inheritance System.Object SuffixStructureBasedSnssFinder SuffixTrieBasedSnssFinder Implements ISnssFinder Inherited Members SuffixStructureBasedSnssFinder.Terminator1 SuffixStructureBasedSnssFinder.Terminator2 SuffixStructureBasedSnssFinder.ValidateInput SuffixStructureBasedSnssFinder.ValidateTexts(IEnumerable<Char>, IEnumerable<Char>) SuffixStructureBasedSnssFinder.CollectPrefixChars<TEdge, TNode>(TextWithTerminator, TNode, IDictionary<TNode, TreeTraversalVisit<TEdge, TNode>>) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.SuffixStructures.Matching Assembly : MoreStructures.dll Syntax public class SuffixTrieBasedSnssFinder : SuffixStructureBasedSnssFinder, ISnssFinder Remarks ADVANTAGES AND DISADVANTAGES - Compared to the naive implementation of NaiveSnssFinder , has better aberage runtime, at the cost of space used (which is O(1) for the naive implementation and at least quadratic here). - Compared to the SuffixTree-based implementation, it has way worse Time and Space Complexity, but it's easier to implement, visualize and debug step-by-step. ALGORITHM - First uses the NaivePartiallyRecursiveSuffixTrieBuilder to build a suffix trie of the concatenation of first text, Terminator1 , second text and Terminator2 , a.k.a. generalized suffix trie. - Visit the suffix trie breadth-first, stopping at the first node such that the root-to-node prefix is substring of text1 but not of text2. - The root-to-node prefix is a substring of text1 when there is a path-to-leaf which contains an edge including Terminator1 . - The root-to-node prefix is NOT a substring of text2 when there is no path-to-leaf which doesn't contain Terminator1 . - Such substring of text1 is guaranteed to be the shortest by the visit order imposed by the breadth-first search. This is true because trie edges are labelled by a single chars, so root-to-node paths which are longer by the number of edges correspond to longer prefixes. This is not true in general for Suffix Trees, where edge labels can vary in length, and a path which is composed of less edges may be longer in chars than a path with more edges but shorter labels in average. COMPLEXITY - Validating the input requires going through text1 and text2, and takes linear time in the the number of chars n of the concatenated text \"text1 ## separator1 ## text2 ## separator2\", and constant space. - Building the Generalized Suffix Trie takes time and space at least proportional to the number of nodes of the trie, which is quadratic with n (unlike for Suffix Trees). - For each level of the breadth-first traversal of the trie, all node-to-leaf paths are checked (in the worst case). - There are at most n levels in the trie, since there can't be a path longer than a suffix of the concatenated text, and all suffixes should be covered by the trie. The higher is the level, the shorter are node-to-leaf paths. However, their number is always the same or lower. - For each node there are as many node-to-leaf paths as leaves, and there are at most n leaves in the trie (since each suffix can add potentially multiple intermediate nodes, but always a single leaf, having terminator2 as incoming edge). - Checking whether a path contains terminator1 takes constant space and a time proportional to the number of nodes in the path, which is O(n). - Rebuilding the string from the identified path takes O(n) time and space. - So in conclusion, Time Complexity is O(n^3) and Space Complexity is O(n^2). Constructors | Improve this Doc View Source SuffixTrieBasedSnssFinder(Char, Char) Builds an instance with the provided terminators, validating the input by default. All text passed to Find(IEnumerable<Char>, IEnumerable<Char>) must conform with these two terminators. Declaration public SuffixTrieBasedSnssFinder(char terminator1, char terminator2) Parameters Type Name Description System.Char terminator1 System.Char terminator2 Methods | Improve this Doc View Source Find(IEnumerable<Char>, IEnumerable<Char>) This implementation builds and uses a SuffixTrieNode structure to perform the search. Declaration public override IEnumerable<string> Find(IEnumerable<char> text1, IEnumerable<char> text2) Parameters Type Name Description IEnumerable < System.Char > text1 IEnumerable < System.Char > text2 Returns Type Description IEnumerable < System.String > Overrides SuffixStructureBasedSnssFinder.Find(IEnumerable<Char>, IEnumerable<Char>) Remarks Implements ISnssFinder Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.SuffixStructures.SuffixStructureEdgeExtensions.html": {
    "href": "api/MoreStructures.SuffixStructures.SuffixStructureEdgeExtensions.html",
    "title": "Class SuffixStructureEdgeExtensions",
    "keywords": "Class SuffixStructureEdgeExtensions Extension methods for all ISuffixStructureEdge<TEdge, TNode> edge concretions. Inheritance System.Object SuffixStructureEdgeExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.SuffixStructures Assembly : MoreStructures.dll Syntax public static class SuffixStructureEdgeExtensions Methods | Improve this Doc View Source ContainsIndex<TEdge, TNode>(ISuffixStructureEdge<TEdge, TNode>, Int32) Whether the provided edge contains the provided index . Declaration public static bool ContainsIndex<TEdge, TNode>(this ISuffixStructureEdge<TEdge, TNode> edge, int index) where TEdge : ISuffixStructureEdge<TEdge, TNode> where TNode : ISuffixStructureNode<TEdge, TNode> Parameters Type Name Description ISuffixStructureEdge <TEdge, TNode> edge The edge to check. System.Int32 index The index of the char of the text, to look for. Must be non-negative. Returns Type Description System.Boolean A boolean. Type Parameters Name Description TEdge TNode | Improve this Doc View Source ContainsIndexesNonBiggerThan<TEdge, TNode>(ISuffixStructureEdge<TEdge, TNode>, Int32) Whether the provided edge has a Start lower or equal than the provided index . Declaration public static bool ContainsIndexesNonBiggerThan<TEdge, TNode>(this ISuffixStructureEdge<TEdge, TNode> edge, int index) where TEdge : ISuffixStructureEdge<TEdge, TNode> where TNode : ISuffixStructureNode<TEdge, TNode> Parameters Type Name Description ISuffixStructureEdge <TEdge, TNode> edge The edge to check. System.Int32 index The index of the char of the text, to look for. Must be non-negative. Returns Type Description System.Boolean A boolean. Type Parameters Name Description TEdge TNode | Improve this Doc View Source IsAdjacentTo<TEdge, TNode>(ISuffixStructureEdge<TEdge, TNode>, TEdge, AdjacencyOrders) Whether first is in adjacency order w.r.t. second , acoording to the provided order . Declaration public static bool IsAdjacentTo<TEdge, TNode>(this ISuffixStructureEdge<TEdge, TNode> first, TEdge second, AdjacencyOrders order = AdjacencyOrders.BeforeOrAfter) where TEdge : ISuffixStructureEdge<TEdge, TNode> where TNode : ISuffixStructureNode<TEdge, TNode> Parameters Type Name Description ISuffixStructureEdge <TEdge, TNode> first The edge to be compared for adjacency. TEdge second The edge to compare the first edge against. AdjacencyOrders order The adjacency relationship order to use for comparison. Returns Type Description System.Boolean True if the specified adjacency relationship is respected. Type Parameters Name Description TEdge TNode"
  },
  "api/MoreStructures.SuffixStructures.SuffixStructureNodeExtensions.html": {
    "href": "api/MoreStructures.SuffixStructures.SuffixStructureNodeExtensions.html",
    "title": "Class SuffixStructureNodeExtensions",
    "keywords": "Class SuffixStructureNodeExtensions Extension methods for all ISuffixStructureNode<TEdge, TNode> node concretions. Inheritance System.Object SuffixStructureNodeExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.SuffixStructures Assembly : MoreStructures.dll Syntax public static class SuffixStructureNodeExtensions Methods | Improve this Doc View Source GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator) Returns all suffixes for the provided text from the node down the ISuffixStructureNode<TEdge, TNode> , up to leaves. Declaration public static IEnumerable<IEnumerable<char>> GetAllSuffixesFor<TEdge, TNode>(this TNode node, TextWithTerminator text) where TEdge : ISuffixStructureEdge<TEdge, TNode> where TNode : ISuffixStructureNode<TEdge, TNode> Parameters Type Name Description TNode node The node, to start the structure traversal from. TextWithTerminator text The text with terminator, whose suffixes have to be extracted. Returns Type Description IEnumerable < IEnumerable < System.Char >> A sequence of IValueEnumerable<T> , each one being a suffix. Type Parameters Name Description TEdge TNode"
  },
  "api/MoreStructures.SuffixStructures.SuffixStructureTreePathExtensions.html": {
    "href": "api/MoreStructures.SuffixStructures.SuffixStructureTreePathExtensions.html",
    "title": "Class SuffixStructureTreePathExtensions",
    "keywords": "Class SuffixStructureTreePathExtensions Extension methods for all TreePath<TEdge, TNode> used in ISuffixStructureNode<TEdge, TNode> structures. Inheritance System.Object SuffixStructureTreePathExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.SuffixStructures Assembly : MoreStructures.dll Syntax public static class SuffixStructureTreePathExtensions Methods | Improve this Doc View Source ContainsIndex<TEdge, TNode>(TreePath<TEdge, TNode>, Int32) Whether the provided path includes at least once, on any node of the path, the provided index . Declaration public static bool ContainsIndex<TEdge, TNode>(this TreePath<TEdge, TNode> path, int index) where TEdge : ISuffixStructureEdge<TEdge, TNode> where TNode : ISuffixStructureNode<TEdge, TNode> Parameters Type Name Description TreePath <TEdge, TNode> path The path to walk, looking for index . System.Int32 index The index of the char of the text, to look for. Must be non-negative. Returns Type Description System.Boolean A boolean. Type Parameters Name Description TEdge TNode | Improve this Doc View Source ContainsIndexesNonBiggerThan<TEdge, TNode>(TreePath<TEdge, TNode>, Int32) Whether the provided path has at least a node starting at a index lower or equal than the provided index . Declaration public static bool ContainsIndexesNonBiggerThan<TEdge, TNode>(this TreePath<TEdge, TNode> path, int index) where TEdge : ISuffixStructureEdge<TEdge, TNode> where TNode : ISuffixStructureNode<TEdge, TNode> Parameters Type Name Description TreePath <TEdge, TNode> path The path to walk, looking for index . System.Int32 index The index of the char of the text, to look for. Must be non-negative. Returns Type Description System.Boolean A boolean. Type Parameters Name Description TEdge TNode | Improve this Doc View Source IsSuffixOf<TEdge, TNode>(TreePath<TEdge, TNode>, TextWithTerminator) Whether this path identifies a suffix of the provided text. Declaration public static bool IsSuffixOf<TEdge, TNode>(this TreePath<TEdge, TNode> path, TextWithTerminator text) where TEdge : IRecImmDictIndexedTreeEdge<TEdge, TNode>, TextWithTerminator.ISelector where TNode : IRecImmDictIndexedTreeNode<TEdge, TNode> Parameters Type Name Description TreePath <TEdge, TNode> path The path, identifying a segment of the provided text. TextWithTerminator text The text, including the terminator character. Returns Type Description System.Boolean True if the segment of text is also a suffix the text. Type Parameters Name Description TEdge TNode | Improve this Doc View Source SuffixFor<TEdge, TNode>(TreePath<TEdge, TNode>, TextWithTerminator) Calculate the suffix corresponding to this path on the provided terminator-including text. Declaration public static IValueEnumerable<char> SuffixFor<TEdge, TNode>(this TreePath<TEdge, TNode> path, TextWithTerminator text) where TEdge : IRecImmDictIndexedTreeEdge<TEdge, TNode>, TextWithTerminator.ISelector where TNode : IRecImmDictIndexedTreeNode<TEdge, TNode> Parameters Type Name Description TreePath <TEdge, TNode> path The path to traverse to build the suffix. TextWithTerminator text The text, including the terminator character. Returns Type Description IValueEnumerable < System.Char > A IValueEnumerable<T> sequence of System.Char containing the suffix. Type Parameters Name Description TEdge TNode"
  },
  "api/MoreStructures.SuffixTrees.Builders.html": {
    "href": "api/MoreStructures.SuffixTrees.Builders.html",
    "title": "Namespace MoreStructures.SuffixTrees.Builders",
    "keywords": "Namespace MoreStructures.SuffixTrees.Builders Classes NaivePartiallyRecursiveSuffixTreeBuilder Builds objects, such as edges and nodes, for SuffixTreeNode structures. UkkonenSuffixTreeBuilder Builds objects, such as edges and nodes, for SuffixTreeNode structures."
  },
  "api/MoreStructures.SuffixTrees.Builders.NaivePartiallyRecursiveSuffixTreeBuilder.html": {
    "href": "api/MoreStructures.SuffixTrees.Builders.NaivePartiallyRecursiveSuffixTreeBuilder.html",
    "title": "Class NaivePartiallyRecursiveSuffixTreeBuilder",
    "keywords": "Class NaivePartiallyRecursiveSuffixTreeBuilder Builds objects, such as edges and nodes, for SuffixTreeNode structures. Inheritance System.Object NaivePartiallyRecursiveSuffixTreeBuilder Implements IBuilder < SuffixTreeEdge , SuffixTreeNode > Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.SuffixTrees.Builders Assembly : MoreStructures.dll Syntax public class NaivePartiallyRecursiveSuffixTreeBuilder : IBuilder<SuffixTreeEdge, SuffixTreeNode> Remarks ALGORITHM Implemented as an iteration of recursive visit of the tree being built, with as many iterations as the number of suffix of the input (where the longest suffix is the text itself) and one level of recursion per char of each suffix. Limited by call stack depth and usable with input text of a \"reasonable\" length (i.e. string having a length < ~1K chars). COMPLEXITY - Time Complexity = O(t^2 * as) and Space Complexity = O(t) where t = length of the text to match and as = size of the alphabet of the text. If the alphabet is of constant size, Time Complexity is quadratic. - Compared to tries, trees are more compact due to edge coalescing and edge label compression (i.e. edge strings stored as pair (start, length), rather than as a substring of length chars). Each recursion add a leaf and at most one intermediate node, so Space Complexity ~ 2 * t = O(t). Methods | Improve this Doc View Source BuildTree(TextWithTerminator[]) Declaration public SuffixTreeNode BuildTree(params TextWithTerminator[] texts) Parameters Type Name Description TextWithTerminator [] texts Returns Type Description SuffixTreeNode Remarks Implements IBuilder<TEdge, TNode> Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator) BuilderExtensions.BuildTree<TEdge, TNode>(IBuilder<TEdge, TNode>, String)"
  },
  "api/MoreStructures.SuffixTrees.Builders.UkkonenSuffixTreeBuilder.html": {
    "href": "api/MoreStructures.SuffixTrees.Builders.UkkonenSuffixTreeBuilder.html",
    "title": "Class UkkonenSuffixTreeBuilder",
    "keywords": "Class UkkonenSuffixTreeBuilder Builds objects, such as edges and nodes, for SuffixTreeNode structures. Inheritance System.Object UkkonenSuffixTreeBuilder Implements IBuilder < SuffixTreeEdge , SuffixTreeNode > Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.SuffixTrees.Builders Assembly : MoreStructures.dll Syntax public class UkkonenSuffixTreeBuilder : IBuilder<SuffixTreeEdge, SuffixTreeNode> Remarks Iterative implementation of the Ukkonen algorithm: see https://en.wikipedia.org/wiki/Ukkonen%27s_algorithm for an introduction and https://www.cs.helsinki.fi/u/ukkonen/SuffixT1withFigs.pdf for the original paper. ALGORITHM OPTIMIZATIONS The algorithm applies some optimizations to achieve linear complexity: - Edge Labels compression : strings on edges are stored as (start, end) indexes. This makes the space used by a single edge constant, i.e. O(1), because it always consists of two integers, regardless of how many chars of the text it represents. - Global End : all leafs have a dynamic end index, autoincremented every new phase. This makes the time used to apply Rule 1 Extension constant, i.e. O(1), because incrementing the global end also increments all leaf implicitely. - Suffix Links : all internal nodes point to another internal node sharing the suffix. This makes more efficient traversal, because storing and jumping the suffix link when needed means traversal doesn't have to be done again. ALGORITHM The algorithm is structured in phases, as many as the number of chars in the text. At the beginning of a new phase, both the number of remaining suffixes to take care of, and the global end pointer are both increased by 1. Each phase is composed of at least 1 iteration, each one taking care of remaining suffixes. At the beginning USECASES Not limited by call stack depth. Convenient with long input text (i.e. string having a length < ~1K chars). COMPLEXITY Time Complexity = O(t * as) and Space Complexity = O(2 * t) where t = length of the text to match and as = size of the alphabet of the text. If the alphabet is of constant size, Time Complexity is linear. Otherwise it is O(t * log(t)). While there are as many phases as number of chars in text (t), and there can be multiple iterations per phase (as many as the number of remaining suffixes to process), the complexity is still linear, ~ 2t. Methods | Improve this Doc View Source BuildTree(TextWithTerminator[]) Declaration public SuffixTreeNode BuildTree(params TextWithTerminator[] texts) Parameters Type Name Description TextWithTerminator [] texts Returns Type Description SuffixTreeNode Remarks Implements IBuilder<TEdge, TNode> Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator) BuilderExtensions.BuildTree<TEdge, TNode>(IBuilder<TEdge, TNode>, String)"
  },
  "api/MoreStructures.SuffixTrees.html": {
    "href": "api/MoreStructures.SuffixTrees.html",
    "title": "Namespace MoreStructures.SuffixTrees",
    "keywords": "Namespace MoreStructures.SuffixTrees Classes SuffixTreeEdge The index key of the collection of children of a SuffixTreeNode , which identifies a non-empty substring in text used as a selector to navigate the SuffixTreeNode in text pattern matching. SuffixTreeNode An immutable node of an immutable Suffix Tree, recursively pointing to its children nodes via SuffixTreeEdge instances, associated with selector strings. SuffixTreeNode.Intermediate Builds an intermediate node, i.e. a node with children and their corresponding incoming edges. SuffixTreeNode.Leaf Builds a leaf, i.e. a node with no children and the start index of the suffix in the text."
  },
  "api/MoreStructures.SuffixTrees.SuffixTreeEdge.html": {
    "href": "api/MoreStructures.SuffixTrees.SuffixTreeEdge.html",
    "title": "Class SuffixTreeEdge",
    "keywords": "Class SuffixTreeEdge The index key of the collection of children of a SuffixTreeNode , which identifies a non-empty substring in text used as a selector to navigate the SuffixTreeNode in text pattern matching. Inheritance System.Object SuffixTreeEdge SuffixTrieEdge Implements ISuffixStructureEdge < SuffixTreeEdge , SuffixTreeNode > TextWithTerminator.ISelector IRecImmDictIndexedTreeEdge < SuffixTreeEdge , SuffixTreeNode > IComparable < SuffixTreeEdge > System.IEquatable < SuffixTreeEdge > Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : MoreStructures.SuffixTrees Assembly : MoreStructures.dll Syntax public class SuffixTreeEdge : ISuffixStructureEdge<SuffixTreeEdge, SuffixTreeNode>, TextWithTerminator.ISelector, IRecImmDictIndexedTreeEdge<SuffixTreeEdge, SuffixTreeNode>, IEquatable<SuffixTreeEdge> Remarks Supports , by Start and Length , in this order. Constructors | Improve this Doc View Source SuffixTreeEdge(Int32, Int32) The index key of the collection of children of a SuffixTreeNode , which identifies a non-empty substring in text used as a selector to navigate the SuffixTreeNode in text pattern matching. Declaration public SuffixTreeEdge(int Start, int Length) Parameters Type Name Description System.Int32 Start System.Int32 Length Remarks Supports , by Start and Length , in this order. Properties | Improve this Doc View Source Length The length of the edge string. Declaration public int Length { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source Start The index of the first character of the edge string in the text. Declaration public int Start { get; set; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source CompareTo(SuffixTreeEdge) Comparison is done by Start first, then Length : lower is smaller, higher is bigger. Declaration public int CompareTo(SuffixTreeEdge other) Parameters Type Name Description SuffixTreeEdge other Returns Type Description System.Int32 | Improve this Doc View Source Of(TextWithTerminator) Extract the substring identified by this selector, out of the provided TextWithTerminator . Declaration public virtual string Of(TextWithTerminator text) Parameters Type Name Description TextWithTerminator text The text with terminator, to extract a substring of. Returns Type Description System.String A substring, whose length depends on the selector. | Improve this Doc View Source OfRotated(RotatedTextWithTerminator) Extract the substring identified by this selector, out of the provided RotatedTextWithTerminator . Declaration public virtual string OfRotated(RotatedTextWithTerminator text) Parameters Type Name Description RotatedTextWithTerminator text The text with terminator, to extract a substring of. Returns Type Description System.String A substring, whose length depends on the selector. | Improve this Doc View Source ToString() Generates a string in the form \"( Start , Length )\". Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Implements ISuffixStructureEdge<TEdge, TNode> TextWithTerminator.ISelector IRecImmDictIndexedTreeEdge<TEdge, TNode> IComparable<> System.IEquatable<T> Extension Methods SuffixStructureEdgeExtensions.IsAdjacentTo<TEdge, TNode>(ISuffixStructureEdge<TEdge, TNode>, TEdge, AdjacencyOrders) SuffixStructureEdgeExtensions.ContainsIndex<TEdge, TNode>(ISuffixStructureEdge<TEdge, TNode>, Int32) SuffixStructureEdgeExtensions.ContainsIndexesNonBiggerThan<TEdge, TNode>(ISuffixStructureEdge<TEdge, TNode>, Int32) SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.SuffixTrees.SuffixTreeNode.html": {
    "href": "api/MoreStructures.SuffixTrees.SuffixTreeNode.html",
    "title": "Class SuffixTreeNode",
    "keywords": "Class SuffixTreeNode An immutable node of an immutable Suffix Tree, recursively pointing to its children nodes via SuffixTreeEdge instances, associated with selector strings. Inheritance System.Object SuffixTreeNode SuffixTreeNode.Intermediate SuffixTreeNode.Leaf Implements ISuffixStructureNode < SuffixTreeEdge , SuffixTreeNode > IRecImmDictIndexedTreeNode < SuffixTreeEdge , SuffixTreeNode > System.IEquatable < SuffixTreeNode > Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : MoreStructures.SuffixTrees Assembly : MoreStructures.dll Syntax public abstract class SuffixTreeNode : ISuffixStructureNode<SuffixTreeEdge, SuffixTreeNode>, IRecImmDictIndexedTreeNode<SuffixTreeEdge, SuffixTreeNode>, IEquatable<SuffixTreeNode> Remarks ADVANTAGES AND DISADVANTAGES Suffix Trees are more space-efficient than Suffix Tries due to the reduced number of SuffixTreeEdge and their SuffixTreeNode , compare to the corresponding SuffixTrieEdge and their SuffixTrieNode , due to entire paths of single chains of chars in Suffix Tries being coalesced into a single selector string, which is stored on the edge with path label compression, i.e. using two fixed sized numbers ( Start and Length ) instead of a variable-length string of characters. Furthermore, suffix trees, unlike suffix tries, can be constructed in linear time, for example via the UkkonenSuffixTreeBuilder . IMMUTABILITY Immutability is guaranteed by using ValueReadOnlyCollection<T> . Constructors | Improve this Doc View Source SuffixTreeNode(IDictionary<SuffixTreeEdge, SuffixTreeNode>, Nullable<Int32>) An immutable node of an immutable Suffix Tree, recursively pointing to its children nodes via SuffixTreeEdge instances, associated with selector strings. Declaration protected SuffixTreeNode(IDictionary<SuffixTreeEdge, SuffixTreeNode> Children, int? Start) Parameters Type Name Description IDictionary < SuffixTreeEdge , SuffixTreeNode > Children The collection of children for the node, indexed by string edges. System.Nullable < System.Int32 > Start Remarks ADVANTAGES AND DISADVANTAGES Suffix Trees are more space-efficient than Suffix Tries due to the reduced number of SuffixTreeEdge and their SuffixTreeNode , compare to the corresponding SuffixTrieEdge and their SuffixTrieNode , due to entire paths of single chains of chars in Suffix Tries being coalesced into a single selector string, which is stored on the edge with path label compression, i.e. using two fixed sized numbers ( Start and Length ) instead of a variable-length string of characters. Furthermore, suffix trees, unlike suffix tries, can be constructed in linear time, for example via the UkkonenSuffixTreeBuilder . IMMUTABILITY Immutability is guaranteed by using ValueReadOnlyCollection<T> . Properties | Improve this Doc View Source Children A readonly view of the children private collection of this node. Empty for leaves. Declaration public IDictionary<SuffixTreeEdge, SuffixTreeNode> Children { get; } Property Value Type Description IDictionary < SuffixTreeEdge , SuffixTreeNode > | Improve this Doc View Source Item[SuffixTreeEdge] Indexes into the children of this node, by edge. Declaration public SuffixTreeNode this[SuffixTreeEdge edge] { get; } Parameters Type Name Description SuffixTreeEdge edge Property Value Type Description SuffixTreeNode | Improve this Doc View Source Start The index of the character, the path from the root leading to this leaf starts with. Non-null for leaves only. Declaration public int? Start { get; } Property Value Type Description System.Nullable < System.Int32 > Methods | Improve this Doc View Source ToString() Uses a IStringifier<TEdge, TNode> to generate the string which show the node and its underlying structure. Declaration public sealed override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Remarks Sealed to prevent compiler from superceding ToString() in derived record. Implements ISuffixStructureNode<TEdge, TNode> IRecImmDictIndexedTreeNode<TEdge, TNode> System.IEquatable<T> Extension Methods RecImmDictIndexedTreeNodeExtensions.IsLeaf<TEdge, TNode>(IRecImmDictIndexedTreeNode<TEdge, TNode>) SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator) Matcher.Match<TEdge, TNode>(ISuffixStructureNode<TEdge, TNode>, TextWithTerminator, String)"
  },
  "api/MoreStructures.SuffixTrees.SuffixTreeNode.Intermediate.html": {
    "href": "api/MoreStructures.SuffixTrees.SuffixTreeNode.Intermediate.html",
    "title": "Class SuffixTreeNode.Intermediate",
    "keywords": "Class SuffixTreeNode.Intermediate Builds an intermediate node, i.e. a node with children and their corresponding incoming edges. Inheritance System.Object SuffixTreeNode SuffixTreeNode.Intermediate Implements ISuffixStructureNode < SuffixTreeEdge , SuffixTreeNode > IRecImmDictIndexedTreeNode < SuffixTreeEdge , SuffixTreeNode > System.IEquatable < SuffixTreeNode > System.IEquatable < SuffixTreeNode.Intermediate > Inherited Members SuffixTreeNode.Children SuffixTreeNode.Start SuffixTreeNode.Item[SuffixTreeEdge] SuffixTreeNode.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : MoreStructures.SuffixTrees Assembly : MoreStructures.dll Syntax public class Intermediate : SuffixTreeNode, ISuffixStructureNode<SuffixTreeEdge, SuffixTreeNode>, IRecImmDictIndexedTreeNode<SuffixTreeEdge, SuffixTreeNode>, IEquatable<SuffixTreeNode>, IEquatable<SuffixTreeNode.Intermediate> Constructors | Improve this Doc View Source Intermediate(IDictionary<SuffixTreeEdge, SuffixTreeNode>) Builds an intermediate node, i.e. a node with children and their corresponding incoming edges. Declaration public Intermediate(IDictionary<SuffixTreeEdge, SuffixTreeNode> Children) Parameters Type Name Description IDictionary < SuffixTreeEdge , SuffixTreeNode > Children Implements ISuffixStructureNode<TEdge, TNode> IRecImmDictIndexedTreeNode<TEdge, TNode> System.IEquatable<T> System.IEquatable<T> Extension Methods RecImmDictIndexedTreeNodeExtensions.IsLeaf<TEdge, TNode>(IRecImmDictIndexedTreeNode<TEdge, TNode>) SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator) Matcher.Match<TEdge, TNode>(ISuffixStructureNode<TEdge, TNode>, TextWithTerminator, String)"
  },
  "api/MoreStructures.SuffixTrees.SuffixTreeNode.Leaf.html": {
    "href": "api/MoreStructures.SuffixTrees.SuffixTreeNode.Leaf.html",
    "title": "Class SuffixTreeNode.Leaf",
    "keywords": "Class SuffixTreeNode.Leaf Builds a leaf, i.e. a node with no children and the start index of the suffix in the text. Inheritance System.Object SuffixTreeNode SuffixTreeNode.Leaf Implements ISuffixStructureNode < SuffixTreeEdge , SuffixTreeNode > IRecImmDictIndexedTreeNode < SuffixTreeEdge , SuffixTreeNode > System.IEquatable < SuffixTreeNode > System.IEquatable < SuffixTreeNode.Leaf > Inherited Members SuffixTreeNode.Children SuffixTreeNode.Start SuffixTreeNode.Item[SuffixTreeEdge] SuffixTreeNode.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : MoreStructures.SuffixTrees Assembly : MoreStructures.dll Syntax public class Leaf : SuffixTreeNode, ISuffixStructureNode<SuffixTreeEdge, SuffixTreeNode>, IRecImmDictIndexedTreeNode<SuffixTreeEdge, SuffixTreeNode>, IEquatable<SuffixTreeNode>, IEquatable<SuffixTreeNode.Leaf> Constructors | Improve this Doc View Source Leaf(Int32) Builds a leaf, i.e. a node with no children and the start index of the suffix in the text. Declaration public Leaf(int LeafStart) Parameters Type Name Description System.Int32 LeafStart Properties | Improve this Doc View Source LeafStart Declaration public int LeafStart { get; set; } Property Value Type Description System.Int32 Implements ISuffixStructureNode<TEdge, TNode> IRecImmDictIndexedTreeNode<TEdge, TNode> System.IEquatable<T> System.IEquatable<T> Extension Methods RecImmDictIndexedTreeNodeExtensions.IsLeaf<TEdge, TNode>(IRecImmDictIndexedTreeNode<TEdge, TNode>) SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator) Matcher.Match<TEdge, TNode>(ISuffixStructureNode<TEdge, TNode>, TextWithTerminator, String)"
  },
  "api/MoreStructures.SuffixTries.Builders.html": {
    "href": "api/MoreStructures.SuffixTries.Builders.html",
    "title": "Namespace MoreStructures.SuffixTries.Builders",
    "keywords": "Namespace MoreStructures.SuffixTries.Builders Classes NaivePartiallyRecursiveSuffixTrieBuilder Builds objects, such as edges and nodes, for SuffixTrieNode structures."
  },
  "api/MoreStructures.SuffixTries.Builders.NaivePartiallyRecursiveSuffixTrieBuilder.html": {
    "href": "api/MoreStructures.SuffixTries.Builders.NaivePartiallyRecursiveSuffixTrieBuilder.html",
    "title": "Class NaivePartiallyRecursiveSuffixTrieBuilder",
    "keywords": "Class NaivePartiallyRecursiveSuffixTrieBuilder Builds objects, such as edges and nodes, for SuffixTrieNode structures. Inheritance System.Object NaivePartiallyRecursiveSuffixTrieBuilder Implements IBuilder < SuffixTrieEdge , SuffixTrieNode > Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.SuffixTries.Builders Assembly : MoreStructures.dll Syntax public class NaivePartiallyRecursiveSuffixTrieBuilder : IBuilder<SuffixTrieEdge, SuffixTrieNode> Remarks ALGORITHM Implemented iteratively, with one level of recursion per char of each suffix of the input TextWithTerminator (where the longest suffix is the text itself). ADVANTAGES AND DISADVANTAGES Limited by call stack depth and usable with input text of a \"reasonable\" length (i.e. string having a length < ~1K chars). COMPLEXITY - Time Complexity = O(t^2 * as) and Space Complexity = O(t^2) where t = length of the text to match and as = size of the alphabet of the text. - If the alphabet is of constant size, complexity is quadratic. Methods | Improve this Doc View Source BuildTree(TextWithTerminator[]) Declaration public SuffixTrieNode BuildTree(params TextWithTerminator[] texts) Parameters Type Name Description TextWithTerminator [] texts Returns Type Description SuffixTrieNode Remarks Implements IBuilder<TEdge, TNode> Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator) BuilderExtensions.BuildTree<TEdge, TNode>(IBuilder<TEdge, TNode>, String)"
  },
  "api/MoreStructures.SuffixTries.html": {
    "href": "api/MoreStructures.SuffixTries.html",
    "title": "Namespace MoreStructures.SuffixTries",
    "keywords": "Namespace MoreStructures.SuffixTries Classes SuffixTrieEdge The index key of the collection of children of a SuffixTrieNode , which identifies a single char in text, used as a selector to navigate the SuffixTrieNode in text pattern matching. SuffixTrieNode An immutable node of an immutable Suffix Trie, recursively pointing to its children nodes via SuffixTrieEdge instances, associated with selector characters. SuffixTrieNode.Intermediate Builds an intermediate node, i.e. a node with children and their corresponding incoming edges. SuffixTrieNode.Leaf Builds a leaf, i.e. a node with no children and the start index of the suffix in the text."
  },
  "api/MoreStructures.SuffixTries.SuffixTrieEdge.html": {
    "href": "api/MoreStructures.SuffixTries.SuffixTrieEdge.html",
    "title": "Class SuffixTrieEdge",
    "keywords": "Class SuffixTrieEdge The index key of the collection of children of a SuffixTrieNode , which identifies a single char in text, used as a selector to navigate the SuffixTrieNode in text pattern matching. Inheritance System.Object SuffixTreeEdge SuffixTrieEdge Implements ISuffixStructureEdge < SuffixTreeEdge , SuffixTreeNode > IRecImmDictIndexedTreeEdge < SuffixTreeEdge , SuffixTreeNode > IComparable < SuffixTreeEdge > System.IEquatable < SuffixTreeEdge > ISuffixStructureEdge < SuffixTrieEdge , SuffixTrieNode > TextWithTerminator.ISelector IRecImmDictIndexedTreeEdge < SuffixTrieEdge , SuffixTrieNode > IComparable < SuffixTrieEdge > System.IEquatable < SuffixTrieEdge > Inherited Members SuffixTreeEdge.Start SuffixTreeEdge.Length SuffixTreeEdge.CompareTo(SuffixTreeEdge) SuffixTreeEdge.Of(TextWithTerminator) SuffixTreeEdge.OfRotated(RotatedTextWithTerminator) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : MoreStructures.SuffixTries Assembly : MoreStructures.dll Syntax public class SuffixTrieEdge : SuffixTreeEdge, ISuffixStructureEdge<SuffixTreeEdge, SuffixTreeNode>, IRecImmDictIndexedTreeEdge<SuffixTreeEdge, SuffixTreeNode>, IEquatable<SuffixTreeEdge>, ISuffixStructureEdge<SuffixTrieEdge, SuffixTrieNode>, TextWithTerminator.ISelector, IRecImmDictIndexedTreeEdge<SuffixTrieEdge, SuffixTrieNode>, IEquatable<SuffixTrieEdge> Remarks Supports , by Index . Constructors | Improve this Doc View Source SuffixTrieEdge(Int32) The index key of the collection of children of a SuffixTrieNode , which identifies a single char in text, used as a selector to navigate the SuffixTrieNode in text pattern matching. Declaration public SuffixTrieEdge(int Index) Parameters Type Name Description System.Int32 Index The index of the character in the text. Remarks Supports , by Index . Properties | Improve this Doc View Source Index Declaration public int Index { get; set; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source CompareTo(SuffixTrieEdge) Comparison is done by Index : lower is smaller, higher is bigger. Declaration public int CompareTo(SuffixTrieEdge other) Parameters Type Name Description SuffixTrieEdge other Returns Type Description System.Int32 | Improve this Doc View Source ToString() Generates a string in the form \"( Start )\". Length is not included as in this context it is always 1. Declaration public override string ToString() Returns Type Description System.String Overrides SuffixTreeEdge.ToString() Implements ISuffixStructureEdge<TEdge, TNode> IRecImmDictIndexedTreeEdge<TEdge, TNode> IComparable<> System.IEquatable<T> ISuffixStructureEdge<TEdge, TNode> TextWithTerminator.ISelector IRecImmDictIndexedTreeEdge<TEdge, TNode> IComparable<> System.IEquatable<T> Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.SuffixTries.SuffixTrieNode.html": {
    "href": "api/MoreStructures.SuffixTries.SuffixTrieNode.html",
    "title": "Class SuffixTrieNode",
    "keywords": "Class SuffixTrieNode An immutable node of an immutable Suffix Trie, recursively pointing to its children nodes via SuffixTrieEdge instances, associated with selector characters. Inheritance System.Object SuffixTrieNode SuffixTrieNode.Intermediate SuffixTrieNode.Leaf Implements ISuffixStructureNode < SuffixTrieEdge , SuffixTrieNode > IRecImmDictIndexedTreeNode < SuffixTrieEdge , SuffixTrieNode > System.IEquatable < SuffixTrieNode > Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : MoreStructures.SuffixTries Assembly : MoreStructures.dll Syntax public abstract class SuffixTrieNode : ISuffixStructureNode<SuffixTrieEdge, SuffixTrieNode>, IRecImmDictIndexedTreeNode<SuffixTrieEdge, SuffixTrieNode>, IEquatable<SuffixTrieNode> Remarks ADVANTAGES AND DISADVANTAGES Compare to suffix trees, suffix tries, although less performant and optimized on many operations, are simpler to build, navigate and understand. IMMUTABILITY Immutability is guaranteed by using ValueReadOnlyCollection<T> . Constructors | Improve this Doc View Source SuffixTrieNode(IDictionary<SuffixTrieEdge, SuffixTrieNode>, Nullable<Int32>) An immutable node of an immutable Suffix Trie, recursively pointing to its children nodes via SuffixTrieEdge instances, associated with selector characters. Declaration protected SuffixTrieNode(IDictionary<SuffixTrieEdge, SuffixTrieNode> Children, int? Start) Parameters Type Name Description IDictionary < SuffixTrieEdge , SuffixTrieNode > Children The collection of children for the node, indexed by single char edges. System.Nullable < System.Int32 > Start Remarks ADVANTAGES AND DISADVANTAGES Compare to suffix trees, suffix tries, although less performant and optimized on many operations, are simpler to build, navigate and understand. IMMUTABILITY Immutability is guaranteed by using ValueReadOnlyCollection<T> . Properties | Improve this Doc View Source Children A readonly view of the children private collection of this node. Empty for leaves. Declaration public IDictionary<SuffixTrieEdge, SuffixTrieNode> Children { get; } Property Value Type Description IDictionary < SuffixTrieEdge , SuffixTrieNode > | Improve this Doc View Source Item[SuffixTrieEdge] Indexes into the children of this node, by edge, which is a single char selector. Declaration public SuffixTrieNode this[SuffixTrieEdge edge] { get; } Parameters Type Name Description SuffixTrieEdge edge Property Value Type Description SuffixTrieNode | Improve this Doc View Source Start The index of the character, the path from the root leading to this leaf starts with. Non-null for leaves only. Declaration public int? Start { get; } Property Value Type Description System.Nullable < System.Int32 > Methods | Improve this Doc View Source ToString() Uses a IStringifier<TEdge, TNode> to generate the string which show the node and its underlying structure. Declaration public sealed override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Remarks Sealed to prevent compiler from superceding ToString() in derived record. Implements ISuffixStructureNode<TEdge, TNode> IRecImmDictIndexedTreeNode<TEdge, TNode> System.IEquatable<T> Extension Methods RecImmDictIndexedTreeNodeExtensions.IsLeaf<TEdge, TNode>(IRecImmDictIndexedTreeNode<TEdge, TNode>) SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator) Matcher.Match<TEdge, TNode>(ISuffixStructureNode<TEdge, TNode>, TextWithTerminator, String)"
  },
  "api/MoreStructures.SuffixTries.SuffixTrieNode.Intermediate.html": {
    "href": "api/MoreStructures.SuffixTries.SuffixTrieNode.Intermediate.html",
    "title": "Class SuffixTrieNode.Intermediate",
    "keywords": "Class SuffixTrieNode.Intermediate Builds an intermediate node, i.e. a node with children and their corresponding incoming edges. Inheritance System.Object SuffixTrieNode SuffixTrieNode.Intermediate Implements ISuffixStructureNode < SuffixTrieEdge , SuffixTrieNode > IRecImmDictIndexedTreeNode < SuffixTrieEdge , SuffixTrieNode > System.IEquatable < SuffixTrieNode > System.IEquatable < SuffixTrieNode.Intermediate > Inherited Members SuffixTrieNode.Children SuffixTrieNode.Start SuffixTrieNode.Item[SuffixTrieEdge] SuffixTrieNode.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : MoreStructures.SuffixTries Assembly : MoreStructures.dll Syntax public class Intermediate : SuffixTrieNode, ISuffixStructureNode<SuffixTrieEdge, SuffixTrieNode>, IRecImmDictIndexedTreeNode<SuffixTrieEdge, SuffixTrieNode>, IEquatable<SuffixTrieNode>, IEquatable<SuffixTrieNode.Intermediate> Constructors | Improve this Doc View Source Intermediate(IDictionary<SuffixTrieEdge, SuffixTrieNode>) Builds an intermediate node, i.e. a node with children and their corresponding incoming edges. Declaration public Intermediate(IDictionary<SuffixTrieEdge, SuffixTrieNode> Children) Parameters Type Name Description IDictionary < SuffixTrieEdge , SuffixTrieNode > Children Implements ISuffixStructureNode<TEdge, TNode> IRecImmDictIndexedTreeNode<TEdge, TNode> System.IEquatable<T> System.IEquatable<T> Extension Methods RecImmDictIndexedTreeNodeExtensions.IsLeaf<TEdge, TNode>(IRecImmDictIndexedTreeNode<TEdge, TNode>) SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator) Matcher.Match<TEdge, TNode>(ISuffixStructureNode<TEdge, TNode>, TextWithTerminator, String)"
  },
  "api/MoreStructures.SuffixTries.SuffixTrieNode.Leaf.html": {
    "href": "api/MoreStructures.SuffixTries.SuffixTrieNode.Leaf.html",
    "title": "Class SuffixTrieNode.Leaf",
    "keywords": "Class SuffixTrieNode.Leaf Builds a leaf, i.e. a node with no children and the start index of the suffix in the text. Inheritance System.Object SuffixTrieNode SuffixTrieNode.Leaf Implements ISuffixStructureNode < SuffixTrieEdge , SuffixTrieNode > IRecImmDictIndexedTreeNode < SuffixTrieEdge , SuffixTrieNode > System.IEquatable < SuffixTrieNode > System.IEquatable < SuffixTrieNode.Leaf > Inherited Members SuffixTrieNode.Children SuffixTrieNode.Start SuffixTrieNode.Item[SuffixTrieEdge] SuffixTrieNode.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : MoreStructures.SuffixTries Assembly : MoreStructures.dll Syntax public class Leaf : SuffixTrieNode, ISuffixStructureNode<SuffixTrieEdge, SuffixTrieNode>, IRecImmDictIndexedTreeNode<SuffixTrieEdge, SuffixTrieNode>, IEquatable<SuffixTrieNode>, IEquatable<SuffixTrieNode.Leaf> Constructors | Improve this Doc View Source Leaf(Int32) Builds a leaf, i.e. a node with no children and the start index of the suffix in the text. Declaration public Leaf(int LeafStart) Parameters Type Name Description System.Int32 LeafStart Properties | Improve this Doc View Source LeafStart Declaration public int LeafStart { get; set; } Property Value Type Description System.Int32 Implements ISuffixStructureNode<TEdge, TNode> IRecImmDictIndexedTreeNode<TEdge, TNode> System.IEquatable<T> System.IEquatable<T> Extension Methods RecImmDictIndexedTreeNodeExtensions.IsLeaf<TEdge, TNode>(IRecImmDictIndexedTreeNode<TEdge, TNode>) SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator) Matcher.Match<TEdge, TNode>(ISuffixStructureNode<TEdge, TNode>, TextWithTerminator, String)"
  },
  "api/MoreStructures.Tests.BurrowsWheelerTransform.Builder.BuilderTests.html": {
    "href": "api/MoreStructures.Tests.BurrowsWheelerTransform.Builder.BuilderTests.html",
    "title": "Class BuilderTests",
    "keywords": "Class BuilderTests Inheritance System.Object BuilderTests LastFirstPropertyBasedBuilderTests_WithBinarySearchFinder LastFirstPropertyBasedBuilderTests_WithNaiveFinder LastFirstPropertyBasedBuilderTests_WithPrecomputedFinder NaiveBuilderTests Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.BurrowsWheelerTransform.Builder Assembly : MoreStructures.Tests.dll Syntax public abstract class BuilderTests Constructors | Improve this Doc View Source BuilderTests(IBuilder) Declaration public BuilderTests(IBuilder builder) Parameters Type Name Description IBuilder builder Properties | Improve this Doc View Source Builder Declaration protected IBuilder Builder { get; } Property Value Type Description IBuilder Methods | Improve this Doc View Source BuildMatrix_AllRotationsAreDifferent() Declaration public void BuildMatrix_AllRotationsAreDifferent() | Improve this Doc View Source BuildMatrix_FromTransform_IsCorrect(BuilderTests.TestCase) Declaration public void BuildMatrix_FromTransform_IsCorrect(BuilderTests.TestCase testCase) Parameters Type Name Description BuilderTests.TestCase testCase | Improve this Doc View Source BuildMatrix_LastFirstProperty() Declaration public void BuildMatrix_LastFirstProperty() | Improve this Doc View Source BuildMatrix_ReturnsAllRotationsOfText() Declaration public void BuildMatrix_ReturnsAllRotationsOfText() | Improve this Doc View Source BuildMatrix_ReturnsRotationsSorted() Declaration public void BuildMatrix_ReturnsRotationsSorted() | Improve this Doc View Source BuildTransform_WithMatrix_IsCorrect(BuilderTests.TestCase) Declaration public void BuildTransform_WithMatrix_IsCorrect(BuilderTests.TestCase testCase) Parameters Type Name Description BuilderTests.TestCase testCase | Improve this Doc View Source BuildTransform_WithText_IsCorrect(BuilderTests.TestCase) Declaration public void BuildTransform_WithText_IsCorrect(BuilderTests.TestCase testCase) Parameters Type Name Description BuilderTests.TestCase testCase | Improve this Doc View Source InvertMatrix_IsCorrect(BuilderTests.TestCase) Declaration public void InvertMatrix_IsCorrect(BuilderTests.TestCase testCase) Parameters Type Name Description BuilderTests.TestCase testCase | Improve this Doc View Source InvertTransform_IsCorrect(BuilderTests.TestCase) Declaration public void InvertTransform_IsCorrect(BuilderTests.TestCase testCase) Parameters Type Name Description BuilderTests.TestCase testCase Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.Tests.BurrowsWheelerTransform.Builder.BuilderTests.TestCase.html": {
    "href": "api/MoreStructures.Tests.BurrowsWheelerTransform.Builder.BuilderTests.TestCase.html",
    "title": "Enum BuilderTests.TestCase",
    "keywords": "Enum BuilderTests.TestCase Namespace : MoreStructures.Tests.BurrowsWheelerTransform.Builder Assembly : MoreStructures.Tests.dll Syntax public enum TestCase Fields Name Description Allele Banana BurrowsWheelerTransform Mississippi PanamaBananas Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, BuilderTests.TestCase>(TextWithTerminator)"
  },
  "api/MoreStructures.Tests.BurrowsWheelerTransform.Builder.html": {
    "href": "api/MoreStructures.Tests.BurrowsWheelerTransform.Builder.html",
    "title": "Namespace MoreStructures.Tests.BurrowsWheelerTransform.Builder",
    "keywords": "Namespace MoreStructures.Tests.BurrowsWheelerTransform.Builder Classes BuilderTests LastFirstPropertyBasedBuilderTests_WithBinarySearchFinder LastFirstPropertyBasedBuilderTests_WithNaiveFinder LastFirstPropertyBasedBuilderTests_WithPrecomputedFinder NaiveBuilderTests Enums BuilderTests.TestCase"
  },
  "api/MoreStructures.Tests.BurrowsWheelerTransform.Builder.LastFirstFinders.BinarySearchFinderTests.html": {
    "href": "api/MoreStructures.Tests.BurrowsWheelerTransform.Builder.LastFirstFinders.BinarySearchFinderTests.html",
    "title": "Class BinarySearchFinderTests",
    "keywords": "Class BinarySearchFinderTests Inheritance System.Object LastFirstFinderTests BinarySearchFinderTests Inherited Members LastFirstFinderTests.FinderBuilder LastFirstFinderTests.FindIndexOfNthOccurrenceInBWTAndSortedBWT_IsCorrect(String, Char, Int32, Int32, Int32, Int32) LastFirstFinderTests.FindIndexOfNthOccurrenceInBWTAndSortedBWT_ThrowsExceptionOnInvalidInput(String, Char, Int32, Int32) LastFirstFinderTests.FindOccurrenceOfCharInBWT_IsCorrect(String, Char, Int32, Int32) LastFirstFinderTests.FindOccurrenceOfCharInSortedBWT_IsCorrect(String, Char, Int32, Int32) LastFirstFinderTests.FindOccurrenceOfCharInSortedBWTAndSortedBWT_ThrowsExceptionOnInvalidInput(String, Char, Int32) LastFirstFinderTests.LastToFirst_IsCorrect(String, Char, Int32, Int32) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.BurrowsWheelerTransform.Builder.LastFirstFinders Assembly : MoreStructures.Tests.dll Syntax public class BinarySearchFinderTests : LastFirstFinderTests Constructors | Improve this Doc View Source BinarySearchFinderTests() Declaration public BinarySearchFinderTests() Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.Tests.BurrowsWheelerTransform.Builder.LastFirstFinders.html": {
    "href": "api/MoreStructures.Tests.BurrowsWheelerTransform.Builder.LastFirstFinders.html",
    "title": "Namespace MoreStructures.Tests.BurrowsWheelerTransform.Builder.LastFirstFinders",
    "keywords": "Namespace MoreStructures.Tests.BurrowsWheelerTransform.Builder.LastFirstFinders Classes BinarySearchFinderTests LastFirstFinderTests NaiveFinderTests PrecomputedFinderTests"
  },
  "api/MoreStructures.Tests.BurrowsWheelerTransform.Builder.LastFirstFinders.LastFirstFinderTests.html": {
    "href": "api/MoreStructures.Tests.BurrowsWheelerTransform.Builder.LastFirstFinders.LastFirstFinderTests.html",
    "title": "Class LastFirstFinderTests",
    "keywords": "Class LastFirstFinderTests Inheritance System.Object LastFirstFinderTests BinarySearchFinderTests NaiveFinderTests PrecomputedFinderTests Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.BurrowsWheelerTransform.Builder.LastFirstFinders Assembly : MoreStructures.Tests.dll Syntax public abstract class LastFirstFinderTests Constructors | Improve this Doc View Source LastFirstFinderTests(Func<RotatedTextWithTerminator, ILastFirstFinder>) Declaration protected LastFirstFinderTests(Func<RotatedTextWithTerminator, ILastFirstFinder> finderBuilder) Parameters Type Name Description Func < RotatedTextWithTerminator , ILastFirstFinder > finderBuilder Properties | Improve this Doc View Source FinderBuilder Declaration protected Func<RotatedTextWithTerminator, ILastFirstFinder> FinderBuilder { get; } Property Value Type Description Func < RotatedTextWithTerminator , ILastFirstFinder > Methods | Improve this Doc View Source FindIndexOfNthOccurrenceInBWTAndSortedBWT_IsCorrect(String, Char, Int32, Int32, Int32, Int32) Declaration public void FindIndexOfNthOccurrenceInBWTAndSortedBWT_IsCorrect(string bwtStr, char terminator, int indexOfCharInBWT, int occurrence, int expectedBWTResult, int expectedSortedBWTResult) Parameters Type Name Description System.String bwtStr System.Char terminator System.Int32 indexOfCharInBWT System.Int32 occurrence System.Int32 expectedBWTResult System.Int32 expectedSortedBWTResult | Improve this Doc View Source FindIndexOfNthOccurrenceInBWTAndSortedBWT_ThrowsExceptionOnInvalidInput(String, Char, Int32, Int32) Declaration public void FindIndexOfNthOccurrenceInBWTAndSortedBWT_ThrowsExceptionOnInvalidInput(string bwtStr, char terminator, int indexOfCharInBWT, int occurrence) Parameters Type Name Description System.String bwtStr System.Char terminator System.Int32 indexOfCharInBWT System.Int32 occurrence | Improve this Doc View Source FindOccurrenceOfCharInBWT_IsCorrect(String, Char, Int32, Int32) Declaration public void FindOccurrenceOfCharInBWT_IsCorrect(string bwtStr, char terminator, int indexOfCharInBWT, int expectedOccurrenceRank) Parameters Type Name Description System.String bwtStr System.Char terminator System.Int32 indexOfCharInBWT System.Int32 expectedOccurrenceRank | Improve this Doc View Source FindOccurrenceOfCharInSortedBWT_IsCorrect(String, Char, Int32, Int32) Declaration public void FindOccurrenceOfCharInSortedBWT_IsCorrect(string bwtStr, char terminator, int indexOfCharInSortedBWT, int expectedOccurrenceRank) Parameters Type Name Description System.String bwtStr System.Char terminator System.Int32 indexOfCharInSortedBWT System.Int32 expectedOccurrenceRank | Improve this Doc View Source FindOccurrenceOfCharInSortedBWTAndSortedBWT_ThrowsExceptionOnInvalidInput(String, Char, Int32) Declaration public void FindOccurrenceOfCharInSortedBWTAndSortedBWT_ThrowsExceptionOnInvalidInput(string bwtStr, char terminator, int indexOfChar) Parameters Type Name Description System.String bwtStr System.Char terminator System.Int32 indexOfChar | Improve this Doc View Source LastToFirst_IsCorrect(String, Char, Int32, Int32) Declaration public void LastToFirst_IsCorrect(string bwtStr, char terminator, int last, int expectedFirst) Parameters Type Name Description System.String bwtStr System.Char terminator System.Int32 last System.Int32 expectedFirst Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.Tests.BurrowsWheelerTransform.Builder.LastFirstFinders.NaiveFinderTests.html": {
    "href": "api/MoreStructures.Tests.BurrowsWheelerTransform.Builder.LastFirstFinders.NaiveFinderTests.html",
    "title": "Class NaiveFinderTests",
    "keywords": "Class NaiveFinderTests Inheritance System.Object LastFirstFinderTests NaiveFinderTests Inherited Members LastFirstFinderTests.FinderBuilder LastFirstFinderTests.FindIndexOfNthOccurrenceInBWTAndSortedBWT_IsCorrect(String, Char, Int32, Int32, Int32, Int32) LastFirstFinderTests.FindIndexOfNthOccurrenceInBWTAndSortedBWT_ThrowsExceptionOnInvalidInput(String, Char, Int32, Int32) LastFirstFinderTests.FindOccurrenceOfCharInBWT_IsCorrect(String, Char, Int32, Int32) LastFirstFinderTests.FindOccurrenceOfCharInSortedBWT_IsCorrect(String, Char, Int32, Int32) LastFirstFinderTests.FindOccurrenceOfCharInSortedBWTAndSortedBWT_ThrowsExceptionOnInvalidInput(String, Char, Int32) LastFirstFinderTests.LastToFirst_IsCorrect(String, Char, Int32, Int32) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.BurrowsWheelerTransform.Builder.LastFirstFinders Assembly : MoreStructures.Tests.dll Syntax public class NaiveFinderTests : LastFirstFinderTests Constructors | Improve this Doc View Source NaiveFinderTests() Declaration public NaiveFinderTests() Methods | Improve this Doc View Source Ctor_SetsBWTAndSortedBWT() Declaration public void Ctor_SetsBWTAndSortedBWT() Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.Tests.BurrowsWheelerTransform.Builder.LastFirstFinders.PrecomputedFinderTests.html": {
    "href": "api/MoreStructures.Tests.BurrowsWheelerTransform.Builder.LastFirstFinders.PrecomputedFinderTests.html",
    "title": "Class PrecomputedFinderTests",
    "keywords": "Class PrecomputedFinderTests Inheritance System.Object LastFirstFinderTests PrecomputedFinderTests Inherited Members LastFirstFinderTests.FinderBuilder LastFirstFinderTests.FindIndexOfNthOccurrenceInBWTAndSortedBWT_IsCorrect(String, Char, Int32, Int32, Int32, Int32) LastFirstFinderTests.FindIndexOfNthOccurrenceInBWTAndSortedBWT_ThrowsExceptionOnInvalidInput(String, Char, Int32, Int32) LastFirstFinderTests.FindOccurrenceOfCharInBWT_IsCorrect(String, Char, Int32, Int32) LastFirstFinderTests.FindOccurrenceOfCharInSortedBWT_IsCorrect(String, Char, Int32, Int32) LastFirstFinderTests.FindOccurrenceOfCharInSortedBWTAndSortedBWT_ThrowsExceptionOnInvalidInput(String, Char, Int32) LastFirstFinderTests.LastToFirst_IsCorrect(String, Char, Int32, Int32) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.BurrowsWheelerTransform.Builder.LastFirstFinders Assembly : MoreStructures.Tests.dll Syntax public class PrecomputedFinderTests : LastFirstFinderTests Constructors | Improve this Doc View Source PrecomputedFinderTests() Declaration public PrecomputedFinderTests() Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.Tests.BurrowsWheelerTransform.Builder.LastFirstPropertyBasedBuilderTests_WithBinarySearchFinder.html": {
    "href": "api/MoreStructures.Tests.BurrowsWheelerTransform.Builder.LastFirstPropertyBasedBuilderTests_WithBinarySearchFinder.html",
    "title": "Class LastFirstPropertyBasedBuilderTests_WithBinarySearchFinder",
    "keywords": "Class LastFirstPropertyBasedBuilderTests_WithBinarySearchFinder Inheritance System.Object BuilderTests LastFirstPropertyBasedBuilderTests_WithBinarySearchFinder Inherited Members BuilderTests.Builder BuilderTests.BuildMatrix_ReturnsAllRotationsOfText() BuilderTests.BuildMatrix_ReturnsRotationsSorted() BuilderTests.BuildMatrix_AllRotationsAreDifferent() BuilderTests.BuildMatrix_LastFirstProperty() BuilderTests.BuildMatrix_FromTransform_IsCorrect(BuilderTests.TestCase) BuilderTests.BuildTransform_WithText_IsCorrect(BuilderTests.TestCase) BuilderTests.BuildTransform_WithMatrix_IsCorrect(BuilderTests.TestCase) BuilderTests.InvertMatrix_IsCorrect(BuilderTests.TestCase) BuilderTests.InvertTransform_IsCorrect(BuilderTests.TestCase) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.BurrowsWheelerTransform.Builder Assembly : MoreStructures.Tests.dll Syntax public class LastFirstPropertyBasedBuilderTests_WithBinarySearchFinder : BuilderTests Constructors | Improve this Doc View Source LastFirstPropertyBasedBuilderTests_WithBinarySearchFinder() Declaration public LastFirstPropertyBasedBuilderTests_WithBinarySearchFinder() Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.Tests.BurrowsWheelerTransform.Builder.LastFirstPropertyBasedBuilderTests_WithNaiveFinder.html": {
    "href": "api/MoreStructures.Tests.BurrowsWheelerTransform.Builder.LastFirstPropertyBasedBuilderTests_WithNaiveFinder.html",
    "title": "Class LastFirstPropertyBasedBuilderTests_WithNaiveFinder",
    "keywords": "Class LastFirstPropertyBasedBuilderTests_WithNaiveFinder Inheritance System.Object BuilderTests LastFirstPropertyBasedBuilderTests_WithNaiveFinder Inherited Members BuilderTests.Builder BuilderTests.BuildMatrix_ReturnsAllRotationsOfText() BuilderTests.BuildMatrix_ReturnsRotationsSorted() BuilderTests.BuildMatrix_AllRotationsAreDifferent() BuilderTests.BuildMatrix_LastFirstProperty() BuilderTests.BuildMatrix_FromTransform_IsCorrect(BuilderTests.TestCase) BuilderTests.BuildTransform_WithText_IsCorrect(BuilderTests.TestCase) BuilderTests.BuildTransform_WithMatrix_IsCorrect(BuilderTests.TestCase) BuilderTests.InvertMatrix_IsCorrect(BuilderTests.TestCase) BuilderTests.InvertTransform_IsCorrect(BuilderTests.TestCase) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.BurrowsWheelerTransform.Builder Assembly : MoreStructures.Tests.dll Syntax public class LastFirstPropertyBasedBuilderTests_WithNaiveFinder : BuilderTests Constructors | Improve this Doc View Source LastFirstPropertyBasedBuilderTests_WithNaiveFinder() Declaration public LastFirstPropertyBasedBuilderTests_WithNaiveFinder() Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.Tests.BurrowsWheelerTransform.Builder.LastFirstPropertyBasedBuilderTests_WithPrecomputedFinder.html": {
    "href": "api/MoreStructures.Tests.BurrowsWheelerTransform.Builder.LastFirstPropertyBasedBuilderTests_WithPrecomputedFinder.html",
    "title": "Class LastFirstPropertyBasedBuilderTests_WithPrecomputedFinder",
    "keywords": "Class LastFirstPropertyBasedBuilderTests_WithPrecomputedFinder Inheritance System.Object BuilderTests LastFirstPropertyBasedBuilderTests_WithPrecomputedFinder Inherited Members BuilderTests.Builder BuilderTests.BuildMatrix_ReturnsAllRotationsOfText() BuilderTests.BuildMatrix_ReturnsRotationsSorted() BuilderTests.BuildMatrix_AllRotationsAreDifferent() BuilderTests.BuildMatrix_LastFirstProperty() BuilderTests.BuildMatrix_FromTransform_IsCorrect(BuilderTests.TestCase) BuilderTests.BuildTransform_WithText_IsCorrect(BuilderTests.TestCase) BuilderTests.BuildTransform_WithMatrix_IsCorrect(BuilderTests.TestCase) BuilderTests.InvertMatrix_IsCorrect(BuilderTests.TestCase) BuilderTests.InvertTransform_IsCorrect(BuilderTests.TestCase) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.BurrowsWheelerTransform.Builder Assembly : MoreStructures.Tests.dll Syntax public class LastFirstPropertyBasedBuilderTests_WithPrecomputedFinder : BuilderTests Constructors | Improve this Doc View Source LastFirstPropertyBasedBuilderTests_WithPrecomputedFinder() Declaration public LastFirstPropertyBasedBuilderTests_WithPrecomputedFinder() Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.Tests.BurrowsWheelerTransform.Builder.NaiveBuilderTests.html": {
    "href": "api/MoreStructures.Tests.BurrowsWheelerTransform.Builder.NaiveBuilderTests.html",
    "title": "Class NaiveBuilderTests",
    "keywords": "Class NaiveBuilderTests Inheritance System.Object BuilderTests NaiveBuilderTests Inherited Members BuilderTests.Builder BuilderTests.BuildMatrix_ReturnsAllRotationsOfText() BuilderTests.BuildMatrix_ReturnsRotationsSorted() BuilderTests.BuildMatrix_AllRotationsAreDifferent() BuilderTests.BuildMatrix_LastFirstProperty() BuilderTests.BuildMatrix_FromTransform_IsCorrect(BuilderTests.TestCase) BuilderTests.BuildTransform_WithText_IsCorrect(BuilderTests.TestCase) BuilderTests.BuildTransform_WithMatrix_IsCorrect(BuilderTests.TestCase) BuilderTests.InvertMatrix_IsCorrect(BuilderTests.TestCase) BuilderTests.InvertTransform_IsCorrect(BuilderTests.TestCase) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.BurrowsWheelerTransform.Builder Assembly : MoreStructures.Tests.dll Syntax public class NaiveBuilderTests : BuilderTests Constructors | Improve this Doc View Source NaiveBuilderTests() Declaration public NaiveBuilderTests() Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.Tests.BurrowsWheelerTransform.BWMatrixTests.html": {
    "href": "api/MoreStructures.Tests.BurrowsWheelerTransform.BWMatrixTests.html",
    "title": "Class BWMatrixTests",
    "keywords": "Class BWMatrixTests Inheritance System.Object BWMatrixTests Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.BurrowsWheelerTransform Assembly : MoreStructures.Tests.dll Syntax public class BWMatrixTests Methods | Improve this Doc View Source Content_ReturnsAnImmutableCollection() Declaration public void Content_ReturnsAnImmutableCollection() | Improve this Doc View Source Ctor_AssignsContentSpecified() Declaration public void Ctor_AssignsContentSpecified() | Improve this Doc View Source Equals_ByValue() Declaration public void Equals_ByValue() | Improve this Doc View Source FirstColumn_IsATextPermutation() Declaration public void FirstColumn_IsATextPermutation() | Improve this Doc View Source FirstColumnAndLastColumn_AreConsistent() Declaration public void FirstColumnAndLastColumn_AreConsistent() | Improve this Doc View Source GetHashCode_ByValue() Declaration public void GetHashCode_ByValue() | Improve this Doc View Source LastColumn_IsATextPermutation() Declaration public void LastColumn_IsATextPermutation() | Improve this Doc View Source Transform_HasSameLengthAsTextPlusTerminator() Declaration public void Transform_HasSameLengthAsTextPlusTerminator() | Improve this Doc View Source Transform_IsCorrect() Declaration public void Transform_IsCorrect() Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.Tests.BurrowsWheelerTransform.BWTransformTests.html": {
    "href": "api/MoreStructures.Tests.BurrowsWheelerTransform.BWTransformTests.html",
    "title": "Class BWTransformTests",
    "keywords": "Class BWTransformTests Inheritance System.Object BWTransformTests Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.BurrowsWheelerTransform Assembly : MoreStructures.Tests.dll Syntax public class BWTransformTests Methods | Improve this Doc View Source Length_IsTheSameOfLengthOfText() Declaration public void Length_IsTheSameOfLengthOfText() | Improve this Doc View Source Quicksort_IndexesMappingIsCorrect() Declaration public void Quicksort_IndexesMappingIsCorrect() | Improve this Doc View Source Quicksort_WithCustomComparer() Declaration public void Quicksort_WithCustomComparer() | Improve this Doc View Source Quicksort_WithDefaultComparer() Declaration public void Quicksort_WithDefaultComparer() Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.Tests.BurrowsWheelerTransform.html": {
    "href": "api/MoreStructures.Tests.BurrowsWheelerTransform.html",
    "title": "Namespace MoreStructures.Tests.BurrowsWheelerTransform",
    "keywords": "Namespace MoreStructures.Tests.BurrowsWheelerTransform Classes BWMatrixTests BWTransformTests"
  },
  "api/MoreStructures.Tests.BurrowsWheelerTransform.Matching.CountBasedNarrowingIntervalMatcherTests.html": {
    "href": "api/MoreStructures.Tests.BurrowsWheelerTransform.Matching.CountBasedNarrowingIntervalMatcherTests.html",
    "title": "Class CountBasedNarrowingIntervalMatcherTests",
    "keywords": "Class CountBasedNarrowingIntervalMatcherTests Inheritance System.Object MatcherTests CountBasedNarrowingIntervalMatcherTests Inherited Members MatcherTests.Ctor_RaisesExceptionWithIncosistentBWTAndSortedBWT() MatcherTests.Match_IsCorrect(String, String, Boolean, Int32, Int32, Int32) MatcherTests.Match_RaisesExceptionWithEmptyPattern() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.BurrowsWheelerTransform.Matching Assembly : MoreStructures.Tests.dll Syntax public class CountBasedNarrowingIntervalMatcherTests : MatcherTests Constructors | Improve this Doc View Source CountBasedNarrowingIntervalMatcherTests() Declaration public CountBasedNarrowingIntervalMatcherTests() Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.Tests.BurrowsWheelerTransform.Matching.html": {
    "href": "api/MoreStructures.Tests.BurrowsWheelerTransform.Matching.html",
    "title": "Namespace MoreStructures.Tests.BurrowsWheelerTransform.Matching",
    "keywords": "Namespace MoreStructures.Tests.BurrowsWheelerTransform.Matching Classes CountBasedNarrowingIntervalMatcherTests MatcherTests NarrowingIntervalMatcherTests"
  },
  "api/MoreStructures.Tests.BurrowsWheelerTransform.Matching.MatcherTests.html": {
    "href": "api/MoreStructures.Tests.BurrowsWheelerTransform.Matching.MatcherTests.html",
    "title": "Class MatcherTests",
    "keywords": "Class MatcherTests Inheritance System.Object MatcherTests CountBasedNarrowingIntervalMatcherTests NarrowingIntervalMatcherTests Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.BurrowsWheelerTransform.Matching Assembly : MoreStructures.Tests.dll Syntax public abstract class MatcherTests Constructors | Improve this Doc View Source MatcherTests(Func<RotatedTextWithTerminator, IMatcher>, Func<RotatedTextWithTerminator, RotatedTextWithTerminator, IMatcher>) Declaration protected MatcherTests(Func<RotatedTextWithTerminator, IMatcher> matcherBuilderWithBWTOnly, Func<RotatedTextWithTerminator, RotatedTextWithTerminator, IMatcher> matcherBuilderWithSortedBWT) Parameters Type Name Description Func < RotatedTextWithTerminator , IMatcher > matcherBuilderWithBWTOnly Func < RotatedTextWithTerminator , RotatedTextWithTerminator , IMatcher > matcherBuilderWithSortedBWT Methods | Improve this Doc View Source Ctor_RaisesExceptionWithIncosistentBWTAndSortedBWT() Declaration public void Ctor_RaisesExceptionWithIncosistentBWTAndSortedBWT() | Improve this Doc View Source Match_IsCorrect(String, String, Boolean, Int32, Int32, Int32) Declaration public void Match_IsCorrect(string textContent, string patternContent, bool expectedSuccess, int expectedMatchedChars, int expectedStart, int expectedEnd) Parameters Type Name Description System.String textContent System.String patternContent System.Boolean expectedSuccess System.Int32 expectedMatchedChars System.Int32 expectedStart System.Int32 expectedEnd | Improve this Doc View Source Match_RaisesExceptionWithEmptyPattern() Declaration public void Match_RaisesExceptionWithEmptyPattern() Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.Tests.BurrowsWheelerTransform.Matching.NarrowingIntervalMatcherTests.html": {
    "href": "api/MoreStructures.Tests.BurrowsWheelerTransform.Matching.NarrowingIntervalMatcherTests.html",
    "title": "Class NarrowingIntervalMatcherTests",
    "keywords": "Class NarrowingIntervalMatcherTests Inheritance System.Object MatcherTests NarrowingIntervalMatcherTests Inherited Members MatcherTests.Ctor_RaisesExceptionWithIncosistentBWTAndSortedBWT() MatcherTests.Match_IsCorrect(String, String, Boolean, Int32, Int32, Int32) MatcherTests.Match_RaisesExceptionWithEmptyPattern() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.BurrowsWheelerTransform.Matching Assembly : MoreStructures.Tests.dll Syntax public class NarrowingIntervalMatcherTests : MatcherTests Constructors | Improve this Doc View Source NarrowingIntervalMatcherTests() Declaration public NarrowingIntervalMatcherTests() Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.Tests.CountTrees.CountTreeEdgeTests.html": {
    "href": "api/MoreStructures.Tests.CountTrees.CountTreeEdgeTests.html",
    "title": "Class CountTreeEdgeTests",
    "keywords": "Class CountTreeEdgeTests Inheritance System.Object CountTreeEdgeTests Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.CountTrees Assembly : MoreStructures.Tests.dll Syntax public class CountTreeEdgeTests Methods | Improve this Doc View Source Equals_BasedOnWrappedEdge() Declaration public void Equals_BasedOnWrappedEdge() | Improve this Doc View Source WrappedEdge_IsPreserved() Declaration public void WrappedEdge_IsPreserved() Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.Tests.CountTrees.CountTreeNodeTests.html": {
    "href": "api/MoreStructures.Tests.CountTrees.CountTreeNodeTests.html",
    "title": "Class CountTreeNodeTests",
    "keywords": "Class CountTreeNodeTests Inheritance System.Object CountTreeNodeTests Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.CountTrees Assembly : MoreStructures.Tests.dll Syntax public class CountTreeNodeTests Methods | Improve this Doc View Source Children_PreservedWrappedStructure() Declaration public void Children_PreservedWrappedStructure() | Improve this Doc View Source DescendantsCount_DoesntStackOverflowWithDeepStructures() Declaration public void DescendantsCount_DoesntStackOverflowWithDeepStructures() | Improve this Doc View Source DescendantsCount_GivesConsistentResults() Declaration public void DescendantsCount_GivesConsistentResults() | Improve this Doc View Source DescendantsCount_OfLeafIsZero() Declaration public void DescendantsCount_OfLeafIsZero() | Improve this Doc View Source DescendantsCount_OfSingletonIsOne() Declaration public void DescendantsCount_OfSingletonIsOne() | Improve this Doc View Source DescendantsCount_OfThreeWithNNodesIsN() Declaration public void DescendantsCount_OfThreeWithNNodesIsN() | Improve this Doc View Source Equals_BasedOnWrappedNode() Declaration public void Equals_BasedOnWrappedNode() | Improve this Doc View Source WrappedNode_IsPreserved() Declaration public void WrappedNode_IsPreserved() Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.Tests.CountTrees.html": {
    "href": "api/MoreStructures.Tests.CountTrees.html",
    "title": "Namespace MoreStructures.Tests.CountTrees",
    "keywords": "Namespace MoreStructures.Tests.CountTrees Classes CountTreeEdgeTests CountTreeNodeTests"
  },
  "api/MoreStructures.Tests.html": {
    "href": "api/MoreStructures.Tests.html",
    "title": "Namespace MoreStructures.Tests",
    "keywords": "Namespace MoreStructures.Tests Classes RotatedTextWithTerminatorTests StringIncludingTerminatorComparerTests TextWithTerminatorExtensionsTests TextWithTerminatorTests VirtuallyRotatedTextWithTerminatorTests"
  },
  "api/MoreStructures.Tests.Lists.Counting.DictionaryBasedOccurrencesCounterTests.html": {
    "href": "api/MoreStructures.Tests.Lists.Counting.DictionaryBasedOccurrencesCounterTests.html",
    "title": "Class DictionaryBasedOccurrencesCounterTests",
    "keywords": "Class DictionaryBasedOccurrencesCounterTests Inheritance System.Object OccurrencesCounterTests DictionaryBasedOccurrencesCounterTests Inherited Members OccurrencesCounterTests.Counter OccurrencesCounterTests.Count_IsCorrect(OccurrencesCounterTests.TestCaseId) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.Lists.Counting Assembly : MoreStructures.Tests.dll Syntax public class DictionaryBasedOccurrencesCounterTests : OccurrencesCounterTests Constructors | Improve this Doc View Source DictionaryBasedOccurrencesCounterTests() Declaration public DictionaryBasedOccurrencesCounterTests() Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.Tests.Lists.Counting.html": {
    "href": "api/MoreStructures.Tests.Lists.Counting.html",
    "title": "Namespace MoreStructures.Tests.Lists.Counting",
    "keywords": "Namespace MoreStructures.Tests.Lists.Counting Classes DictionaryBasedOccurrencesCounterTests OccurrencesCounterTests Enums OccurrencesCounterTests.TestCaseId"
  },
  "api/MoreStructures.Tests.Lists.Counting.OccurrencesCounterTests.html": {
    "href": "api/MoreStructures.Tests.Lists.Counting.OccurrencesCounterTests.html",
    "title": "Class OccurrencesCounterTests",
    "keywords": "Class OccurrencesCounterTests Inheritance System.Object OccurrencesCounterTests DictionaryBasedOccurrencesCounterTests Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.Lists.Counting Assembly : MoreStructures.Tests.dll Syntax public abstract class OccurrencesCounterTests Constructors | Improve this Doc View Source OccurrencesCounterTests(IOccurrencesCounter) Declaration protected OccurrencesCounterTests(IOccurrencesCounter counter) Parameters Type Name Description IOccurrencesCounter counter Properties | Improve this Doc View Source Counter Declaration protected IOccurrencesCounter Counter { get; } Property Value Type Description IOccurrencesCounter Methods | Improve this Doc View Source Count_IsCorrect(OccurrencesCounterTests.TestCaseId) Declaration public void Count_IsCorrect(OccurrencesCounterTests.TestCaseId testCaseId) Parameters Type Name Description OccurrencesCounterTests.TestCaseId testCaseId Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.Tests.Lists.Counting.OccurrencesCounterTests.TestCaseId.html": {
    "href": "api/MoreStructures.Tests.Lists.Counting.OccurrencesCounterTests.TestCaseId.html",
    "title": "Enum OccurrencesCounterTests.TestCaseId",
    "keywords": "Enum OccurrencesCounterTests.TestCaseId Namespace : MoreStructures.Tests.Lists.Counting Assembly : MoreStructures.Tests.dll Syntax public enum TestCaseId Fields Name Description EmptyArray EmptyEnumerable MultipleRepetedElements SingletonArray SingletonList ThreeElementsWithOneRepetitions ThreeElementsWithoutRepetitions ThreeElementsWithTwoRepetitions Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, OccurrencesCounterTests.TestCaseId>(TextWithTerminator)"
  },
  "api/MoreStructures.Tests.Lists.Searching.BinarySearchTests.html": {
    "href": "api/MoreStructures.Tests.Lists.Searching.BinarySearchTests.html",
    "title": "Class BinarySearchTests",
    "keywords": "Class BinarySearchTests Inheritance System.Object SearchTests BinarySearchTests Inherited Members SearchTests.Search SearchTests.SearchMethods_OnListOfIntegers(SearchTests.TestCaseId) SearchTests.SearchMethods_OnCharArray(SearchTests.TestCaseId) SearchTests.SearchMethods_OnString(SearchTests.TestCaseId) SearchTests.SearchMethods_ItemtNotFound(Int32) SearchTests.SearchMethods_ItemNotFound_OnStrings() SearchTests.SearchMethods_OnEmptyEnumerable() SearchTests.SearchMethods_FromIndexAndToIndexNull() SearchTests.Nth_RaisesExceptionOnInvalidOccurrenceRank() SearchTests.FirstAll_OnCustomIntervals() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.Lists.Searching Assembly : MoreStructures.Tests.dll Syntax public class BinarySearchTests : SearchTests Constructors | Improve this Doc View Source BinarySearchTests() Declaration public BinarySearchTests() Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.Tests.Lists.Searching.html": {
    "href": "api/MoreStructures.Tests.Lists.Searching.html",
    "title": "Namespace MoreStructures.Tests.Lists.Searching",
    "keywords": "Namespace MoreStructures.Tests.Lists.Searching Classes BinarySearchTests LinearSearchTests SearchTests Enums SearchTests.TestCaseId"
  },
  "api/MoreStructures.Tests.Lists.Searching.LinearSearchTests.html": {
    "href": "api/MoreStructures.Tests.Lists.Searching.LinearSearchTests.html",
    "title": "Class LinearSearchTests",
    "keywords": "Class LinearSearchTests Inheritance System.Object SearchTests LinearSearchTests Inherited Members SearchTests.Search SearchTests.SearchMethods_OnListOfIntegers(SearchTests.TestCaseId) SearchTests.SearchMethods_OnCharArray(SearchTests.TestCaseId) SearchTests.SearchMethods_OnString(SearchTests.TestCaseId) SearchTests.SearchMethods_ItemtNotFound(Int32) SearchTests.SearchMethods_ItemNotFound_OnStrings() SearchTests.SearchMethods_OnEmptyEnumerable() SearchTests.SearchMethods_FromIndexAndToIndexNull() SearchTests.Nth_RaisesExceptionOnInvalidOccurrenceRank() SearchTests.FirstAll_OnCustomIntervals() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.Lists.Searching Assembly : MoreStructures.Tests.dll Syntax public class LinearSearchTests : SearchTests Constructors | Improve this Doc View Source LinearSearchTests() Declaration public LinearSearchTests() Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.Tests.Lists.Searching.SearchTests.html": {
    "href": "api/MoreStructures.Tests.Lists.Searching.SearchTests.html",
    "title": "Class SearchTests",
    "keywords": "Class SearchTests Inheritance System.Object SearchTests BinarySearchTests LinearSearchTests Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.Lists.Searching Assembly : MoreStructures.Tests.dll Syntax public abstract class SearchTests Constructors | Improve this Doc View Source SearchTests(ISearch) Declaration protected SearchTests(ISearch search) Parameters Type Name Description ISearch search Properties | Improve this Doc View Source Search Declaration protected ISearch Search { get; } Property Value Type Description ISearch Methods | Improve this Doc View Source FirstAll_OnCustomIntervals() Declaration public void FirstAll_OnCustomIntervals() | Improve this Doc View Source Nth_RaisesExceptionOnInvalidOccurrenceRank() Declaration public void Nth_RaisesExceptionOnInvalidOccurrenceRank() | Improve this Doc View Source SearchMethods_FromIndexAndToIndexNull() Declaration public void SearchMethods_FromIndexAndToIndexNull() | Improve this Doc View Source SearchMethods_ItemNotFound_OnStrings() Declaration public void SearchMethods_ItemNotFound_OnStrings() | Improve this Doc View Source SearchMethods_ItemtNotFound(Int32) Declaration public void SearchMethods_ItemtNotFound(int length) Parameters Type Name Description System.Int32 length | Improve this Doc View Source SearchMethods_OnCharArray(SearchTests.TestCaseId) Declaration public void SearchMethods_OnCharArray(SearchTests.TestCaseId testCaseId) Parameters Type Name Description SearchTests.TestCaseId testCaseId | Improve this Doc View Source SearchMethods_OnEmptyEnumerable() Declaration public void SearchMethods_OnEmptyEnumerable() | Improve this Doc View Source SearchMethods_OnListOfIntegers(SearchTests.TestCaseId) Declaration public void SearchMethods_OnListOfIntegers(SearchTests.TestCaseId testCaseId) Parameters Type Name Description SearchTests.TestCaseId testCaseId | Improve this Doc View Source SearchMethods_OnString(SearchTests.TestCaseId) Declaration public void SearchMethods_OnString(SearchTests.TestCaseId testCaseId) Parameters Type Name Description SearchTests.TestCaseId testCaseId Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.Tests.Lists.Searching.SearchTests.TestCaseId.html": {
    "href": "api/MoreStructures.Tests.Lists.Searching.SearchTests.TestCaseId.html",
    "title": "Enum SearchTests.TestCaseId",
    "keywords": "Enum SearchTests.TestCaseId Namespace : MoreStructures.Tests.Lists.Searching Assembly : MoreStructures.Tests.dll Syntax public enum TestCaseId Fields Name Description ArrayOfChars1 ListOfIntegers1 ListOfIntegers2 String1 String2 Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, SearchTests.TestCaseId>(TextWithTerminator)"
  },
  "api/MoreStructures.Tests.RecImmTrees.Conversions.FullyIterativeStringifierTests.html": {
    "href": "api/MoreStructures.Tests.RecImmTrees.Conversions.FullyIterativeStringifierTests.html",
    "title": "Class FullyIterativeStringifierTests",
    "keywords": "Class FullyIterativeStringifierTests Inheritance System.Object StringifierTests FullyIterativeStringifierTests Inherited Members StringifierTests.Stringifier StringifierTests.NL StringifierTests.I StringifierTests.DefaultNewLine StringifierTests.DefaultIndent StringifierTests.DefaultPathSeparator StringifierTests.DefaultRootStringifier StringifierTests.DefaultEdgeAndNodeStringifier StringifierTests.Stringify_OfLeaf() StringifierTests.Stringify_OfTwoLevelsTree() StringifierTests.Stringify_OfThreeLevelsTree() StringifierTests.Stringify_OfFourLevelsTree() StringifierTests.Stringify_OfEmptyPath() StringifierTests.Stringify_OfSingletonPath() StringifierTests.Stringify_OfMultistepPath() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.RecImmTrees.Conversions Assembly : MoreStructures.Tests.dll Syntax public class FullyIterativeStringifierTests : StringifierTests Constructors | Improve this Doc View Source FullyIterativeStringifierTests() Declaration public FullyIterativeStringifierTests() Methods | Improve this Doc View Source PrependLevelAfterStopIndenting_RendersLevelWhenStopIndentingLevelIsReached() Declaration public void PrependLevelAfterStopIndenting_RendersLevelWhenStopIndentingLevelIsReached() | Improve this Doc View Source StopIndentingLevel_StopsIndentingWhenReached_WithOne() Declaration public void StopIndentingLevel_StopsIndentingWhenReached_WithOne() | Improve this Doc View Source StopIndentingLevel_StopsIndentingWhenReached_WithTwo() Declaration public void StopIndentingLevel_StopsIndentingWhenReached_WithTwo() | Improve this Doc View Source StopIndentingLevel_StopsIndentingWhenReached_WithZero() Declaration public void StopIndentingLevel_StopsIndentingWhenReached_WithZero() | Improve this Doc View Source Stringify_DoesntStackOverflowWithDeepStructures() Declaration public void Stringify_DoesntStackOverflowWithDeepStructures() Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.Tests.RecImmTrees.Conversions.FullyRecursiveStringifierTests.html": {
    "href": "api/MoreStructures.Tests.RecImmTrees.Conversions.FullyRecursiveStringifierTests.html",
    "title": "Class FullyRecursiveStringifierTests",
    "keywords": "Class FullyRecursiveStringifierTests Inheritance System.Object StringifierTests StringifierBaseTests FullyRecursiveStringifierTests Inherited Members StringifierBaseTests.CustomNewLine_IsReflectedIntoOutput() StringifierBaseTests.CustomIndent_IsReflectedIntoOutput() StringifierTests.Stringifier StringifierTests.NL StringifierTests.I StringifierTests.DefaultNewLine StringifierTests.DefaultIndent StringifierTests.DefaultPathSeparator StringifierTests.DefaultRootStringifier StringifierTests.DefaultEdgeAndNodeStringifier StringifierTests.Stringify_OfLeaf() StringifierTests.Stringify_OfTwoLevelsTree() StringifierTests.Stringify_OfThreeLevelsTree() StringifierTests.Stringify_OfFourLevelsTree() StringifierTests.Stringify_OfEmptyPath() StringifierTests.Stringify_OfSingletonPath() StringifierTests.Stringify_OfMultistepPath() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.RecImmTrees.Conversions Assembly : MoreStructures.Tests.dll Syntax public class FullyRecursiveStringifierTests : StringifierBaseTests Constructors | Improve this Doc View Source FullyRecursiveStringifierTests() Declaration public FullyRecursiveStringifierTests() Methods | Improve this Doc View Source Stringify_DoesntStackOverflowWithNotSoDeepStructures() Declaration public void Stringify_DoesntStackOverflowWithNotSoDeepStructures() Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.Tests.RecImmTrees.Conversions.html": {
    "href": "api/MoreStructures.Tests.RecImmTrees.Conversions.html",
    "title": "Namespace MoreStructures.Tests.RecImmTrees.Conversions",
    "keywords": "Namespace MoreStructures.Tests.RecImmTrees.Conversions Classes FullyIterativeStringifierTests FullyRecursiveStringifierTests StringifierBaseTests StringifierTests"
  },
  "api/MoreStructures.Tests.RecImmTrees.Conversions.StringifierBaseTests.html": {
    "href": "api/MoreStructures.Tests.RecImmTrees.Conversions.StringifierBaseTests.html",
    "title": "Class StringifierBaseTests",
    "keywords": "Class StringifierBaseTests Inheritance System.Object StringifierTests StringifierBaseTests FullyRecursiveStringifierTests Inherited Members StringifierTests.Stringifier StringifierTests.NL StringifierTests.I StringifierTests.DefaultNewLine StringifierTests.DefaultIndent StringifierTests.DefaultPathSeparator StringifierTests.DefaultRootStringifier StringifierTests.DefaultEdgeAndNodeStringifier StringifierTests.Stringify_OfLeaf() StringifierTests.Stringify_OfTwoLevelsTree() StringifierTests.Stringify_OfThreeLevelsTree() StringifierTests.Stringify_OfFourLevelsTree() StringifierTests.Stringify_OfEmptyPath() StringifierTests.Stringify_OfSingletonPath() StringifierTests.Stringify_OfMultistepPath() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.RecImmTrees.Conversions Assembly : MoreStructures.Tests.dll Syntax public abstract class StringifierBaseTests : StringifierTests Constructors | Improve this Doc View Source StringifierBaseTests(IStringifier<TreeMock.Edge, TreeMock.Node>) Declaration public StringifierBaseTests(IStringifier<TreeMock.Edge, TreeMock.Node> stringifier) Parameters Type Name Description IStringifier < TreeMock.Edge , TreeMock.Node > stringifier Methods | Improve this Doc View Source CustomIndent_IsReflectedIntoOutput() Declaration public void CustomIndent_IsReflectedIntoOutput() | Improve this Doc View Source CustomNewLine_IsReflectedIntoOutput() Declaration public void CustomNewLine_IsReflectedIntoOutput() Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.Tests.RecImmTrees.Conversions.StringifierTests.html": {
    "href": "api/MoreStructures.Tests.RecImmTrees.Conversions.StringifierTests.html",
    "title": "Class StringifierTests",
    "keywords": "Class StringifierTests Inheritance System.Object StringifierTests FullyIterativeStringifierTests StringifierBaseTests Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.RecImmTrees.Conversions Assembly : MoreStructures.Tests.dll Syntax public abstract class StringifierTests Constructors | Improve this Doc View Source StringifierTests(IStringifier<TreeMock.Edge, TreeMock.Node>) Declaration public StringifierTests(IStringifier<TreeMock.Edge, TreeMock.Node> stringifier) Parameters Type Name Description IStringifier < TreeMock.Edge , TreeMock.Node > stringifier Fields | Improve this Doc View Source DefaultEdgeAndNodeStringifier Declaration protected static readonly Func<TreeMock.Edge, TreeMock.Node, string> DefaultEdgeAndNodeStringifier Field Value Type Description Func < TreeMock.Edge , TreeMock.Node , System.String > | Improve this Doc View Source DefaultIndent Declaration protected static readonly string DefaultIndent Field Value Type Description System.String | Improve this Doc View Source DefaultNewLine Declaration protected static readonly string DefaultNewLine Field Value Type Description System.String | Improve this Doc View Source DefaultPathSeparator Declaration protected static readonly string DefaultPathSeparator Field Value Type Description System.String | Improve this Doc View Source DefaultRootStringifier Declaration protected static readonly Func<TreeMock.Node, string> DefaultRootStringifier Field Value Type Description Func < TreeMock.Node , System.String > Properties | Improve this Doc View Source I Declaration protected string I { get; } Property Value Type Description System.String | Improve this Doc View Source NL Declaration protected string NL { get; } Property Value Type Description System.String | Improve this Doc View Source Stringifier Declaration protected IStringifier<TreeMock.Edge, TreeMock.Node> Stringifier { get; set; } Property Value Type Description IStringifier < TreeMock.Edge , TreeMock.Node > Methods | Improve this Doc View Source Stringify_OfEmptyPath() Declaration public void Stringify_OfEmptyPath() | Improve this Doc View Source Stringify_OfFourLevelsTree() Declaration public void Stringify_OfFourLevelsTree() | Improve this Doc View Source Stringify_OfLeaf() Declaration public void Stringify_OfLeaf() | Improve this Doc View Source Stringify_OfMultistepPath() Declaration public void Stringify_OfMultistepPath() | Improve this Doc View Source Stringify_OfSingletonPath() Declaration public void Stringify_OfSingletonPath() | Improve this Doc View Source Stringify_OfThreeLevelsTree() Declaration public void Stringify_OfThreeLevelsTree() | Improve this Doc View Source Stringify_OfTwoLevelsTree() Declaration public void Stringify_OfTwoLevelsTree() Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.Tests.RecImmTrees.html": {
    "href": "api/MoreStructures.Tests.RecImmTrees.html",
    "title": "Namespace MoreStructures.Tests.RecImmTrees",
    "keywords": "Namespace MoreStructures.Tests.RecImmTrees Classes RecImmDictIndexedTreeNodeExtensionsTests TreeMock TreeMock.Edge TreeMock.Node TreePathExtensionsTests TreePathTests"
  },
  "api/MoreStructures.Tests.RecImmTrees.Paths.FullyIterativeNodeToLeafPathsBuilderTests.html": {
    "href": "api/MoreStructures.Tests.RecImmTrees.Paths.FullyIterativeNodeToLeafPathsBuilderTests.html",
    "title": "Class FullyIterativeNodeToLeafPathsBuilderTests",
    "keywords": "Class FullyIterativeNodeToLeafPathsBuilderTests Inheritance System.Object NodeToLeafPathsBuilderTests FullyIterativeNodeToLeafPathsBuilderTests Inherited Members NodeToLeafPathsBuilderTests.Builder NodeToLeafPathsBuilderTests.GetAllNodeToLeafPaths__DocExample() NodeToLeafPathsBuilderTests.GetAllNodeToLeafPaths_IsCorrectWithTries() NodeToLeafPathsBuilderTests.GetAllNodeToLeafPaths_IsCorrectWithTrees() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.RecImmTrees.Paths Assembly : MoreStructures.Tests.dll Syntax public class FullyIterativeNodeToLeafPathsBuilderTests : NodeToLeafPathsBuilderTests Constructors | Improve this Doc View Source FullyIterativeNodeToLeafPathsBuilderTests() Declaration public FullyIterativeNodeToLeafPathsBuilderTests() Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.Tests.RecImmTrees.Paths.FullyRecursiveNodeToLeafPathsBuilderTests.html": {
    "href": "api/MoreStructures.Tests.RecImmTrees.Paths.FullyRecursiveNodeToLeafPathsBuilderTests.html",
    "title": "Class FullyRecursiveNodeToLeafPathsBuilderTests",
    "keywords": "Class FullyRecursiveNodeToLeafPathsBuilderTests Inheritance System.Object NodeToLeafPathsBuilderTests FullyRecursiveNodeToLeafPathsBuilderTests Inherited Members NodeToLeafPathsBuilderTests.Builder NodeToLeafPathsBuilderTests.GetAllNodeToLeafPaths__DocExample() NodeToLeafPathsBuilderTests.GetAllNodeToLeafPaths_IsCorrectWithTries() NodeToLeafPathsBuilderTests.GetAllNodeToLeafPaths_IsCorrectWithTrees() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.RecImmTrees.Paths Assembly : MoreStructures.Tests.dll Syntax public class FullyRecursiveNodeToLeafPathsBuilderTests : NodeToLeafPathsBuilderTests Constructors | Improve this Doc View Source FullyRecursiveNodeToLeafPathsBuilderTests() Declaration public FullyRecursiveNodeToLeafPathsBuilderTests() Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.Tests.RecImmTrees.Paths.html": {
    "href": "api/MoreStructures.Tests.RecImmTrees.Paths.html",
    "title": "Namespace MoreStructures.Tests.RecImmTrees.Paths",
    "keywords": "Namespace MoreStructures.Tests.RecImmTrees.Paths Classes FullyIterativeNodeToLeafPathsBuilderTests FullyRecursiveNodeToLeafPathsBuilderTests NodeToLeafPathsBuilderTests"
  },
  "api/MoreStructures.Tests.RecImmTrees.Paths.NodeToLeafPathsBuilderTests.html": {
    "href": "api/MoreStructures.Tests.RecImmTrees.Paths.NodeToLeafPathsBuilderTests.html",
    "title": "Class NodeToLeafPathsBuilderTests",
    "keywords": "Class NodeToLeafPathsBuilderTests Inheritance System.Object NodeToLeafPathsBuilderTests FullyIterativeNodeToLeafPathsBuilderTests FullyRecursiveNodeToLeafPathsBuilderTests Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.RecImmTrees.Paths Assembly : MoreStructures.Tests.dll Syntax public abstract class NodeToLeafPathsBuilderTests Constructors | Improve this Doc View Source NodeToLeafPathsBuilderTests(INodeToLeafPathsBuilder) Declaration protected NodeToLeafPathsBuilderTests(INodeToLeafPathsBuilder builder) Parameters Type Name Description INodeToLeafPathsBuilder builder Properties | Improve this Doc View Source Builder Declaration protected INodeToLeafPathsBuilder Builder { get; } Property Value Type Description INodeToLeafPathsBuilder Methods | Improve this Doc View Source GetAllNodeToLeafPaths__DocExample() Declaration public void GetAllNodeToLeafPaths__DocExample() | Improve this Doc View Source GetAllNodeToLeafPaths_IsCorrectWithTrees() Declaration public void GetAllNodeToLeafPaths_IsCorrectWithTrees() | Improve this Doc View Source GetAllNodeToLeafPaths_IsCorrectWithTries() Declaration public void GetAllNodeToLeafPaths_IsCorrectWithTries() Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.Tests.RecImmTrees.RecImmDictIndexedTreeNodeExtensionsTests.html": {
    "href": "api/MoreStructures.Tests.RecImmTrees.RecImmDictIndexedTreeNodeExtensionsTests.html",
    "title": "Class RecImmDictIndexedTreeNodeExtensionsTests",
    "keywords": "Class RecImmDictIndexedTreeNodeExtensionsTests Inheritance System.Object RecImmDictIndexedTreeNodeExtensionsTests Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.RecImmTrees Assembly : MoreStructures.Tests.dll Syntax public class RecImmDictIndexedTreeNodeExtensionsTests Methods | Improve this Doc View Source IsLeaf_IsCorrectForSuffixTree() Declaration public void IsLeaf_IsCorrectForSuffixTree() | Improve this Doc View Source IsLeaf_IsCorrectForSuffixTrie() Declaration public void IsLeaf_IsCorrectForSuffixTrie() Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.Tests.RecImmTrees.TreeMock.Edge.html": {
    "href": "api/MoreStructures.Tests.RecImmTrees.TreeMock.Edge.html",
    "title": "Class TreeMock.Edge",
    "keywords": "Class TreeMock.Edge Inheritance System.Object TreeMock.Edge Implements IRecImmDictIndexedTreeEdge < TreeMock.Edge , TreeMock.Node > IComparable < TreeMock.Edge > System.IEquatable < TreeMock.Edge > Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : MoreStructures.Tests.RecImmTrees Assembly : MoreStructures.Tests.dll Syntax public class Edge : IRecImmDictIndexedTreeEdge<TreeMock.Edge, TreeMock.Node>, IEquatable<TreeMock.Edge> Constructors | Improve this Doc View Source Edge(Int32) Declaration public Edge(int Id) Parameters Type Name Description System.Int32 Id Properties | Improve this Doc View Source Id Declaration public int Id { get; set; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source CompareTo(TreeMock.Edge) Declaration public int CompareTo(TreeMock.Edge other) Parameters Type Name Description TreeMock.Edge other Returns Type Description System.Int32 | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Implements IRecImmDictIndexedTreeEdge<TEdge, TNode> IComparable<> System.IEquatable<T> Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.Tests.RecImmTrees.TreeMock.html": {
    "href": "api/MoreStructures.Tests.RecImmTrees.TreeMock.html",
    "title": "Class TreeMock",
    "keywords": "Class TreeMock Inheritance System.Object TreeMock Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.RecImmTrees Assembly : MoreStructures.Tests.dll Syntax public static class TreeMock Methods | Improve this Doc View Source BuildDocExample() Declaration public static TreeMock.Node BuildDocExample() Returns Type Description TreeMock.Node | Improve this Doc View Source BuildExampleTree() Declaration public static TreeMock.Node BuildExampleTree() Returns Type Description TreeMock.Node | Improve this Doc View Source BuildMostUnbalancedTree(Int32) Declaration public static TreeMock.Node BuildMostUnbalancedTree(int numberOfIntermediateNodes) Parameters Type Name Description System.Int32 numberOfIntermediateNodes Returns Type Description TreeMock.Node | Improve this Doc View Source BuildMultiLevelsBacktrackTree() Declaration public static TreeMock.Node BuildMultiLevelsBacktrackTree() Returns Type Description TreeMock.Node | Improve this Doc View Source EdgeIdBasedChildrenSorter(TreeTraversalVisit<TreeMock.Edge, TreeMock.Node>) Declaration public static IEnumerable<KeyValuePair<TreeMock.Edge, TreeMock.Node>> EdgeIdBasedChildrenSorter(TreeTraversalVisit<TreeMock.Edge, TreeMock.Node> visit) Parameters Type Name Description TreeTraversalVisit < TreeMock.Edge , TreeMock.Node > visit Returns Type Description IEnumerable < KeyValuePair < TreeMock.Edge , TreeMock.Node >> | Improve this Doc View Source EdgeIdDescBasedChildrenSorter(TreeTraversalVisit<TreeMock.Edge, TreeMock.Node>) Declaration public static IEnumerable<KeyValuePair<TreeMock.Edge, TreeMock.Node>> EdgeIdDescBasedChildrenSorter(TreeTraversalVisit<TreeMock.Edge, TreeMock.Node> visit) Parameters Type Name Description TreeTraversalVisit < TreeMock.Edge , TreeMock.Node > visit Returns Type Description IEnumerable < KeyValuePair < TreeMock.Edge , TreeMock.Node >> | Improve this Doc View Source EdgeIdMedianBasedChildrenSorter(TreeTraversalVisit<TreeMock.Edge, TreeMock.Node>) Declaration public static IEnumerable<KeyValuePair<TreeMock.Edge, TreeMock.Node>> EdgeIdMedianBasedChildrenSorter(TreeTraversalVisit<TreeMock.Edge, TreeMock.Node> visit) Parameters Type Name Description TreeTraversalVisit < TreeMock.Edge , TreeMock.Node > visit Returns Type Description IEnumerable < KeyValuePair < TreeMock.Edge , TreeMock.Node >>"
  },
  "api/MoreStructures.Tests.RecImmTrees.TreeMock.Node.html": {
    "href": "api/MoreStructures.Tests.RecImmTrees.TreeMock.Node.html",
    "title": "Class TreeMock.Node",
    "keywords": "Class TreeMock.Node Inheritance System.Object TreeMock.Node Implements IRecImmDictIndexedTreeNode < TreeMock.Edge , TreeMock.Node > System.IEquatable < TreeMock.Node > Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : MoreStructures.Tests.RecImmTrees Assembly : MoreStructures.Tests.dll Syntax public class Node : IRecImmDictIndexedTreeNode<TreeMock.Edge, TreeMock.Node>, IEquatable<TreeMock.Node> Constructors | Improve this Doc View Source Node(Int32) Declaration public Node(int id) Parameters Type Name Description System.Int32 id | Improve this Doc View Source Node(Int32, IDictionary<TreeMock.Edge, TreeMock.Node>) Declaration public Node(int Id, IDictionary<TreeMock.Edge, TreeMock.Node> Children) Parameters Type Name Description System.Int32 Id IDictionary < TreeMock.Edge , TreeMock.Node > Children Properties | Improve this Doc View Source Children Declaration public IDictionary<TreeMock.Edge, TreeMock.Node> Children { get; set; } Property Value Type Description IDictionary < TreeMock.Edge , TreeMock.Node > | Improve this Doc View Source Id Declaration public int Id { get; set; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Implements IRecImmDictIndexedTreeNode<TEdge, TNode> System.IEquatable<T> Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.Tests.RecImmTrees.TreePathExtensionsTests.html": {
    "href": "api/MoreStructures.Tests.RecImmTrees.TreePathExtensionsTests.html",
    "title": "Class TreePathExtensionsTests",
    "keywords": "Class TreePathExtensionsTests Inheritance System.Object TreePathExtensionsTests Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.RecImmTrees Assembly : MoreStructures.Tests.dll Syntax public class TreePathExtensionsTests Methods | Improve this Doc View Source Append_IsCorrect() Declaration public void Append_IsCorrect() | Improve this Doc View Source Concat_IsCorrectAppendingEmptyPath() Declaration public void Concat_IsCorrectAppendingEmptyPath() | Improve this Doc View Source Concat_IsCorrectPrependingEmptyPath() Declaration public void Concat_IsCorrectPrependingEmptyPath() | Improve this Doc View Source Concat_IsCorrectWithTwoNonEmptyPaths() Declaration public void Concat_IsCorrectWithTwoNonEmptyPaths() Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.Tests.RecImmTrees.TreePathTests.html": {
    "href": "api/MoreStructures.Tests.RecImmTrees.TreePathTests.html",
    "title": "Class TreePathTests",
    "keywords": "Class TreePathTests Inheritance System.Object TreePathTests Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.RecImmTrees Assembly : MoreStructures.Tests.dll Syntax public class TreePathTests Methods | Improve this Doc View Source Ctor_OfSuffixTree_EmptyPath_IsCorrect() Declaration public void Ctor_OfSuffixTree_EmptyPath_IsCorrect() | Improve this Doc View Source Ctor_OfSuffixTree_MultistepPath_IsCorrectWithEnumerable() Declaration public void Ctor_OfSuffixTree_MultistepPath_IsCorrectWithEnumerable() | Improve this Doc View Source Ctor_OfSuffixTree_MultistepPath_IsCorrectWithParams() Declaration public void Ctor_OfSuffixTree_MultistepPath_IsCorrectWithParams() | Improve this Doc View Source Ctor_OfSuffixTree_SingletonPath_IsCorrect() Declaration public void Ctor_OfSuffixTree_SingletonPath_IsCorrect() | Improve this Doc View Source Ctor_OfSuffixTrie_EmptyPath_IsCorrect() Declaration public void Ctor_OfSuffixTrie_EmptyPath_IsCorrect() | Improve this Doc View Source Ctor_OfSuffixTrie_MultistepPath_IsCorrectWithEnumerable() Declaration public void Ctor_OfSuffixTrie_MultistepPath_IsCorrectWithEnumerable() | Improve this Doc View Source Ctor_OfSuffixTrie_MultistepPath_IsCorrectWithParams() Declaration public void Ctor_OfSuffixTrie_MultistepPath_IsCorrectWithParams() | Improve this Doc View Source Ctor_OfSuffixTrie_SingletonPath_IsCorrect() Declaration public void Ctor_OfSuffixTrie_SingletonPath_IsCorrect() | Improve this Doc View Source Equals_ByValue() Declaration public void Equals_ByValue() | Improve this Doc View Source Equals_TakesIntoAccountPathNodesOrder() Declaration public void Equals_TakesIntoAccountPathNodesOrder() | Improve this Doc View Source GetHashCode_ByValue() Declaration public void GetHashCode_ByValue() | Improve this Doc View Source PathNodes_OfSuffixTree_ImmutabilityOnCtorParam() Declaration public void PathNodes_OfSuffixTree_ImmutabilityOnCtorParam() | Improve this Doc View Source PathNodes_OfSuffixTree_ImmutabilityOnGet() Declaration public void PathNodes_OfSuffixTree_ImmutabilityOnGet() | Improve this Doc View Source PathNodes_OfSuffixTrie_ImmutabilityOnCtorParam() Declaration public void PathNodes_OfSuffixTrie_ImmutabilityOnCtorParam() | Improve this Doc View Source PathNodes_OfSuffixTrie_ImmutabilityOnGet() Declaration public void PathNodes_OfSuffixTrie_ImmutabilityOnGet() | Improve this Doc View Source ToString_IsTheSameOnEquivalentPaths() Declaration public void ToString_IsTheSameOnEquivalentPaths() | Improve this Doc View Source ToString_OfEmptyPathIsEmptyString() Declaration public void ToString_OfEmptyPathIsEmptyString() | Improve this Doc View Source ToString_OfNonEmptyPathIsNonEmptyString() Declaration public void ToString_OfNonEmptyPathIsNonEmptyString() | Improve this Doc View Source ToString_OfPathContainsToStringOfSubPath() Declaration public void ToString_OfPathContainsToStringOfSubPath() Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.Tests.RecImmTrees.Visitor.BreadthFirstTraversalTests-1.html": {
    "href": "api/MoreStructures.Tests.RecImmTrees.Visitor.BreadthFirstTraversalTests-1.html",
    "title": "Class BreadthFirstTraversalTests<TBreadthFirstTraversal>",
    "keywords": "Class BreadthFirstTraversalTests<TBreadthFirstTraversal> Inheritance System.Object TreeTraversalTests <TBreadthFirstTraversal> BreadthFirstTraversalTests<TBreadthFirstTraversal> FullyIterativeBreadthFirstTraversalTests FullyRecursiveBreadthFirstTraversalTests Inherited Members TreeTraversalTests<TBreadthFirstTraversal>.Visit_ParentIsCorrect() TreeTraversalTests<TBreadthFirstTraversal>.Visit_IncomingEdgeIsCorrect() TreeTraversalTests<TBreadthFirstTraversal>.Visit_LevelIsCorrect() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.RecImmTrees.Visitor Assembly : MoreStructures.Tests.dll Syntax public abstract class BreadthFirstTraversalTests<TBreadthFirstTraversal> : TreeTraversalTests<TBreadthFirstTraversal> where TBreadthFirstTraversal : BreadthFirstTraversal<TreeMock.Edge, TreeMock.Node>, new() Type Parameters Name Description TBreadthFirstTraversal Methods | Improve this Doc View Source Visit_ChildrenSorter_IsApplied() Declaration public void Visit_ChildrenSorter_IsApplied() | Improve this Doc View Source Visit_DocExamples_ChildrenFirst() Declaration public void Visit_DocExamples_ChildrenFirst() | Improve this Doc View Source Visit_DocExamples_ParentFirst() Declaration public void Visit_DocExamples_ParentFirst() | Improve this Doc View Source Visit_TraversalOrderChildrenFirst() Declaration public void Visit_TraversalOrderChildrenFirst() | Improve this Doc View Source Visit_TraversalOrderChildrenFirst_MultiLevelsBacktrackTree() Declaration public void Visit_TraversalOrderChildrenFirst_MultiLevelsBacktrackTree() | Improve this Doc View Source Visit_TraversalOrderNotSupported_OnSingleton() Declaration public void Visit_TraversalOrderNotSupported_OnSingleton() | Improve this Doc View Source Visit_TraversalOrderNotSupported_OnTreeWithMultipleNodes() Declaration public void Visit_TraversalOrderNotSupported_OnTreeWithMultipleNodes() | Improve this Doc View Source Visit_TraversalOrderParentFirst() Declaration public void Visit_TraversalOrderParentFirst() | Improve this Doc View Source Visit_TraversalOrderParentFirst_MultiLevelsBacktrackTree() Declaration public void Visit_TraversalOrderParentFirst_MultiLevelsBacktrackTree() Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.Tests.RecImmTrees.Visitor.DepthFirstTraversalTests-1.html": {
    "href": "api/MoreStructures.Tests.RecImmTrees.Visitor.DepthFirstTraversalTests-1.html",
    "title": "Class DepthFirstTraversalTests<TDepthFirstTraversal>",
    "keywords": "Class DepthFirstTraversalTests<TDepthFirstTraversal> Inheritance System.Object TreeTraversalTests <TDepthFirstTraversal> DepthFirstTraversalTests<TDepthFirstTraversal> FullyIterativeDepthFirstTraversalTests FullyRecursiveDepthFirstTraversalTests Inherited Members TreeTraversalTests<TDepthFirstTraversal>.Visit_ParentIsCorrect() TreeTraversalTests<TDepthFirstTraversal>.Visit_IncomingEdgeIsCorrect() TreeTraversalTests<TDepthFirstTraversal>.Visit_LevelIsCorrect() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.RecImmTrees.Visitor Assembly : MoreStructures.Tests.dll Syntax public abstract class DepthFirstTraversalTests<TDepthFirstTraversal> : TreeTraversalTests<TDepthFirstTraversal> where TDepthFirstTraversal : DepthFirstTraversal<TreeMock.Edge, TreeMock.Node>, new() Type Parameters Name Description TDepthFirstTraversal Methods | Improve this Doc View Source Visit_ChildrenSorter_IsApplied() Declaration public void Visit_ChildrenSorter_IsApplied() | Improve this Doc View Source Visit_DocExamples_ChildrenFirst() Declaration public void Visit_DocExamples_ChildrenFirst() | Improve this Doc View Source Visit_DocExamples_ParentFirst() Declaration public void Visit_DocExamples_ParentFirst() | Improve this Doc View Source Visit_MultiLevelsBacktrackTree() Declaration public void Visit_MultiLevelsBacktrackTree() | Improve this Doc View Source Visit_TraversalOrderChildrenFirst() Declaration public void Visit_TraversalOrderChildrenFirst() | Improve this Doc View Source Visit_TraversalOrderNotSupported_OnSingleton() Declaration public void Visit_TraversalOrderNotSupported_OnSingleton() | Improve this Doc View Source Visit_TraversalOrderNotSupported_OnTreeWithMultipleNodes() Declaration public void Visit_TraversalOrderNotSupported_OnTreeWithMultipleNodes() | Improve this Doc View Source Visit_TraversalOrderParentFirst() Declaration public void Visit_TraversalOrderParentFirst() Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.Tests.RecImmTrees.Visitor.FullyIterativeBreadthFirstTraversalTests.html": {
    "href": "api/MoreStructures.Tests.RecImmTrees.Visitor.FullyIterativeBreadthFirstTraversalTests.html",
    "title": "Class FullyIterativeBreadthFirstTraversalTests",
    "keywords": "Class FullyIterativeBreadthFirstTraversalTests Inheritance System.Object TreeTraversalTests < FullyIterativeBreadthFirstTraversal < TreeMock.Edge , TreeMock.Node >> BreadthFirstTraversalTests < FullyIterativeBreadthFirstTraversal < TreeMock.Edge , TreeMock.Node >> FullyIterativeBreadthFirstTraversalTests Inherited Members BreadthFirstTraversalTests<FullyIterativeBreadthFirstTraversal<TreeMock.Edge, TreeMock.Node>>.Visit_DocExamples_ParentFirst() BreadthFirstTraversalTests<FullyIterativeBreadthFirstTraversal<TreeMock.Edge, TreeMock.Node>>.Visit_DocExamples_ChildrenFirst() BreadthFirstTraversalTests<FullyIterativeBreadthFirstTraversal<TreeMock.Edge, TreeMock.Node>>.Visit_TraversalOrderParentFirst() BreadthFirstTraversalTests<FullyIterativeBreadthFirstTraversal<TreeMock.Edge, TreeMock.Node>>.Visit_TraversalOrderChildrenFirst() BreadthFirstTraversalTests<FullyIterativeBreadthFirstTraversal<TreeMock.Edge, TreeMock.Node>>.Visit_TraversalOrderNotSupported_OnSingleton() BreadthFirstTraversalTests<FullyIterativeBreadthFirstTraversal<TreeMock.Edge, TreeMock.Node>>.Visit_TraversalOrderNotSupported_OnTreeWithMultipleNodes() BreadthFirstTraversalTests<FullyIterativeBreadthFirstTraversal<TreeMock.Edge, TreeMock.Node>>.Visit_ChildrenSorter_IsApplied() BreadthFirstTraversalTests<FullyIterativeBreadthFirstTraversal<TreeMock.Edge, TreeMock.Node>>.Visit_TraversalOrderParentFirst_MultiLevelsBacktrackTree() BreadthFirstTraversalTests<FullyIterativeBreadthFirstTraversal<TreeMock.Edge, TreeMock.Node>>.Visit_TraversalOrderChildrenFirst_MultiLevelsBacktrackTree() TreeTraversalTests<FullyIterativeBreadthFirstTraversal<TreeMock.Edge, TreeMock.Node>>.Visit_ParentIsCorrect() TreeTraversalTests<FullyIterativeBreadthFirstTraversal<TreeMock.Edge, TreeMock.Node>>.Visit_IncomingEdgeIsCorrect() TreeTraversalTests<FullyIterativeBreadthFirstTraversal<TreeMock.Edge, TreeMock.Node>>.Visit_LevelIsCorrect() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.RecImmTrees.Visitor Assembly : MoreStructures.Tests.dll Syntax public class FullyIterativeBreadthFirstTraversalTests : BreadthFirstTraversalTests<FullyIterativeBreadthFirstTraversal<TreeMock.Edge, TreeMock.Node>> Methods | Improve this Doc View Source Visit_DoesntOverflowWithDeepStructures() Declaration public void Visit_DoesntOverflowWithDeepStructures() Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.Tests.RecImmTrees.Visitor.FullyIterativeDepthFirstTraversalTests.html": {
    "href": "api/MoreStructures.Tests.RecImmTrees.Visitor.FullyIterativeDepthFirstTraversalTests.html",
    "title": "Class FullyIterativeDepthFirstTraversalTests",
    "keywords": "Class FullyIterativeDepthFirstTraversalTests Inheritance System.Object TreeTraversalTests < FullyIterativeDepthFirstTraversal < TreeMock.Edge , TreeMock.Node >> DepthFirstTraversalTests < FullyIterativeDepthFirstTraversal < TreeMock.Edge , TreeMock.Node >> FullyIterativeDepthFirstTraversalTests Inherited Members DepthFirstTraversalTests<FullyIterativeDepthFirstTraversal<TreeMock.Edge, TreeMock.Node>>.Visit_DocExamples_ParentFirst() DepthFirstTraversalTests<FullyIterativeDepthFirstTraversal<TreeMock.Edge, TreeMock.Node>>.Visit_DocExamples_ChildrenFirst() DepthFirstTraversalTests<FullyIterativeDepthFirstTraversal<TreeMock.Edge, TreeMock.Node>>.Visit_TraversalOrderParentFirst() DepthFirstTraversalTests<FullyIterativeDepthFirstTraversal<TreeMock.Edge, TreeMock.Node>>.Visit_TraversalOrderChildrenFirst() DepthFirstTraversalTests<FullyIterativeDepthFirstTraversal<TreeMock.Edge, TreeMock.Node>>.Visit_TraversalOrderNotSupported_OnSingleton() DepthFirstTraversalTests<FullyIterativeDepthFirstTraversal<TreeMock.Edge, TreeMock.Node>>.Visit_TraversalOrderNotSupported_OnTreeWithMultipleNodes() DepthFirstTraversalTests<FullyIterativeDepthFirstTraversal<TreeMock.Edge, TreeMock.Node>>.Visit_ChildrenSorter_IsApplied() DepthFirstTraversalTests<FullyIterativeDepthFirstTraversal<TreeMock.Edge, TreeMock.Node>>.Visit_MultiLevelsBacktrackTree() TreeTraversalTests<FullyIterativeDepthFirstTraversal<TreeMock.Edge, TreeMock.Node>>.Visit_ParentIsCorrect() TreeTraversalTests<FullyIterativeDepthFirstTraversal<TreeMock.Edge, TreeMock.Node>>.Visit_IncomingEdgeIsCorrect() TreeTraversalTests<FullyIterativeDepthFirstTraversal<TreeMock.Edge, TreeMock.Node>>.Visit_LevelIsCorrect() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.RecImmTrees.Visitor Assembly : MoreStructures.Tests.dll Syntax public class FullyIterativeDepthFirstTraversalTests : DepthFirstTraversalTests<FullyIterativeDepthFirstTraversal<TreeMock.Edge, TreeMock.Node>> Methods | Improve this Doc View Source Visit_DoesntOverflowWithDeepStructures() Declaration public void Visit_DoesntOverflowWithDeepStructures() Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.Tests.RecImmTrees.Visitor.FullyRecursiveBreadthFirstTraversalTests.html": {
    "href": "api/MoreStructures.Tests.RecImmTrees.Visitor.FullyRecursiveBreadthFirstTraversalTests.html",
    "title": "Class FullyRecursiveBreadthFirstTraversalTests",
    "keywords": "Class FullyRecursiveBreadthFirstTraversalTests Inheritance System.Object TreeTraversalTests < FullyRecursiveBreadthFirstTraversal < TreeMock.Edge , TreeMock.Node >> BreadthFirstTraversalTests < FullyRecursiveBreadthFirstTraversal < TreeMock.Edge , TreeMock.Node >> FullyRecursiveBreadthFirstTraversalTests Inherited Members BreadthFirstTraversalTests<FullyRecursiveBreadthFirstTraversal<TreeMock.Edge, TreeMock.Node>>.Visit_DocExamples_ParentFirst() BreadthFirstTraversalTests<FullyRecursiveBreadthFirstTraversal<TreeMock.Edge, TreeMock.Node>>.Visit_DocExamples_ChildrenFirst() BreadthFirstTraversalTests<FullyRecursiveBreadthFirstTraversal<TreeMock.Edge, TreeMock.Node>>.Visit_TraversalOrderParentFirst() BreadthFirstTraversalTests<FullyRecursiveBreadthFirstTraversal<TreeMock.Edge, TreeMock.Node>>.Visit_TraversalOrderChildrenFirst() BreadthFirstTraversalTests<FullyRecursiveBreadthFirstTraversal<TreeMock.Edge, TreeMock.Node>>.Visit_TraversalOrderNotSupported_OnSingleton() BreadthFirstTraversalTests<FullyRecursiveBreadthFirstTraversal<TreeMock.Edge, TreeMock.Node>>.Visit_TraversalOrderNotSupported_OnTreeWithMultipleNodes() BreadthFirstTraversalTests<FullyRecursiveBreadthFirstTraversal<TreeMock.Edge, TreeMock.Node>>.Visit_ChildrenSorter_IsApplied() BreadthFirstTraversalTests<FullyRecursiveBreadthFirstTraversal<TreeMock.Edge, TreeMock.Node>>.Visit_TraversalOrderParentFirst_MultiLevelsBacktrackTree() BreadthFirstTraversalTests<FullyRecursiveBreadthFirstTraversal<TreeMock.Edge, TreeMock.Node>>.Visit_TraversalOrderChildrenFirst_MultiLevelsBacktrackTree() TreeTraversalTests<FullyRecursiveBreadthFirstTraversal<TreeMock.Edge, TreeMock.Node>>.Visit_ParentIsCorrect() TreeTraversalTests<FullyRecursiveBreadthFirstTraversal<TreeMock.Edge, TreeMock.Node>>.Visit_IncomingEdgeIsCorrect() TreeTraversalTests<FullyRecursiveBreadthFirstTraversal<TreeMock.Edge, TreeMock.Node>>.Visit_LevelIsCorrect() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.RecImmTrees.Visitor Assembly : MoreStructures.Tests.dll Syntax public class FullyRecursiveBreadthFirstTraversalTests : BreadthFirstTraversalTests<FullyRecursiveBreadthFirstTraversal<TreeMock.Edge, TreeMock.Node>> Methods | Improve this Doc View Source Visit_DoesntStackOverflowWithNotSoDeepStructures() Declaration public void Visit_DoesntStackOverflowWithNotSoDeepStructures() Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.Tests.RecImmTrees.Visitor.FullyRecursiveDepthFirstTraversalTests.html": {
    "href": "api/MoreStructures.Tests.RecImmTrees.Visitor.FullyRecursiveDepthFirstTraversalTests.html",
    "title": "Class FullyRecursiveDepthFirstTraversalTests",
    "keywords": "Class FullyRecursiveDepthFirstTraversalTests Inheritance System.Object TreeTraversalTests < FullyRecursiveDepthFirstTraversal < TreeMock.Edge , TreeMock.Node >> DepthFirstTraversalTests < FullyRecursiveDepthFirstTraversal < TreeMock.Edge , TreeMock.Node >> FullyRecursiveDepthFirstTraversalTests Inherited Members DepthFirstTraversalTests<FullyRecursiveDepthFirstTraversal<TreeMock.Edge, TreeMock.Node>>.Visit_DocExamples_ParentFirst() DepthFirstTraversalTests<FullyRecursiveDepthFirstTraversal<TreeMock.Edge, TreeMock.Node>>.Visit_DocExamples_ChildrenFirst() DepthFirstTraversalTests<FullyRecursiveDepthFirstTraversal<TreeMock.Edge, TreeMock.Node>>.Visit_TraversalOrderParentFirst() DepthFirstTraversalTests<FullyRecursiveDepthFirstTraversal<TreeMock.Edge, TreeMock.Node>>.Visit_TraversalOrderChildrenFirst() DepthFirstTraversalTests<FullyRecursiveDepthFirstTraversal<TreeMock.Edge, TreeMock.Node>>.Visit_TraversalOrderNotSupported_OnSingleton() DepthFirstTraversalTests<FullyRecursiveDepthFirstTraversal<TreeMock.Edge, TreeMock.Node>>.Visit_TraversalOrderNotSupported_OnTreeWithMultipleNodes() DepthFirstTraversalTests<FullyRecursiveDepthFirstTraversal<TreeMock.Edge, TreeMock.Node>>.Visit_ChildrenSorter_IsApplied() DepthFirstTraversalTests<FullyRecursiveDepthFirstTraversal<TreeMock.Edge, TreeMock.Node>>.Visit_MultiLevelsBacktrackTree() TreeTraversalTests<FullyRecursiveDepthFirstTraversal<TreeMock.Edge, TreeMock.Node>>.Visit_ParentIsCorrect() TreeTraversalTests<FullyRecursiveDepthFirstTraversal<TreeMock.Edge, TreeMock.Node>>.Visit_IncomingEdgeIsCorrect() TreeTraversalTests<FullyRecursiveDepthFirstTraversal<TreeMock.Edge, TreeMock.Node>>.Visit_LevelIsCorrect() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.RecImmTrees.Visitor Assembly : MoreStructures.Tests.dll Syntax public class FullyRecursiveDepthFirstTraversalTests : DepthFirstTraversalTests<FullyRecursiveDepthFirstTraversal<TreeMock.Edge, TreeMock.Node>> Methods | Improve this Doc View Source Visit_DoesntStackOverflowWithNotSoDeepStructures() Declaration public void Visit_DoesntStackOverflowWithNotSoDeepStructures() Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.Tests.RecImmTrees.Visitor.html": {
    "href": "api/MoreStructures.Tests.RecImmTrees.Visitor.html",
    "title": "Namespace MoreStructures.Tests.RecImmTrees.Visitor",
    "keywords": "Namespace MoreStructures.Tests.RecImmTrees.Visitor Classes BreadthFirstTraversalTests<TBreadthFirstTraversal> DepthFirstTraversalTests<TDepthFirstTraversal> FullyIterativeBreadthFirstTraversalTests FullyIterativeDepthFirstTraversalTests FullyRecursiveBreadthFirstTraversalTests FullyRecursiveDepthFirstTraversalTests TreeTraversalTests<TTreeTraversal>"
  },
  "api/MoreStructures.Tests.RecImmTrees.Visitor.TreeTraversalTests-1.html": {
    "href": "api/MoreStructures.Tests.RecImmTrees.Visitor.TreeTraversalTests-1.html",
    "title": "Class TreeTraversalTests<TTreeTraversal>",
    "keywords": "Class TreeTraversalTests<TTreeTraversal> Inheritance System.Object TreeTraversalTests<TTreeTraversal> BreadthFirstTraversalTests<TBreadthFirstTraversal> DepthFirstTraversalTests<TDepthFirstTraversal> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.RecImmTrees.Visitor Assembly : MoreStructures.Tests.dll Syntax public abstract class TreeTraversalTests<TTreeTraversal> where TTreeTraversal : TreeTraversal<TreeMock.Edge, TreeMock.Node>, new() Type Parameters Name Description TTreeTraversal Methods | Improve this Doc View Source Visit_IncomingEdgeIsCorrect() Declaration public void Visit_IncomingEdgeIsCorrect() | Improve this Doc View Source Visit_LevelIsCorrect() Declaration public void Visit_LevelIsCorrect() | Improve this Doc View Source Visit_ParentIsCorrect() Declaration public void Visit_ParentIsCorrect() Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.Tests.RotatedTextWithTerminatorTests.html": {
    "href": "api/MoreStructures.Tests.RotatedTextWithTerminatorTests.html",
    "title": "Class RotatedTextWithTerminatorTests",
    "keywords": "Class RotatedTextWithTerminatorTests Inheritance System.Object RotatedTextWithTerminatorTests Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests Assembly : MoreStructures.Tests.dll Syntax public class RotatedTextWithTerminatorTests Methods | Improve this Doc View Source Ctor_Preconditions() Declaration public void Ctor_Preconditions() | Improve this Doc View Source EndsWith_IsCorrectWithEnumerable() Declaration public void EndsWith_IsCorrectWithEnumerable() | Improve this Doc View Source EndsWith_IsCorrectWithString() Declaration public void EndsWith_IsCorrectWithString() | Improve this Doc View Source Equals_IsByValueWithEnumerableOfChar() Declaration public void Equals_IsByValueWithEnumerableOfChar() | Improve this Doc View Source Equals_IsByValueWithListOfChar() Declaration public void Equals_IsByValueWithListOfChar() | Improve this Doc View Source Equals_IsByValueWithStrings() Declaration public void Equals_IsByValueWithStrings() | Improve this Doc View Source GetEnumerator_Generic_IsCorrect() Declaration public void GetEnumerator_Generic_IsCorrect() | Improve this Doc View Source GetEnumerator_Generic_WorksWithLinq() Declaration public void GetEnumerator_Generic_WorksWithLinq() | Improve this Doc View Source GetEnumerator_NonGeneric_IsCorrect() Declaration public void GetEnumerator_NonGeneric_IsCorrect() | Improve this Doc View Source Indexer_WithIndexOfEnumerable() Declaration public void Indexer_WithIndexOfEnumerable() | Improve this Doc View Source Indexer_WithIndexOfString() Declaration public void Indexer_WithIndexOfString() | Improve this Doc View Source Indexer_WithRangeOfEnumerable() Declaration public void Indexer_WithRangeOfEnumerable() | Improve this Doc View Source Indexer_WithRangeOfString() Declaration public void Indexer_WithRangeOfString() | Improve this Doc View Source Indexer_WithSelector() Declaration public void Indexer_WithSelector() | Improve this Doc View Source Length_IsCorrect() Declaration public void Length_IsCorrect() | Improve this Doc View Source StartsWith_IsCorrectWithEnumerable() Declaration public void StartsWith_IsCorrectWithEnumerable() | Improve this Doc View Source StartsWith_IsCorrectWithString() Declaration public void StartsWith_IsCorrectWithString() Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.Tests.StringIncludingTerminatorComparerTests.html": {
    "href": "api/MoreStructures.Tests.StringIncludingTerminatorComparerTests.html",
    "title": "Class StringIncludingTerminatorComparerTests",
    "keywords": "Class StringIncludingTerminatorComparerTests Inheritance System.Object StringIncludingTerminatorComparerTests Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests Assembly : MoreStructures.Tests.dll Syntax public class StringIncludingTerminatorComparerTests Methods | Improve this Doc View Source Compare_IsCorrect_WithNoTerminatorIncluded() Declaration public void Compare_IsCorrect_WithNoTerminatorIncluded() | Improve this Doc View Source Compare_IsCorrect_WithTerminatorIncludedHigherInASCII() Declaration public void Compare_IsCorrect_WithTerminatorIncludedHigherInASCII() | Improve this Doc View Source Compare_IsCorrect_WithTerminatorIncludedLowerInASCII() Declaration public void Compare_IsCorrect_WithTerminatorIncludedLowerInASCII() | Improve this Doc View Source Equals_ByValue() Declaration public void Equals_ByValue() | Improve this Doc View Source GetHashCode_ByValue() Declaration public void GetHashCode_ByValue() | Improve this Doc View Source Terminator_IsSet() Declaration public void Terminator_IsSet() Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.Tests.SuffixArrays.Builders.html": {
    "href": "api/MoreStructures.Tests.SuffixArrays.Builders.html",
    "title": "Namespace MoreStructures.Tests.SuffixArrays.Builders",
    "keywords": "Namespace MoreStructures.Tests.SuffixArrays.Builders Classes NaiveSuffixArrayBuilderTests SuffixArrayBuilderTests<TEdge, TNode> SuffixTreeBasedSuffixArrayBuilderTests SuffixTrieBasedSuffixArrayBuilderTests"
  },
  "api/MoreStructures.Tests.SuffixArrays.Builders.NaiveSuffixArrayBuilderTests.html": {
    "href": "api/MoreStructures.Tests.SuffixArrays.Builders.NaiveSuffixArrayBuilderTests.html",
    "title": "Class NaiveSuffixArrayBuilderTests",
    "keywords": "Class NaiveSuffixArrayBuilderTests Inheritance System.Object SuffixArrayBuilderTests < SuffixTreeEdge , SuffixTreeNode > NaiveSuffixArrayBuilderTests Inherited Members SuffixArrayBuilderTests<SuffixTreeEdge, SuffixTreeNode>.BuilderBuilder SuffixArrayBuilderTests<SuffixTreeEdge, SuffixTreeNode>.Build_IsCorrect(String, Int32[]) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.SuffixArrays.Builders Assembly : MoreStructures.Tests.dll Syntax public class NaiveSuffixArrayBuilderTests : SuffixArrayBuilderTests<SuffixTreeEdge, SuffixTreeNode> Constructors | Improve this Doc View Source NaiveSuffixArrayBuilderTests() Declaration public NaiveSuffixArrayBuilderTests() Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.Tests.SuffixArrays.Builders.SuffixArrayBuilderTests-2.html": {
    "href": "api/MoreStructures.Tests.SuffixArrays.Builders.SuffixArrayBuilderTests-2.html",
    "title": "Class SuffixArrayBuilderTests<TEdge, TNode>",
    "keywords": "Class SuffixArrayBuilderTests<TEdge, TNode> Inheritance System.Object SuffixArrayBuilderTests<TEdge, TNode> NaiveSuffixArrayBuilderTests SuffixTreeBasedSuffixArrayBuilderTests SuffixTrieBasedSuffixArrayBuilderTests Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.SuffixArrays.Builders Assembly : MoreStructures.Tests.dll Syntax public abstract class SuffixArrayBuilderTests<TEdge, TNode> where TEdge : ISuffixStructureEdge<TEdge, TNode> where TNode : ISuffixStructureNode<TEdge, TNode> Type Parameters Name Description TEdge TNode Constructors | Improve this Doc View Source SuffixArrayBuilderTests(Func<String, ISuffixArrayBuilder<TEdge, TNode>>) Declaration protected SuffixArrayBuilderTests(Func<string, ISuffixArrayBuilder<TEdge, TNode>> builderBuilder) Parameters Type Name Description Func < System.String , ISuffixArrayBuilder <TEdge, TNode>> builderBuilder Properties | Improve this Doc View Source BuilderBuilder Declaration protected Func<string, ISuffixArrayBuilder<TEdge, TNode>> BuilderBuilder { get; } Property Value Type Description Func < System.String , ISuffixArrayBuilder <TEdge, TNode>> Methods | Improve this Doc View Source Build_IsCorrect(String, Int32[]) Declaration public void Build_IsCorrect(string text, int[] expectedResult) Parameters Type Name Description System.String text System.Int32 [] expectedResult Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.Tests.SuffixArrays.Builders.SuffixTreeBasedSuffixArrayBuilderTests.html": {
    "href": "api/MoreStructures.Tests.SuffixArrays.Builders.SuffixTreeBasedSuffixArrayBuilderTests.html",
    "title": "Class SuffixTreeBasedSuffixArrayBuilderTests",
    "keywords": "Class SuffixTreeBasedSuffixArrayBuilderTests Inheritance System.Object SuffixArrayBuilderTests < SuffixTreeEdge , SuffixTreeNode > SuffixTreeBasedSuffixArrayBuilderTests Inherited Members SuffixArrayBuilderTests<SuffixTreeEdge, SuffixTreeNode>.BuilderBuilder SuffixArrayBuilderTests<SuffixTreeEdge, SuffixTreeNode>.Build_IsCorrect(String, Int32[]) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.SuffixArrays.Builders Assembly : MoreStructures.Tests.dll Syntax public class SuffixTreeBasedSuffixArrayBuilderTests : SuffixArrayBuilderTests<SuffixTreeEdge, SuffixTreeNode> Constructors | Improve this Doc View Source SuffixTreeBasedSuffixArrayBuilderTests() Declaration public SuffixTreeBasedSuffixArrayBuilderTests() Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.Tests.SuffixArrays.Builders.SuffixTrieBasedSuffixArrayBuilderTests.html": {
    "href": "api/MoreStructures.Tests.SuffixArrays.Builders.SuffixTrieBasedSuffixArrayBuilderTests.html",
    "title": "Class SuffixTrieBasedSuffixArrayBuilderTests",
    "keywords": "Class SuffixTrieBasedSuffixArrayBuilderTests Inheritance System.Object SuffixArrayBuilderTests < SuffixTrieEdge , SuffixTrieNode > SuffixTrieBasedSuffixArrayBuilderTests Inherited Members SuffixArrayBuilderTests<SuffixTrieEdge, SuffixTrieNode>.BuilderBuilder SuffixArrayBuilderTests<SuffixTrieEdge, SuffixTrieNode>.Build_IsCorrect(String, Int32[]) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.SuffixArrays.Builders Assembly : MoreStructures.Tests.dll Syntax public class SuffixTrieBasedSuffixArrayBuilderTests : SuffixArrayBuilderTests<SuffixTrieEdge, SuffixTrieNode> Constructors | Improve this Doc View Source SuffixTrieBasedSuffixArrayBuilderTests() Declaration public SuffixTrieBasedSuffixArrayBuilderTests() Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.Tests.SuffixStructures.AdjacencyOrdersTests.html": {
    "href": "api/MoreStructures.Tests.SuffixStructures.AdjacencyOrdersTests.html",
    "title": "Class AdjacencyOrdersTests",
    "keywords": "Class AdjacencyOrdersTests Inheritance System.Object AdjacencyOrdersTests Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.SuffixStructures Assembly : MoreStructures.Tests.dll Syntax public class AdjacencyOrdersTests Methods | Improve this Doc View Source FlagsConsistency() Declaration public void FlagsConsistency() Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.Tests.SuffixStructures.BuilderExtensionsTests.html": {
    "href": "api/MoreStructures.Tests.SuffixStructures.BuilderExtensionsTests.html",
    "title": "Class BuilderExtensionsTests",
    "keywords": "Class BuilderExtensionsTests Inheritance System.Object BuilderExtensionsTests Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.SuffixStructures Assembly : MoreStructures.Tests.dll Syntax public class BuilderExtensionsTests Methods | Improve this Doc View Source BuildTree_CallsTheBuilderWithAnEquivalentTextWithTerminator() Declaration public void BuildTree_CallsTheBuilderWithAnEquivalentTextWithTerminator() Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.Tests.SuffixStructures.Conversions.ConversionEquivalences.EquivalenceId.html": {
    "href": "api/MoreStructures.Tests.SuffixStructures.Conversions.ConversionEquivalences.EquivalenceId.html",
    "title": "Enum ConversionEquivalences.EquivalenceId",
    "keywords": "Enum ConversionEquivalences.EquivalenceId Namespace : MoreStructures.Tests.SuffixStructures.Conversions Assembly : MoreStructures.Tests.dll Syntax public enum EquivalenceId Fields Name Description Example Leaf OneLevelTreeToMostUnbalancedAHundredLevelsTrie OneLevelTreeToMostUnbalancedTenLevelsTrie ThreeLevelsTreeToFourLevelsTrie ThreeLevelsTreeToSixLevelsTrie TwoLevelsTreeSingleChainSingleLeafToThreeLevelsTrie TwoLevelsTreeSingleChainTwoLeafsToThreeLevelsTrie TwoLevelsTreeToFourLevelsTrie TwoLevelsTreeToTwoLevelsTrie TwoLevelsTreeWithSiblingToThreeLevelsTrie Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, ConversionEquivalences.EquivalenceId>(TextWithTerminator)"
  },
  "api/MoreStructures.Tests.SuffixStructures.Conversions.ConversionEquivalences.html": {
    "href": "api/MoreStructures.Tests.SuffixStructures.Conversions.ConversionEquivalences.html",
    "title": "Class ConversionEquivalences",
    "keywords": "Class ConversionEquivalences Inheritance System.Object ConversionEquivalences Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.SuffixStructures.Conversions Assembly : MoreStructures.Tests.dll Syntax public static class ConversionEquivalences Fields | Improve this Doc View Source Equivalences Declaration public static readonly Dictionary<ConversionEquivalences.EquivalenceId, (SuffixTreeNode treeNode, SuffixTrieNode trieNode)> Equivalences Field Value Type Description Dictionary < ConversionEquivalences.EquivalenceId , System.ValueTuple < SuffixTreeNode , SuffixTrieNode >>"
  },
  "api/MoreStructures.Tests.SuffixStructures.Conversions.ConverterTests.html": {
    "href": "api/MoreStructures.Tests.SuffixStructures.Conversions.ConverterTests.html",
    "title": "Class ConverterTests",
    "keywords": "Class ConverterTests Inheritance System.Object ConverterTests FullyIterativeConverterTests FullyRecursiveConverterTests PartiallyIterativeConverterTests Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.SuffixStructures.Conversions Assembly : MoreStructures.Tests.dll Syntax public abstract class ConverterTests Constructors | Improve this Doc View Source ConverterTests(IConverter) Declaration public ConverterTests(IConverter suffixStructuresConverter) Parameters Type Name Description IConverter suffixStructuresConverter Properties | Improve this Doc View Source Converter Declaration protected IConverter Converter { get; set; } Property Value Type Description IConverter Methods | Improve this Doc View Source TreeToTrie_IsCorrect(ConversionEquivalences.EquivalenceId) Declaration public void TreeToTrie_IsCorrect(ConversionEquivalences.EquivalenceId equivalenceId) Parameters Type Name Description ConversionEquivalences.EquivalenceId equivalenceId | Improve this Doc View Source TreeToTrie_OnlySupportsLeafAndIntermediateNodes_AsArgument() Declaration public void TreeToTrie_OnlySupportsLeafAndIntermediateNodes_AsArgument() | Improve this Doc View Source TreeToTrie_OnlySupportsLeafAndIntermediateNodes_DeepInTheStructure() Declaration public void TreeToTrie_OnlySupportsLeafAndIntermediateNodes_DeepInTheStructure() | Improve this Doc View Source TrieToTree_IsCorrect(ConversionEquivalences.EquivalenceId) Declaration public void TrieToTree_IsCorrect(ConversionEquivalences.EquivalenceId equivalenceId) Parameters Type Name Description ConversionEquivalences.EquivalenceId equivalenceId | Improve this Doc View Source TrieToTree_OnlySupportsLeafAndIntermediateNodes_AsArgument() Declaration public void TrieToTree_OnlySupportsLeafAndIntermediateNodes_AsArgument() | Improve this Doc View Source TrieToTree_OnlySupportsLeafAndIntermediateNodes_DeepInTheStructure() Declaration public void TrieToTree_OnlySupportsLeafAndIntermediateNodes_DeepInTheStructure() Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.Tests.SuffixStructures.Conversions.FullyIterativeConverterTests.html": {
    "href": "api/MoreStructures.Tests.SuffixStructures.Conversions.FullyIterativeConverterTests.html",
    "title": "Class FullyIterativeConverterTests",
    "keywords": "Class FullyIterativeConverterTests Runs tests defined in ConverterTests for FullyIterativeConverter . Inheritance System.Object ConverterTests FullyIterativeConverterTests Inherited Members ConverterTests.TreeToTrie_IsCorrect(ConversionEquivalences.EquivalenceId) ConverterTests.TreeToTrie_OnlySupportsLeafAndIntermediateNodes_AsArgument() ConverterTests.TreeToTrie_OnlySupportsLeafAndIntermediateNodes_DeepInTheStructure() ConverterTests.Converter ConverterTests.TrieToTree_IsCorrect(ConversionEquivalences.EquivalenceId) ConverterTests.TrieToTree_OnlySupportsLeafAndIntermediateNodes_AsArgument() ConverterTests.TrieToTree_OnlySupportsLeafAndIntermediateNodes_DeepInTheStructure() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.SuffixStructures.Conversions Assembly : MoreStructures.Tests.dll Syntax public class FullyIterativeConverterTests : ConverterTests Constructors | Improve this Doc View Source FullyIterativeConverterTests() Declaration public FullyIterativeConverterTests() Methods | Improve this Doc View Source TrieToTree_DoesntStackOverflowWithDeepStructures() Declaration public void TrieToTree_DoesntStackOverflowWithDeepStructures() Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.Tests.SuffixStructures.Conversions.FullyRecursiveConverterTests.html": {
    "href": "api/MoreStructures.Tests.SuffixStructures.Conversions.FullyRecursiveConverterTests.html",
    "title": "Class FullyRecursiveConverterTests",
    "keywords": "Class FullyRecursiveConverterTests Runs tests defined in ConverterTests for FullyRecursiveConverter . Inheritance System.Object ConverterTests FullyRecursiveConverterTests Inherited Members ConverterTests.TreeToTrie_IsCorrect(ConversionEquivalences.EquivalenceId) ConverterTests.TreeToTrie_OnlySupportsLeafAndIntermediateNodes_AsArgument() ConverterTests.TreeToTrie_OnlySupportsLeafAndIntermediateNodes_DeepInTheStructure() ConverterTests.Converter ConverterTests.TrieToTree_IsCorrect(ConversionEquivalences.EquivalenceId) ConverterTests.TrieToTree_OnlySupportsLeafAndIntermediateNodes_AsArgument() ConverterTests.TrieToTree_OnlySupportsLeafAndIntermediateNodes_DeepInTheStructure() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.SuffixStructures.Conversions Assembly : MoreStructures.Tests.dll Syntax public class FullyRecursiveConverterTests : ConverterTests Constructors | Improve this Doc View Source FullyRecursiveConverterTests() Declaration public FullyRecursiveConverterTests() Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.Tests.SuffixStructures.Conversions.html": {
    "href": "api/MoreStructures.Tests.SuffixStructures.Conversions.html",
    "title": "Namespace MoreStructures.Tests.SuffixStructures.Conversions",
    "keywords": "Namespace MoreStructures.Tests.SuffixStructures.Conversions Classes ConversionEquivalences ConverterTests FullyIterativeConverterTests Runs tests defined in ConverterTests for FullyIterativeConverter . FullyRecursiveConverterTests Runs tests defined in ConverterTests for FullyRecursiveConverter . PartiallyIterativeConverterTests Runs tests defined in ConverterTests for PartiallyIterativeConverter . Enums ConversionEquivalences.EquivalenceId"
  },
  "api/MoreStructures.Tests.SuffixStructures.Conversions.PartiallyIterativeConverterTests.html": {
    "href": "api/MoreStructures.Tests.SuffixStructures.Conversions.PartiallyIterativeConverterTests.html",
    "title": "Class PartiallyIterativeConverterTests",
    "keywords": "Class PartiallyIterativeConverterTests Runs tests defined in ConverterTests for PartiallyIterativeConverter . Inheritance System.Object ConverterTests PartiallyIterativeConverterTests Inherited Members ConverterTests.TreeToTrie_IsCorrect(ConversionEquivalences.EquivalenceId) ConverterTests.TreeToTrie_OnlySupportsLeafAndIntermediateNodes_AsArgument() ConverterTests.TreeToTrie_OnlySupportsLeafAndIntermediateNodes_DeepInTheStructure() ConverterTests.Converter ConverterTests.TrieToTree_IsCorrect(ConversionEquivalences.EquivalenceId) ConverterTests.TrieToTree_OnlySupportsLeafAndIntermediateNodes_AsArgument() ConverterTests.TrieToTree_OnlySupportsLeafAndIntermediateNodes_DeepInTheStructure() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.SuffixStructures.Conversions Assembly : MoreStructures.Tests.dll Syntax public class PartiallyIterativeConverterTests : ConverterTests Constructors | Improve this Doc View Source PartiallyIterativeConverterTests() Declaration public PartiallyIterativeConverterTests() Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.Tests.SuffixStructures.html": {
    "href": "api/MoreStructures.Tests.SuffixStructures.html",
    "title": "Namespace MoreStructures.Tests.SuffixStructures",
    "keywords": "Namespace MoreStructures.Tests.SuffixStructures Classes AdjacencyOrdersTests BuilderExtensionsTests SuffixStructuresEdgeExtensionsTests SuffixStructuresNodeExtensionsTests SuffixStructuresTreePathExtensionsTests"
  },
  "api/MoreStructures.Tests.SuffixStructures.SuffixStructuresEdgeExtensionsTests.html": {
    "href": "api/MoreStructures.Tests.SuffixStructures.SuffixStructuresEdgeExtensionsTests.html",
    "title": "Class SuffixStructuresEdgeExtensionsTests",
    "keywords": "Class SuffixStructuresEdgeExtensionsTests Inheritance System.Object SuffixStructuresEdgeExtensionsTests Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.SuffixStructures Assembly : MoreStructures.Tests.dll Syntax public class SuffixStructuresEdgeExtensionsTests Methods | Improve this Doc View Source ContainsIndex_IsCorrect() Declaration public void ContainsIndex_IsCorrect() | Improve this Doc View Source ContainsIndex_ThrowsExceptionOnInvalidIndex() Declaration public void ContainsIndex_ThrowsExceptionOnInvalidIndex() | Improve this Doc View Source ContainsIndexesNonBiggerThan_IsCorrect() Declaration public void ContainsIndexesNonBiggerThan_IsCorrect() | Improve this Doc View Source ContainsIndexesNonBiggerThan_ThrowsExceptionOnInvalidIndex() Declaration public void ContainsIndexesNonBiggerThan_ThrowsExceptionOnInvalidIndex() | Improve this Doc View Source IsAdjacentTo_IsCorrect() Declaration public void IsAdjacentTo_IsCorrect() Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.Tests.SuffixStructures.SuffixStructuresNodeExtensionsTests.html": {
    "href": "api/MoreStructures.Tests.SuffixStructures.SuffixStructuresNodeExtensionsTests.html",
    "title": "Class SuffixStructuresNodeExtensionsTests",
    "keywords": "Class SuffixStructuresNodeExtensionsTests Inheritance System.Object SuffixStructuresNodeExtensionsTests Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.SuffixStructures Assembly : MoreStructures.Tests.dll Syntax public class SuffixStructuresNodeExtensionsTests Methods | Improve this Doc View Source GetAllSuffixesFor_IsCorrectWithTrees() Declaration public void GetAllSuffixesFor_IsCorrectWithTrees() | Improve this Doc View Source GetAllSuffixesFor_IsCorrectWithTries() Declaration public void GetAllSuffixesFor_IsCorrectWithTries() Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.Tests.SuffixStructures.SuffixStructuresTreePathExtensionsTests.html": {
    "href": "api/MoreStructures.Tests.SuffixStructures.SuffixStructuresTreePathExtensionsTests.html",
    "title": "Class SuffixStructuresTreePathExtensionsTests",
    "keywords": "Class SuffixStructuresTreePathExtensionsTests Inheritance System.Object SuffixStructuresTreePathExtensionsTests Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.SuffixStructures Assembly : MoreStructures.Tests.dll Syntax public class SuffixStructuresTreePathExtensionsTests Methods | Improve this Doc View Source ContainsIndex_IsAlwaysFalseOnAEmptyPath() Declaration public void ContainsIndex_IsAlwaysFalseOnAEmptyPath() | Improve this Doc View Source ContainsIndex_IsCorrect() Declaration public void ContainsIndex_IsCorrect() | Improve this Doc View Source ContainsIndex_ThrowsExceptionOnInvalidIndex() Declaration public void ContainsIndex_ThrowsExceptionOnInvalidIndex() | Improve this Doc View Source ContainsIndexesNonBiggerThan_IsAlwaysFalseOnAEmptyPath() Declaration public void ContainsIndexesNonBiggerThan_IsAlwaysFalseOnAEmptyPath() | Improve this Doc View Source ContainsIndexesNonBiggerThan_IsCorrect() Declaration public void ContainsIndexesNonBiggerThan_IsCorrect() | Improve this Doc View Source ContainsIndexesNonBiggerThan_ThrowsExceptionOnInvalidIndex() Declaration public void ContainsIndexesNonBiggerThan_ThrowsExceptionOnInvalidIndex() | Improve this Doc View Source IsSuffixOf_IsCorrectForNonEmtpyPath() Declaration public void IsSuffixOf_IsCorrectForNonEmtpyPath() | Improve this Doc View Source IsSuffixOf_IsTrueForEmtpyPath() Declaration public void IsSuffixOf_IsTrueForEmtpyPath() | Improve this Doc View Source SuffixFor_IsCorrectForEmptyPath() Declaration public void SuffixFor_IsCorrectForEmptyPath() | Improve this Doc View Source SuffixFor_IsCorrectForNonEmptyPathOnSuffixTree() Declaration public void SuffixFor_IsCorrectForNonEmptyPathOnSuffixTree() | Improve this Doc View Source SuffixFor_IsCorrectForNonEmptyPathOnSuffixTrie() Declaration public void SuffixFor_IsCorrectForNonEmptyPathOnSuffixTrie() Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.Tests.SuffixTrees.Builders.BuilderEquivalences.EquivalenceId.html": {
    "href": "api/MoreStructures.Tests.SuffixTrees.Builders.BuilderEquivalences.EquivalenceId.html",
    "title": "Enum BuilderEquivalences.EquivalenceId",
    "keywords": "Enum BuilderEquivalences.EquivalenceId Namespace : MoreStructures.Tests.SuffixTrees.Builders Assembly : MoreStructures.Tests.dll Syntax public enum EquivalenceId Fields Name Description EmptyString EmptyStrings Issue75_BreakingUkkonen OneEmptyOneNonEmpty OneNonEmptyOneEmpty SingleChar ThreeChars_ExtendingPrefixes ThreeCharsString_DifferentPrefixes ThreeCharsString_PartiallySamePrefixes ThreeCharsString_SamePrefixes ThreeDifferent ThreeSame TwoChars_ExtendingPrefixes TwoCharsString_DifferentPrefixes TwoCharsString_SamePrefixes TwoEmptyOneNonEmpty TwoEmptyOneNonEmptyDifferentOrder TwoNonSharingChars TwoSame TwoSameOneDifferent TwoSharingChars Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, BuilderEquivalences.EquivalenceId>(TextWithTerminator)"
  },
  "api/MoreStructures.Tests.SuffixTrees.Builders.BuilderEquivalences.EquivalenceValue.html": {
    "href": "api/MoreStructures.Tests.SuffixTrees.Builders.BuilderEquivalences.EquivalenceValue.html",
    "title": "Class BuilderEquivalences.EquivalenceValue",
    "keywords": "Class BuilderEquivalences.EquivalenceValue Inheritance System.Object BuilderEquivalences.EquivalenceValue Implements System.IEquatable < BuilderEquivalences.EquivalenceValue > Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.SuffixTrees.Builders Assembly : MoreStructures.Tests.dll Syntax public class EquivalenceValue : IEquatable<BuilderEquivalences.EquivalenceValue> Constructors | Improve this Doc View Source EquivalenceValue(TextWithTerminator[], SuffixTreeNode) Declaration public EquivalenceValue(TextWithTerminator[] Texts, SuffixTreeNode TreeNode) Parameters Type Name Description TextWithTerminator [] Texts SuffixTreeNode TreeNode Properties | Improve this Doc View Source Texts Declaration public TextWithTerminator[] Texts { get; set; } Property Value Type Description TextWithTerminator [] | Improve this Doc View Source TreeNode Declaration public SuffixTreeNode TreeNode { get; set; } Property Value Type Description SuffixTreeNode Implements System.IEquatable<T> Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.Tests.SuffixTrees.Builders.BuilderEquivalences.html": {
    "href": "api/MoreStructures.Tests.SuffixTrees.Builders.BuilderEquivalences.html",
    "title": "Class BuilderEquivalences",
    "keywords": "Class BuilderEquivalences Inheritance System.Object BuilderEquivalences Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.SuffixTrees.Builders Assembly : MoreStructures.Tests.dll Syntax public static class BuilderEquivalences Fields | Improve this Doc View Source Equivalences Declaration public static readonly Dictionary<BuilderEquivalences.EquivalenceId, BuilderEquivalences.EquivalenceValue> Equivalences Field Value Type Description Dictionary < BuilderEquivalences.EquivalenceId , BuilderEquivalences.EquivalenceValue >"
  },
  "api/MoreStructures.Tests.SuffixTrees.Builders.html": {
    "href": "api/MoreStructures.Tests.SuffixTrees.Builders.html",
    "title": "Namespace MoreStructures.Tests.SuffixTrees.Builders",
    "keywords": "Namespace MoreStructures.Tests.SuffixTrees.Builders Classes BuilderEquivalences BuilderEquivalences.EquivalenceValue NaivePartiallyRecursiveSuffixTreeBuilderTests SuffixTreeBuilderTests UkkonenSuffixTreeBuilderTests Enums BuilderEquivalences.EquivalenceId"
  },
  "api/MoreStructures.Tests.SuffixTrees.Builders.NaivePartiallyRecursiveSuffixTreeBuilderTests.html": {
    "href": "api/MoreStructures.Tests.SuffixTrees.Builders.NaivePartiallyRecursiveSuffixTreeBuilderTests.html",
    "title": "Class NaivePartiallyRecursiveSuffixTreeBuilderTests",
    "keywords": "Class NaivePartiallyRecursiveSuffixTreeBuilderTests Inheritance System.Object SuffixTreeBuilderTests NaivePartiallyRecursiveSuffixTreeBuilderTests Inherited Members SuffixTreeBuilderTests.NodeToLeafPathsBuilder SuffixTreeBuilderTests.Builder SuffixTreeBuilderTests.BuildTree_IsCorrectWithSingleText(BuilderEquivalences.EquivalenceId) SuffixTreeBuilderTests.BuildTree_IsCorrectWithMultipleTexts(BuilderEquivalences.EquivalenceId) SuffixTreeBuilderTests.BuildTree_StringIncludingTerminator() SuffixTreeBuilderTests.BuildTree_ReturnsOnlySuffixes() SuffixTreeBuilderTests.BuildTree_ReturnsAllSuffixes() SuffixTreeBuilderTests.BuildTree_UsesTerminatorForMatchToDistinguishSuffixesFromAnySubstring() SuffixTreeBuilderTests.BuildTree_StartLeftNullAtNonLeafNodes() SuffixTreeBuilderTests.BuildTree_StartCorrectlySetAtLeafNodes() SuffixTreeBuilderTests.BuildTree_BuildsExampleTreeFromExampleText() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.SuffixTrees.Builders Assembly : MoreStructures.Tests.dll Syntax public class NaivePartiallyRecursiveSuffixTreeBuilderTests : SuffixTreeBuilderTests Constructors | Improve this Doc View Source NaivePartiallyRecursiveSuffixTreeBuilderTests() Declaration public NaivePartiallyRecursiveSuffixTreeBuilderTests() Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.Tests.SuffixTrees.Builders.SuffixTreeBuilderTests.html": {
    "href": "api/MoreStructures.Tests.SuffixTrees.Builders.SuffixTreeBuilderTests.html",
    "title": "Class SuffixTreeBuilderTests",
    "keywords": "Class SuffixTreeBuilderTests Inheritance System.Object SuffixTreeBuilderTests NaivePartiallyRecursiveSuffixTreeBuilderTests UkkonenSuffixTreeBuilderTests Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.SuffixTrees.Builders Assembly : MoreStructures.Tests.dll Syntax public abstract class SuffixTreeBuilderTests Constructors | Improve this Doc View Source SuffixTreeBuilderTests(IBuilder<SuffixTreeEdge, SuffixTreeNode>) Declaration public SuffixTreeBuilderTests(IBuilder<SuffixTreeEdge, SuffixTreeNode> builder) Parameters Type Name Description IBuilder < SuffixTreeEdge , SuffixTreeNode > builder Fields | Improve this Doc View Source Builder Declaration protected readonly IBuilder<SuffixTreeEdge, SuffixTreeNode> Builder Field Value Type Description IBuilder < SuffixTreeEdge , SuffixTreeNode > | Improve this Doc View Source NodeToLeafPathsBuilder Declaration protected static readonly INodeToLeafPathsBuilder NodeToLeafPathsBuilder Field Value Type Description INodeToLeafPathsBuilder Methods | Improve this Doc View Source BuildTree_BuildsExampleTreeFromExampleText() Declaration public void BuildTree_BuildsExampleTreeFromExampleText() | Improve this Doc View Source BuildTree_IsCorrectWithMultipleTexts(BuilderEquivalences.EquivalenceId) Declaration public void BuildTree_IsCorrectWithMultipleTexts(BuilderEquivalences.EquivalenceId equivalenceId) Parameters Type Name Description BuilderEquivalences.EquivalenceId equivalenceId | Improve this Doc View Source BuildTree_IsCorrectWithSingleText(BuilderEquivalences.EquivalenceId) Declaration public void BuildTree_IsCorrectWithSingleText(BuilderEquivalences.EquivalenceId equivalenceId) Parameters Type Name Description BuilderEquivalences.EquivalenceId equivalenceId | Improve this Doc View Source BuildTree_ReturnsAllSuffixes() Declaration public void BuildTree_ReturnsAllSuffixes() | Improve this Doc View Source BuildTree_ReturnsOnlySuffixes() Declaration public void BuildTree_ReturnsOnlySuffixes() | Improve this Doc View Source BuildTree_StartCorrectlySetAtLeafNodes() Declaration public void BuildTree_StartCorrectlySetAtLeafNodes() | Improve this Doc View Source BuildTree_StartLeftNullAtNonLeafNodes() Declaration public void BuildTree_StartLeftNullAtNonLeafNodes() | Improve this Doc View Source BuildTree_StringIncludingTerminator() Declaration public void BuildTree_StringIncludingTerminator() | Improve this Doc View Source BuildTree_UsesTerminatorForMatchToDistinguishSuffixesFromAnySubstring() Declaration public void BuildTree_UsesTerminatorForMatchToDistinguishSuffixesFromAnySubstring() Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.Tests.SuffixTrees.Builders.Ukkonen.html": {
    "href": "api/MoreStructures.Tests.SuffixTrees.Builders.Ukkonen.html",
    "title": "Namespace MoreStructures.Tests.SuffixTrees.Builders.Ukkonen",
    "keywords": "Namespace MoreStructures.Tests.SuffixTrees.Builders.Ukkonen Classes IterationStateTests MutableEdgeTests"
  },
  "api/MoreStructures.Tests.SuffixTrees.Builders.Ukkonen.IterationStateTests.html": {
    "href": "api/MoreStructures.Tests.SuffixTrees.Builders.Ukkonen.IterationStateTests.html",
    "title": "Class IterationStateTests",
    "keywords": "Class IterationStateTests Inheritance System.Object IterationStateTests Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.SuffixTrees.Builders.Ukkonen Assembly : MoreStructures.Tests.dll Syntax public class IterationStateTests Methods | Improve this Doc View Source ActivePointFollowedByCurrentChar_NullAtStart() Declaration public void ActivePointFollowedByCurrentChar_NullAtStart() | Improve this Doc View Source ActivePointFollowedByCurrentChar_ThrowsExceptionBeforeStartingAPhase() Declaration public void ActivePointFollowedByCurrentChar_ThrowsExceptionBeforeStartingAPhase() | Improve this Doc View Source ActivePointFollowedByCurrentChar_WhenActivePointIsDefined_FalseCases() Declaration public void ActivePointFollowedByCurrentChar_WhenActivePointIsDefined_FalseCases() | Improve this Doc View Source ActivePointFollowedByCurrentChar_WhenActivePointIsDefined_TrueCases() Declaration public void ActivePointFollowedByCurrentChar_WhenActivePointIsDefined_TrueCases() | Improve this Doc View Source InitializeActiveEdgeAndLength_ThrowsExceptionWhenInvalidActivePoint() Declaration public void InitializeActiveEdgeAndLength_ThrowsExceptionWhenInvalidActivePoint() | Improve this Doc View Source IsThereANextPhase_IsCorrect() Declaration public void IsThereANextPhase_IsCorrect() | Improve this Doc View Source Root_IsSetOnConstruction() Declaration public void Root_IsSetOnConstruction() | Improve this Doc View Source StillRemainingSuffixesInCurrentPhase_AccessProtectedWhenNotInPhase() Declaration public void StillRemainingSuffixesInCurrentPhase_AccessProtectedWhenNotInPhase() | Improve this Doc View Source Text_IsSetOnConstruction() Declaration public void Text_IsSetOnConstruction() Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.Tests.SuffixTrees.Builders.Ukkonen.MutableEdgeTests.html": {
    "href": "api/MoreStructures.Tests.SuffixTrees.Builders.Ukkonen.MutableEdgeTests.html",
    "title": "Class MutableEdgeTests",
    "keywords": "Class MutableEdgeTests Inheritance System.Object MutableEdgeTests Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.SuffixTrees.Builders.Ukkonen Assembly : MoreStructures.Tests.dll Syntax public class MutableEdgeTests Methods | Improve this Doc View Source Equals_BasedOnStartAndEndValue() Declaration public void Equals_BasedOnStartAndEndValue() | Improve this Doc View Source GetHashCode_DoesntChangeWhenMovingEnd() Declaration public void GetHashCode_DoesntChangeWhenMovingEnd() Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.Tests.SuffixTrees.Builders.UkkonenSuffixTreeBuilderTests.html": {
    "href": "api/MoreStructures.Tests.SuffixTrees.Builders.UkkonenSuffixTreeBuilderTests.html",
    "title": "Class UkkonenSuffixTreeBuilderTests",
    "keywords": "Class UkkonenSuffixTreeBuilderTests Inheritance System.Object SuffixTreeBuilderTests UkkonenSuffixTreeBuilderTests Inherited Members SuffixTreeBuilderTests.NodeToLeafPathsBuilder SuffixTreeBuilderTests.Builder SuffixTreeBuilderTests.BuildTree_IsCorrectWithSingleText(BuilderEquivalences.EquivalenceId) SuffixTreeBuilderTests.BuildTree_IsCorrectWithMultipleTexts(BuilderEquivalences.EquivalenceId) SuffixTreeBuilderTests.BuildTree_StringIncludingTerminator() SuffixTreeBuilderTests.BuildTree_ReturnsOnlySuffixes() SuffixTreeBuilderTests.BuildTree_ReturnsAllSuffixes() SuffixTreeBuilderTests.BuildTree_UsesTerminatorForMatchToDistinguishSuffixesFromAnySubstring() SuffixTreeBuilderTests.BuildTree_StartLeftNullAtNonLeafNodes() SuffixTreeBuilderTests.BuildTree_StartCorrectlySetAtLeafNodes() SuffixTreeBuilderTests.BuildTree_BuildsExampleTreeFromExampleText() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.SuffixTrees.Builders Assembly : MoreStructures.Tests.dll Syntax public class UkkonenSuffixTreeBuilderTests : SuffixTreeBuilderTests Constructors | Improve this Doc View Source UkkonenSuffixTreeBuilderTests() Declaration public UkkonenSuffixTreeBuilderTests() Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.Tests.SuffixTrees.html": {
    "href": "api/MoreStructures.Tests.SuffixTrees.html",
    "title": "Namespace MoreStructures.Tests.SuffixTrees",
    "keywords": "Namespace MoreStructures.Tests.SuffixTrees Classes SuffixTreeEdgeTests SuffixTreeNodeTests"
  },
  "api/MoreStructures.Tests.SuffixTrees.Matching.html": {
    "href": "api/MoreStructures.Tests.SuffixTrees.Matching.html",
    "title": "Namespace MoreStructures.Tests.SuffixTrees.Matching",
    "keywords": "Namespace MoreStructures.Tests.SuffixTrees.Matching Classes MatcherTests NaiveSnssFinderTests SnssFinderTests SuffixStructureBasedSnssFinderTests SuffixTreeBasedSnssFinderTests SuffixTrieBasedSnssFinderTests"
  },
  "api/MoreStructures.Tests.SuffixTrees.Matching.MatcherTests.html": {
    "href": "api/MoreStructures.Tests.SuffixTrees.Matching.MatcherTests.html",
    "title": "Class MatcherTests",
    "keywords": "Class MatcherTests Inheritance System.Object MatcherTests Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.SuffixTrees.Matching Assembly : MoreStructures.Tests.dll Syntax public class MatcherTests Methods | Improve this Doc View Source BuildTree_UsesTerminatorForMatchToDistinguishSuffixesFromAnySubstring() Declaration public void BuildTree_UsesTerminatorForMatchToDistinguishSuffixesFromAnySubstring() | Improve this Doc View Source Match_Preconditions() Declaration public void Match_Preconditions() | Improve this Doc View Source Match_SuccessAndMatchedCharsIsCorrect() Declaration public void Match_SuccessAndMatchedCharsIsCorrect() | Improve this Doc View Source Match_SuccessBeginAndPathIsCorrect() Declaration public void Match_SuccessBeginAndPathIsCorrect() | Improve this Doc View Source Match_UnsuccessAndMatchedCharsIsCorrect() Declaration public void Match_UnsuccessAndMatchedCharsIsCorrect() Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.Tests.SuffixTrees.Matching.NaiveSnssFinderTests.html": {
    "href": "api/MoreStructures.Tests.SuffixTrees.Matching.NaiveSnssFinderTests.html",
    "title": "Class NaiveSnssFinderTests",
    "keywords": "Class NaiveSnssFinderTests Inheritance System.Object SnssFinderTests NaiveSnssFinderTests Inherited Members SnssFinderTests.Finder SnssFinderTests.Find_IsCorrect(String, String, String[]) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.SuffixTrees.Matching Assembly : MoreStructures.Tests.dll Syntax public class NaiveSnssFinderTests : SnssFinderTests Constructors | Improve this Doc View Source NaiveSnssFinderTests() Declaration public NaiveSnssFinderTests() Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.Tests.SuffixTrees.Matching.SnssFinderTests.html": {
    "href": "api/MoreStructures.Tests.SuffixTrees.Matching.SnssFinderTests.html",
    "title": "Class SnssFinderTests",
    "keywords": "Class SnssFinderTests Inheritance System.Object SnssFinderTests NaiveSnssFinderTests SuffixStructureBasedSnssFinderTests Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.SuffixTrees.Matching Assembly : MoreStructures.Tests.dll Syntax public abstract class SnssFinderTests Constructors | Improve this Doc View Source SnssFinderTests(ISnssFinder) Declaration protected SnssFinderTests(ISnssFinder finder) Parameters Type Name Description ISnssFinder finder Properties | Improve this Doc View Source Finder Declaration protected ISnssFinder Finder { get; } Property Value Type Description ISnssFinder Methods | Improve this Doc View Source Find_IsCorrect(String, String, String[]) Declaration public void Find_IsCorrect(string text1, string text2, string[] expectedResult) Parameters Type Name Description System.String text1 System.String text2 System.String [] expectedResult Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.Tests.SuffixTrees.Matching.SuffixStructureBasedSnssFinderTests.html": {
    "href": "api/MoreStructures.Tests.SuffixTrees.Matching.SuffixStructureBasedSnssFinderTests.html",
    "title": "Class SuffixStructureBasedSnssFinderTests",
    "keywords": "Class SuffixStructureBasedSnssFinderTests Inheritance System.Object SnssFinderTests SuffixStructureBasedSnssFinderTests SuffixTreeBasedSnssFinderTests SuffixTrieBasedSnssFinderTests Inherited Members SnssFinderTests.Finder SnssFinderTests.Find_IsCorrect(String, String, String[]) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.SuffixTrees.Matching Assembly : MoreStructures.Tests.dll Syntax public abstract class SuffixStructureBasedSnssFinderTests : SnssFinderTests Constructors | Improve this Doc View Source SuffixStructureBasedSnssFinderTests(ISnssFinder) Declaration protected SuffixStructureBasedSnssFinderTests(ISnssFinder finder) Parameters Type Name Description ISnssFinder finder Fields | Improve this Doc View Source DefaultTerminator1 Declaration protected const char DefaultTerminator1 = '#' Field Value Type Description System.Char | Improve this Doc View Source DefaultTerminator2 Declaration protected const char DefaultTerminator2 = '$' Field Value Type Description System.Char Methods | Improve this Doc View Source Find_RaiseExceptionWhenAnyTerminatorIsInAnyText() Declaration public void Find_RaiseExceptionWhenAnyTerminatorIsInAnyText() Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.Tests.SuffixTrees.Matching.SuffixTreeBasedSnssFinderTests.html": {
    "href": "api/MoreStructures.Tests.SuffixTrees.Matching.SuffixTreeBasedSnssFinderTests.html",
    "title": "Class SuffixTreeBasedSnssFinderTests",
    "keywords": "Class SuffixTreeBasedSnssFinderTests Inheritance System.Object SnssFinderTests SuffixStructureBasedSnssFinderTests SuffixTreeBasedSnssFinderTests Inherited Members SuffixStructureBasedSnssFinderTests.DefaultTerminator1 SuffixStructureBasedSnssFinderTests.DefaultTerminator2 SuffixStructureBasedSnssFinderTests.Find_RaiseExceptionWhenAnyTerminatorIsInAnyText() SnssFinderTests.Finder SnssFinderTests.Find_IsCorrect(String, String, String[]) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.SuffixTrees.Matching Assembly : MoreStructures.Tests.dll Syntax public class SuffixTreeBasedSnssFinderTests : SuffixStructureBasedSnssFinderTests Constructors | Improve this Doc View Source SuffixTreeBasedSnssFinderTests() Declaration public SuffixTreeBasedSnssFinderTests() Methods | Improve this Doc View Source Ctor_RaiseExceptionWhenTerminatorsAreEqual() Declaration public void Ctor_RaiseExceptionWhenTerminatorsAreEqual() Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.Tests.SuffixTrees.Matching.SuffixTrieBasedSnssFinderTests.html": {
    "href": "api/MoreStructures.Tests.SuffixTrees.Matching.SuffixTrieBasedSnssFinderTests.html",
    "title": "Class SuffixTrieBasedSnssFinderTests",
    "keywords": "Class SuffixTrieBasedSnssFinderTests Inheritance System.Object SnssFinderTests SuffixStructureBasedSnssFinderTests SuffixTrieBasedSnssFinderTests Inherited Members SuffixStructureBasedSnssFinderTests.DefaultTerminator1 SuffixStructureBasedSnssFinderTests.DefaultTerminator2 SuffixStructureBasedSnssFinderTests.Find_RaiseExceptionWhenAnyTerminatorIsInAnyText() SnssFinderTests.Finder SnssFinderTests.Find_IsCorrect(String, String, String[]) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.SuffixTrees.Matching Assembly : MoreStructures.Tests.dll Syntax public class SuffixTrieBasedSnssFinderTests : SuffixStructureBasedSnssFinderTests Constructors | Improve this Doc View Source SuffixTrieBasedSnssFinderTests() Declaration public SuffixTrieBasedSnssFinderTests() Methods | Improve this Doc View Source Ctor_RaiseExceptionWhenTerminatorsAreEqual() Declaration public void Ctor_RaiseExceptionWhenTerminatorsAreEqual() Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.Tests.SuffixTrees.SuffixTreeEdgeTests.html": {
    "href": "api/MoreStructures.Tests.SuffixTrees.SuffixTreeEdgeTests.html",
    "title": "Class SuffixTreeEdgeTests",
    "keywords": "Class SuffixTreeEdgeTests Inheritance System.Object SuffixTreeEdgeTests Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.SuffixTrees Assembly : MoreStructures.Tests.dll Syntax public class SuffixTreeEdgeTests Methods | Improve this Doc View Source CompareTo_IsCorrect() Declaration public void CompareTo_IsCorrect() | Improve this Doc View Source Ctor_ValidIndex() Declaration public void Ctor_ValidIndex() | Improve this Doc View Source Ctor_ZeroLengthIsValid() Declaration public void Ctor_ZeroLengthIsValid() | Improve this Doc View Source Of_InboundIndexes() Declaration public void Of_InboundIndexes() | Improve this Doc View Source Of_OutOfBoundsIndexes() Declaration public void Of_OutOfBoundsIndexes() | Improve this Doc View Source OfRotated_InboundIndexes() Declaration public void OfRotated_InboundIndexes() | Improve this Doc View Source OfRotated_OutOfBoundsIndexes() Declaration public void OfRotated_OutOfBoundsIndexes() | Improve this Doc View Source ToString_OfEquivalentInstancesAreTheSame() Declaration public void ToString_OfEquivalentInstancesAreTheSame() | Improve this Doc View Source ToString_WithDifferentStartOrLengthAreDifferent() Declaration public void ToString_WithDifferentStartOrLengthAreDifferent() Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.Tests.SuffixTrees.SuffixTreeNodeTests.html": {
    "href": "api/MoreStructures.Tests.SuffixTrees.SuffixTreeNodeTests.html",
    "title": "Class SuffixTreeNodeTests",
    "keywords": "Class SuffixTreeNodeTests Inheritance System.Object SuffixTreeNodeTests Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.SuffixTrees Assembly : MoreStructures.Tests.dll Syntax public class SuffixTreeNodeTests Methods | Improve this Doc View Source Children_Immutability_FromCtorParam() Declaration public void Children_Immutability_FromCtorParam() | Improve this Doc View Source Children_Immutability_OnGet() Declaration public void Children_Immutability_OnGet() | Improve this Doc View Source Ctor_InvalidArguments() Declaration public void Ctor_InvalidArguments() | Improve this Doc View Source Equality_IsAlwaysByValue() Declaration public void Equality_IsAlwaysByValue() | Improve this Doc View Source Indexer_RetrievesChild() Declaration public void Indexer_RetrievesChild() | Improve this Doc View Source ToString_IsTheSameOnEquivalentTrees() Declaration public void ToString_IsTheSameOnEquivalentTrees() | Improve this Doc View Source ToString_OnLeafIncludesStart() Declaration public void ToString_OnLeafIncludesStart() Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.Tests.SuffixTries.Builders.BuilderEquivalences.EquivalenceId.html": {
    "href": "api/MoreStructures.Tests.SuffixTries.Builders.BuilderEquivalences.EquivalenceId.html",
    "title": "Enum BuilderEquivalences.EquivalenceId",
    "keywords": "Enum BuilderEquivalences.EquivalenceId Namespace : MoreStructures.Tests.SuffixTries.Builders Assembly : MoreStructures.Tests.dll Syntax public enum EquivalenceId Fields Name Description EmptyStrings OneEmptyOneNonEmpty OneNonEmptyOneEmpty ThreeDifferent ThreeSame TwoEmptyOneNonEmpty TwoEmptyOneNonEmptyDifferentOrder TwoNonSharingChars TwoSame TwoSameOneDifferent TwoSharingChars Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, BuilderEquivalences.EquivalenceId>(TextWithTerminator)"
  },
  "api/MoreStructures.Tests.SuffixTries.Builders.BuilderEquivalences.EquivalenceValue.html": {
    "href": "api/MoreStructures.Tests.SuffixTries.Builders.BuilderEquivalences.EquivalenceValue.html",
    "title": "Class BuilderEquivalences.EquivalenceValue",
    "keywords": "Class BuilderEquivalences.EquivalenceValue Inheritance System.Object BuilderEquivalences.EquivalenceValue Implements System.IEquatable < BuilderEquivalences.EquivalenceValue > Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.SuffixTries.Builders Assembly : MoreStructures.Tests.dll Syntax public class EquivalenceValue : IEquatable<BuilderEquivalences.EquivalenceValue> Constructors | Improve this Doc View Source EquivalenceValue(TextWithTerminator[], SuffixTrieNode) Declaration public EquivalenceValue(TextWithTerminator[] Texts, SuffixTrieNode TreeNode) Parameters Type Name Description TextWithTerminator [] Texts SuffixTrieNode TreeNode Properties | Improve this Doc View Source Texts Declaration public TextWithTerminator[] Texts { get; set; } Property Value Type Description TextWithTerminator [] | Improve this Doc View Source TreeNode Declaration public SuffixTrieNode TreeNode { get; set; } Property Value Type Description SuffixTrieNode Implements System.IEquatable<T> Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.Tests.SuffixTries.Builders.BuilderEquivalences.html": {
    "href": "api/MoreStructures.Tests.SuffixTries.Builders.BuilderEquivalences.html",
    "title": "Class BuilderEquivalences",
    "keywords": "Class BuilderEquivalences Inheritance System.Object BuilderEquivalences Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.SuffixTries.Builders Assembly : MoreStructures.Tests.dll Syntax public static class BuilderEquivalences Fields | Improve this Doc View Source Equivalences Declaration public static readonly Dictionary<BuilderEquivalences.EquivalenceId, BuilderEquivalences.EquivalenceValue> Equivalences Field Value Type Description Dictionary < BuilderEquivalences.EquivalenceId , BuilderEquivalences.EquivalenceValue >"
  },
  "api/MoreStructures.Tests.SuffixTries.Builders.html": {
    "href": "api/MoreStructures.Tests.SuffixTries.Builders.html",
    "title": "Namespace MoreStructures.Tests.SuffixTries.Builders",
    "keywords": "Namespace MoreStructures.Tests.SuffixTries.Builders Classes BuilderEquivalences BuilderEquivalences.EquivalenceValue NaivePartiallyRecursiveSuffixTrieBuilderTests SuffixTrieBuilderTests Enums BuilderEquivalences.EquivalenceId"
  },
  "api/MoreStructures.Tests.SuffixTries.Builders.NaivePartiallyRecursiveSuffixTrieBuilderTests.html": {
    "href": "api/MoreStructures.Tests.SuffixTries.Builders.NaivePartiallyRecursiveSuffixTrieBuilderTests.html",
    "title": "Class NaivePartiallyRecursiveSuffixTrieBuilderTests",
    "keywords": "Class NaivePartiallyRecursiveSuffixTrieBuilderTests Inheritance System.Object SuffixTrieBuilderTests NaivePartiallyRecursiveSuffixTrieBuilderTests Inherited Members SuffixTrieBuilderTests.NodeToLeafPathsBuilder SuffixTrieBuilderTests.BuildTree_WithTextWithTerminatorInput() SuffixTrieBuilderTests.BuildTree_EmptyString() SuffixTrieBuilderTests.BuildTree_StringIncludingTerminator() SuffixTrieBuilderTests.BuildTree_SingleCharString() SuffixTrieBuilderTests.BuildTree_TwoCharsString_DifferentPrefixes() SuffixTrieBuilderTests.BuildTree_TwoCharsString_SamePrefixes() SuffixTrieBuilderTests.BuildTree_ThreeCharsString_SamePrefixes() SuffixTrieBuilderTests.BuildTree_ThreeCharsString_PartiallySamePrefixes() SuffixTrieBuilderTests.BuildTree_ThreeCharsString_DifferentPrefixes() SuffixTrieBuilderTests.BuildTree_ReturnsOnlySuffixes() SuffixTrieBuilderTests.BuildTree_ReturnsAllSuffixes() SuffixTrieBuilderTests.BuildTree_StartLeftNullAtNonLeafNodes() SuffixTrieBuilderTests.BuildTree_StartCorrectlySetAtLeafNodes() SuffixTrieBuilderTests.BuildTree_BuildsExampleTrieFromExampleText() SuffixTrieBuilderTests.BuildTree_IsCorrectWithMultipleTexts(BuilderEquivalences.EquivalenceId) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.SuffixTries.Builders Assembly : MoreStructures.Tests.dll Syntax public class NaivePartiallyRecursiveSuffixTrieBuilderTests : SuffixTrieBuilderTests Constructors | Improve this Doc View Source NaivePartiallyRecursiveSuffixTrieBuilderTests() Declaration public NaivePartiallyRecursiveSuffixTrieBuilderTests() Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.Tests.SuffixTries.Builders.SuffixTrieBuilderTests.html": {
    "href": "api/MoreStructures.Tests.SuffixTries.Builders.SuffixTrieBuilderTests.html",
    "title": "Class SuffixTrieBuilderTests",
    "keywords": "Class SuffixTrieBuilderTests Inheritance System.Object SuffixTrieBuilderTests NaivePartiallyRecursiveSuffixTrieBuilderTests Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.SuffixTries.Builders Assembly : MoreStructures.Tests.dll Syntax public abstract class SuffixTrieBuilderTests Constructors | Improve this Doc View Source SuffixTrieBuilderTests(IBuilder<SuffixTrieEdge, SuffixTrieNode>) Declaration public SuffixTrieBuilderTests(IBuilder<SuffixTrieEdge, SuffixTrieNode> builder) Parameters Type Name Description IBuilder < SuffixTrieEdge , SuffixTrieNode > builder Fields | Improve this Doc View Source NodeToLeafPathsBuilder Declaration protected static readonly INodeToLeafPathsBuilder NodeToLeafPathsBuilder Field Value Type Description INodeToLeafPathsBuilder Methods | Improve this Doc View Source BuildTree_BuildsExampleTrieFromExampleText() Declaration public void BuildTree_BuildsExampleTrieFromExampleText() | Improve this Doc View Source BuildTree_EmptyString() Declaration public void BuildTree_EmptyString() | Improve this Doc View Source BuildTree_IsCorrectWithMultipleTexts(BuilderEquivalences.EquivalenceId) Declaration public void BuildTree_IsCorrectWithMultipleTexts(BuilderEquivalences.EquivalenceId equivalenceId) Parameters Type Name Description BuilderEquivalences.EquivalenceId equivalenceId | Improve this Doc View Source BuildTree_ReturnsAllSuffixes() Declaration public void BuildTree_ReturnsAllSuffixes() | Improve this Doc View Source BuildTree_ReturnsOnlySuffixes() Declaration public void BuildTree_ReturnsOnlySuffixes() | Improve this Doc View Source BuildTree_SingleCharString() Declaration public void BuildTree_SingleCharString() | Improve this Doc View Source BuildTree_StartCorrectlySetAtLeafNodes() Declaration public void BuildTree_StartCorrectlySetAtLeafNodes() | Improve this Doc View Source BuildTree_StartLeftNullAtNonLeafNodes() Declaration public void BuildTree_StartLeftNullAtNonLeafNodes() | Improve this Doc View Source BuildTree_StringIncludingTerminator() Declaration public void BuildTree_StringIncludingTerminator() | Improve this Doc View Source BuildTree_ThreeCharsString_DifferentPrefixes() Declaration public void BuildTree_ThreeCharsString_DifferentPrefixes() | Improve this Doc View Source BuildTree_ThreeCharsString_PartiallySamePrefixes() Declaration public void BuildTree_ThreeCharsString_PartiallySamePrefixes() | Improve this Doc View Source BuildTree_ThreeCharsString_SamePrefixes() Declaration public void BuildTree_ThreeCharsString_SamePrefixes() | Improve this Doc View Source BuildTree_TwoCharsString_DifferentPrefixes() Declaration public void BuildTree_TwoCharsString_DifferentPrefixes() | Improve this Doc View Source BuildTree_TwoCharsString_SamePrefixes() Declaration public void BuildTree_TwoCharsString_SamePrefixes() | Improve this Doc View Source BuildTree_WithTextWithTerminatorInput() Declaration public void BuildTree_WithTextWithTerminatorInput() Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.Tests.SuffixTries.html": {
    "href": "api/MoreStructures.Tests.SuffixTries.html",
    "title": "Namespace MoreStructures.Tests.SuffixTries",
    "keywords": "Namespace MoreStructures.Tests.SuffixTries Classes SuffixTrieEdgeTests SuffixTrieNodeTests"
  },
  "api/MoreStructures.Tests.SuffixTries.SuffixTrieEdgeTests.html": {
    "href": "api/MoreStructures.Tests.SuffixTries.SuffixTrieEdgeTests.html",
    "title": "Class SuffixTrieEdgeTests",
    "keywords": "Class SuffixTrieEdgeTests Inheritance System.Object SuffixTrieEdgeTests Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.SuffixTries Assembly : MoreStructures.Tests.dll Syntax public class SuffixTrieEdgeTests Methods | Improve this Doc View Source CompareTo_IsCorrect() Declaration public void CompareTo_IsCorrect() | Improve this Doc View Source Ctor_ValidIndex() Declaration public void Ctor_ValidIndex() | Improve this Doc View Source Of_InboundIndexes() Declaration public void Of_InboundIndexes() | Improve this Doc View Source Of_OutOfBoundsIndexes() Declaration public void Of_OutOfBoundsIndexes() | Improve this Doc View Source ToString_OfEquivalentInstancesAreTheSame() Declaration public void ToString_OfEquivalentInstancesAreTheSame() | Improve this Doc View Source ToString_WithDifferentStart() Declaration public void ToString_WithDifferentStart() Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.Tests.SuffixTries.SuffixTrieNodeTests.html": {
    "href": "api/MoreStructures.Tests.SuffixTries.SuffixTrieNodeTests.html",
    "title": "Class SuffixTrieNodeTests",
    "keywords": "Class SuffixTrieNodeTests Inheritance System.Object SuffixTrieNodeTests Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.SuffixTries Assembly : MoreStructures.Tests.dll Syntax public class SuffixTrieNodeTests Methods | Improve this Doc View Source Children_Immutability_FromCtorParam() Declaration public void Children_Immutability_FromCtorParam() | Improve this Doc View Source Children_ImmutabilityOnGet() Declaration public void Children_ImmutabilityOnGet() | Improve this Doc View Source Ctor_InvalidArguments() Declaration public void Ctor_InvalidArguments() | Improve this Doc View Source Equality_IsAlwaysByValue() Declaration public void Equality_IsAlwaysByValue() | Improve this Doc View Source Indexer_RetrievesChild() Declaration public void Indexer_RetrievesChild() | Improve this Doc View Source ToString_IsTheSameOnEquivalentTrees() Declaration public void ToString_IsTheSameOnEquivalentTrees() | Improve this Doc View Source ToString_OnLeafIncludesStart() Declaration public void ToString_OnLeafIncludesStart() Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.Tests.TextWithTerminatorExtensionsTests.html": {
    "href": "api/MoreStructures.Tests.TextWithTerminatorExtensionsTests.html",
    "title": "Class TextWithTerminatorExtensionsTests",
    "keywords": "Class TextWithTerminatorExtensionsTests Inheritance System.Object TextWithTerminatorExtensionsTests Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests Assembly : MoreStructures.Tests.dll Syntax public class TextWithTerminatorExtensionsTests Methods | Improve this Doc View Source GenerateFullText_IsCorrect(String, Char, String[], Char[]) Declaration public void GenerateFullText_IsCorrect(string expectedText, char expectedTerminator, string[] textContents, char[] terminators) Parameters Type Name Description System.String expectedText System.Char expectedTerminator System.String [] textContents System.Char [] terminators | Improve this Doc View Source GenerateFullText_RaiseExceptionOnRepeatedTerminators() Declaration public void GenerateFullText_RaiseExceptionOnRepeatedTerminators() | Improve this Doc View Source ToVirtuallyRotated() Declaration public void ToVirtuallyRotated() Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.Tests.TextWithTerminatorTests.html": {
    "href": "api/MoreStructures.Tests.TextWithTerminatorTests.html",
    "title": "Class TextWithTerminatorTests",
    "keywords": "Class TextWithTerminatorTests Inheritance System.Object TextWithTerminatorTests Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests Assembly : MoreStructures.Tests.dll Syntax public class TextWithTerminatorTests Methods | Improve this Doc View Source Ctor_BrokenInvariant_WithoutValidateInput() Declaration public void Ctor_BrokenInvariant_WithoutValidateInput() | Improve this Doc View Source Ctor_Preconditions_WithValidateInput() Declaration public void Ctor_Preconditions_WithValidateInput() | Improve this Doc View Source EndsWith_IsCorrect() Declaration public void EndsWith_IsCorrect() | Improve this Doc View Source GetEnumerator_Generic_IsCorrect() Declaration public void GetEnumerator_Generic_IsCorrect() | Improve this Doc View Source GetEnumerator_Generic_WorksWithLinq() Declaration public void GetEnumerator_Generic_WorksWithLinq() | Improve this Doc View Source GetEnumerator_NonGeneric_IsCorrect() Declaration public void GetEnumerator_NonGeneric_IsCorrect() | Improve this Doc View Source Indexer_WithIndexOfEnumerable() Declaration public void Indexer_WithIndexOfEnumerable() | Improve this Doc View Source Indexer_WithIndexOfString() Declaration public void Indexer_WithIndexOfString() | Improve this Doc View Source Indexer_WithRangeOfEnumerable() Declaration public void Indexer_WithRangeOfEnumerable() | Improve this Doc View Source Indexer_WithRangeOfString() Declaration public void Indexer_WithRangeOfString() | Improve this Doc View Source Indexer_WithSelector() Declaration public void Indexer_WithSelector() | Improve this Doc View Source Length_IsCorrect() Declaration public void Length_IsCorrect() | Improve this Doc View Source StartsWith_IsCorrect() Declaration public void StartsWith_IsCorrect() | Improve this Doc View Source TerminatorIndex_IsCorrect() Declaration public void TerminatorIndex_IsCorrect() Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.Tests.Utilities.CharOrTerminatorComparerTests.html": {
    "href": "api/MoreStructures.Tests.Utilities.CharOrTerminatorComparerTests.html",
    "title": "Class CharOrTerminatorComparerTests",
    "keywords": "Class CharOrTerminatorComparerTests Inheritance System.Object CharOrTerminatorComparerTests Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.Utilities Assembly : MoreStructures.Tests.dll Syntax public class CharOrTerminatorComparerTests Methods | Improve this Doc View Source Compare_IsCorrect_WithTerminatorHigherInASCII() Declaration public void Compare_IsCorrect_WithTerminatorHigherInASCII() | Improve this Doc View Source Compare_IsCorrect_WithTerminatorLowerInASCII() Declaration public void Compare_IsCorrect_WithTerminatorLowerInASCII() | Improve this Doc View Source Equals_ByValue() Declaration public void Equals_ByValue() | Improve this Doc View Source GetHashCode_ByValue() Declaration public void GetHashCode_ByValue() | Improve this Doc View Source Terminator_IsSet() Declaration public void Terminator_IsSet() Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.Tests.Utilities.EnumerableExtensionsTests.html": {
    "href": "api/MoreStructures.Tests.Utilities.EnumerableExtensionsTests.html",
    "title": "Class EnumerableExtensionsTests",
    "keywords": "Class EnumerableExtensionsTests Inheritance System.Object EnumerableExtensionsTests Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.Utilities Assembly : MoreStructures.Tests.dll Syntax public class EnumerableExtensionsTests Methods | Improve this Doc View Source CountO1_DoesntEnumerateGenericIListImplementers() Declaration public void CountO1_DoesntEnumerateGenericIListImplementers() | Improve this Doc View Source CountO1_DoesntEnumerateNonGenericIListImplementers() Declaration public void CountO1_DoesntEnumerateNonGenericIListImplementers() | Improve this Doc View Source CountO1_EnumeratesGenericEnumerables() Declaration public void CountO1_EnumeratesGenericEnumerables() | Improve this Doc View Source CountO1_IsCorrectWithEmptyEnumerables() Declaration public void CountO1_IsCorrectWithEmptyEnumerables() | Improve this Doc View Source CountO1_IsCorrectWithMultipleValues() Declaration public void CountO1_IsCorrectWithMultipleValues() | Improve this Doc View Source CountO1_IsCorrectWithSingletons() Declaration public void CountO1_IsCorrectWithSingletons() | Improve this Doc View Source ElementAtO1_DoesntEnumerateGenericIListImplementers() Declaration public void ElementAtO1_DoesntEnumerateGenericIListImplementers() | Improve this Doc View Source ElementAtO1_DoesntEnumerateNonGenericIListImplementers() Declaration public void ElementAtO1_DoesntEnumerateNonGenericIListImplementers() | Improve this Doc View Source ElementAtO1_EnumeratesGenericEnumerables() Declaration public void ElementAtO1_EnumeratesGenericEnumerables() | Improve this Doc View Source ElementAtO1_IsCorrect() Declaration public void ElementAtO1_IsCorrect() | Improve this Doc View Source ElementAtO1_ThrowsExceptionForInvalidIndexes() Declaration public void ElementAtO1_ThrowsExceptionForInvalidIndexes() | Improve this Doc View Source ElementAtO1OrDefault_DoesntEnumerateGenericIListImplementers() Declaration public void ElementAtO1OrDefault_DoesntEnumerateGenericIListImplementers() | Improve this Doc View Source ElementAtO1OrDefault_DoesntEnumerateNonGenericIListImplementers() Declaration public void ElementAtO1OrDefault_DoesntEnumerateNonGenericIListImplementers() | Improve this Doc View Source ElementAtO1OrDefault_EnumeratesGenericEnumerables() Declaration public void ElementAtO1OrDefault_EnumeratesGenericEnumerables() | Improve this Doc View Source ElementAtO1OrDefault_IsCorrect() Declaration public void ElementAtO1OrDefault_IsCorrect() | Improve this Doc View Source ElementAtO1OrDefault_ReturnsDefaultForBigIndexes() Declaration public void ElementAtO1OrDefault_ReturnsDefaultForBigIndexes() | Improve this Doc View Source ElementAtO1OrDefault_ThrowsExceptionForNegativeIndexes() Declaration public void ElementAtO1OrDefault_ThrowsExceptionForNegativeIndexes() | Improve this Doc View Source EnumerateAtMostFirst_DoesntRaiseExceptionOnShorterEnumerables() Declaration public void EnumerateAtMostFirst_DoesntRaiseExceptionOnShorterEnumerables() | Improve this Doc View Source EnumerateExactlyFirst_DoesntEnumerateReminder() Declaration public void EnumerateExactlyFirst_DoesntEnumerateReminder() | Improve this Doc View Source EnumerateExactlyFirst_EnumeratesFirstNItemsCorrectly() Declaration public void EnumerateExactlyFirst_EnumeratesFirstNItemsCorrectly() | Improve this Doc View Source EnumerateExactlyFirst_RaisesExceptionOnInvalidCount() Declaration public void EnumerateExactlyFirst_RaisesExceptionOnInvalidCount() | Improve this Doc View Source EnumerateExactlyFirst_RaisesExceptionOnShorterEnumerables() Declaration public void EnumerateExactlyFirst_RaisesExceptionOnShorterEnumerables() | Improve this Doc View Source EnumerateExactlyFirst_ReminderIsCorrect() Declaration public void EnumerateExactlyFirst_ReminderIsCorrect() Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.Tests.Utilities.html": {
    "href": "api/MoreStructures.Tests.Utilities.html",
    "title": "Namespace MoreStructures.Tests.Utilities",
    "keywords": "Namespace MoreStructures.Tests.Utilities Classes CharOrTerminatorComparerTests EnumerableExtensionsTests LockValueObjectTests StringUtilitiesTests StringValueEnumerableTests ValueEnumerableExtensionsTests ValueEnumerableTests ValueReadOnlyCollectionsExtensionsTests ValueReadOnlyCollectionTests ValueReadOnlyDictionaryTests"
  },
  "api/MoreStructures.Tests.Utilities.LockValueObjectTests.html": {
    "href": "api/MoreStructures.Tests.Utilities.LockValueObjectTests.html",
    "title": "Class LockValueObjectTests",
    "keywords": "Class LockValueObjectTests Inheritance System.Object LockValueObjectTests Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.Utilities Assembly : MoreStructures.Tests.dll Syntax public class LockValueObjectTests Methods | Improve this Doc View Source Equals_IsByValue() Declaration public void Equals_IsByValue() | Improve this Doc View Source GetHashCode_IsByValue() Declaration public void GetHashCode_IsByValue() Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.Tests.Utilities.StringUtilitiesTests.html": {
    "href": "api/MoreStructures.Tests.Utilities.StringUtilitiesTests.html",
    "title": "Class StringUtilitiesTests",
    "keywords": "Class StringUtilitiesTests Inheritance System.Object StringUtilitiesTests Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.Utilities Assembly : MoreStructures.Tests.dll Syntax public class StringUtilitiesTests Methods | Improve this Doc View Source LongestPrefixInCommon_IsCorrect(String, String, Int32) Declaration public void LongestPrefixInCommon_IsCorrect(string first, string second, int expected) Parameters Type Name Description System.String first System.String second System.Int32 expected Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.Tests.Utilities.StringValueEnumerableTests.html": {
    "href": "api/MoreStructures.Tests.Utilities.StringValueEnumerableTests.html",
    "title": "Class StringValueEnumerableTests",
    "keywords": "Class StringValueEnumerableTests Inheritance System.Object StringValueEnumerableTests Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.Utilities Assembly : MoreStructures.Tests.dll Syntax public class StringValueEnumerableTests Methods | Improve this Doc View Source Equals_ByValueOnItemsOfUnderlyingEnumerable() Declaration public void Equals_ByValueOnItemsOfUnderlyingEnumerable() Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.Tests.Utilities.ValueEnumerableExtensionsTests.html": {
    "href": "api/MoreStructures.Tests.Utilities.ValueEnumerableExtensionsTests.html",
    "title": "Class ValueEnumerableExtensionsTests",
    "keywords": "Class ValueEnumerableExtensionsTests Inheritance System.Object ValueEnumerableExtensionsTests Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.Utilities Assembly : MoreStructures.Tests.dll Syntax public class ValueEnumerableExtensionsTests Methods | Improve this Doc View Source AsValue_WrapsProvidedEnumerableIntoAValueEnumerable() Declaration public void AsValue_WrapsProvidedEnumerableIntoAValueEnumerable() Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.Tests.Utilities.ValueEnumerableTests.html": {
    "href": "api/MoreStructures.Tests.Utilities.ValueEnumerableTests.html",
    "title": "Class ValueEnumerableTests",
    "keywords": "Class ValueEnumerableTests Inheritance System.Object ValueEnumerableTests Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.Utilities Assembly : MoreStructures.Tests.dll Syntax public class ValueEnumerableTests Methods | Improve this Doc View Source Ctor_DoesntEnumerateUnderlyingEnumerable() Declaration public void Ctor_DoesntEnumerateUnderlyingEnumerable() | Improve this Doc View Source Ctor_IsIdempotent() Declaration public void Ctor_IsIdempotent() | Improve this Doc View Source Equals_ByValueOnItemsOfUnderlyingEnumerable() Declaration public void Equals_ByValueOnItemsOfUnderlyingEnumerable() | Improve this Doc View Source GetEnumerator_WithGeneric_GivesItemsOfUnderlyingEnumerable() Declaration public void GetEnumerator_WithGeneric_GivesItemsOfUnderlyingEnumerable() | Improve this Doc View Source GetEnumerator_WithoutGeneric_GivesItemsOfUnderlyingEnumerable() Declaration public void GetEnumerator_WithoutGeneric_GivesItemsOfUnderlyingEnumerable() | Improve this Doc View Source GetHashCode_ByValueOnItemsOfUnderlyingEnumerable() Declaration public void GetHashCode_ByValueOnItemsOfUnderlyingEnumerable() | Improve this Doc View Source ToString_IncludesUnderlyingEnumerableToString() Declaration public void ToString_IncludesUnderlyingEnumerableToString() Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.Tests.Utilities.ValueReadOnlyCollectionsExtensionsTests.html": {
    "href": "api/MoreStructures.Tests.Utilities.ValueReadOnlyCollectionsExtensionsTests.html",
    "title": "Class ValueReadOnlyCollectionsExtensionsTests",
    "keywords": "Class ValueReadOnlyCollectionsExtensionsTests Inheritance System.Object ValueReadOnlyCollectionsExtensionsTests Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.Utilities Assembly : MoreStructures.Tests.dll Syntax public class ValueReadOnlyCollectionsExtensionsTests Methods | Improve this Doc View Source ToValueReadOnlyCollection_IsCorrect() Declaration public void ToValueReadOnlyCollection_IsCorrect() | Improve this Doc View Source ToValueReadOnlyDictionary_IsCorrectWithDictionary() Declaration public void ToValueReadOnlyDictionary_IsCorrectWithDictionary() | Improve this Doc View Source ToValueReadOnlyDictionary_IsCorrectWithEnumerable() Declaration public void ToValueReadOnlyDictionary_IsCorrectWithEnumerable() Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.Tests.Utilities.ValueReadOnlyCollectionTests.html": {
    "href": "api/MoreStructures.Tests.Utilities.ValueReadOnlyCollectionTests.html",
    "title": "Class ValueReadOnlyCollectionTests",
    "keywords": "Class ValueReadOnlyCollectionTests Inheritance System.Object ValueReadOnlyCollectionTests Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.Utilities Assembly : MoreStructures.Tests.dll Syntax public class ValueReadOnlyCollectionTests Methods | Improve this Doc View Source Ctor_EmbedInputEnumerable() Declaration public void Ctor_EmbedInputEnumerable() | Improve this Doc View Source Ctor_IndependenceFromInputEnumerable() Declaration public void Ctor_IndependenceFromInputEnumerable() | Improve this Doc View Source DifferentOperator_IsByValue() Declaration public void DifferentOperator_IsByValue() | Improve this Doc View Source Equals_CheckType() Declaration public void Equals_CheckType() | Improve this Doc View Source Equals_IsByValue() Declaration public void Equals_IsByValue() | Improve this Doc View Source Equals_IsSensitiveToTheOrderOfAddition() Declaration public void Equals_IsSensitiveToTheOrderOfAddition() | Improve this Doc View Source EqualsOperator_IsByValue() Declaration public void EqualsOperator_IsByValue() | Improve this Doc View Source GetHashCode_IsByValue_WithPrimitiveType() Declaration public void GetHashCode_IsByValue_WithPrimitiveType() | Improve this Doc View Source GetHashCode_IsByValue_WithRecordType() Declaration public void GetHashCode_IsByValue_WithRecordType() | Improve this Doc View Source GetHashCode_WorksWithEmptyCollection() Declaration public void GetHashCode_WorksWithEmptyCollection() | Improve this Doc View Source ToString_IncludesToStringOfItems() Declaration public void ToString_IncludesToStringOfItems() Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.Tests.Utilities.ValueReadOnlyDictionaryTests.html": {
    "href": "api/MoreStructures.Tests.Utilities.ValueReadOnlyDictionaryTests.html",
    "title": "Class ValueReadOnlyDictionaryTests",
    "keywords": "Class ValueReadOnlyDictionaryTests Inheritance System.Object ValueReadOnlyDictionaryTests Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests.Utilities Assembly : MoreStructures.Tests.dll Syntax public class ValueReadOnlyDictionaryTests Methods | Improve this Doc View Source Ctor_EmbedInputEnumerable() Declaration public void Ctor_EmbedInputEnumerable() | Improve this Doc View Source Ctor_IndependenceFromInputEnumerable() Declaration public void Ctor_IndependenceFromInputEnumerable() | Improve this Doc View Source Ctor_WithEnumerableOfEntries() Declaration public void Ctor_WithEnumerableOfEntries() | Improve this Doc View Source DifferentOperator_IsByValue() Declaration public void DifferentOperator_IsByValue() | Improve this Doc View Source Equals_CheckType() Declaration public void Equals_CheckType() | Improve this Doc View Source Equals_IsByValue() Declaration public void Equals_IsByValue() | Improve this Doc View Source Equals_IsInsensitiveToTheOrderOfAddition() Declaration public void Equals_IsInsensitiveToTheOrderOfAddition() | Improve this Doc View Source EqualsOperator_IsByValue() Declaration public void EqualsOperator_IsByValue() | Improve this Doc View Source GetHashCode_IsByValue_WithPrimitiveType() Declaration public void GetHashCode_IsByValue_WithPrimitiveType() | Improve this Doc View Source GetHashCode_IsByValue_WithRecordType() Declaration public void GetHashCode_IsByValue_WithRecordType() | Improve this Doc View Source GetHashCode_WorksWithEmptyDictionary() Declaration public void GetHashCode_WorksWithEmptyDictionary() | Improve this Doc View Source ToString_IncludesToStringOfKeysAndValues() Declaration public void ToString_IncludesToStringOfKeysAndValues() Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.Tests.VirtuallyRotatedTextWithTerminatorTests.html": {
    "href": "api/MoreStructures.Tests.VirtuallyRotatedTextWithTerminatorTests.html",
    "title": "Class VirtuallyRotatedTextWithTerminatorTests",
    "keywords": "Class VirtuallyRotatedTextWithTerminatorTests Inheritance System.Object VirtuallyRotatedTextWithTerminatorTests Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Tests Assembly : MoreStructures.Tests.dll Syntax public class VirtuallyRotatedTextWithTerminatorTests Methods | Improve this Doc View Source CompareTo_IsCorrect() Declaration public void CompareTo_IsCorrect() | Improve this Doc View Source GetEnumerator_AsIEnumerable_IteratesCorrectly() Declaration public void GetEnumerator_AsIEnumerable_IteratesCorrectly() | Improve this Doc View Source GetEnumerator_AsIEnumerable_ResetsCorrectly() Declaration public void GetEnumerator_AsIEnumerable_ResetsCorrectly() | Improve this Doc View Source GetEnumerator_CurrentRaisesExceptionBeforeAndAfter() Declaration public void GetEnumerator_CurrentRaisesExceptionBeforeAndAfter() | Improve this Doc View Source GetEnumerator_IteratesCorrectly() Declaration public void GetEnumerator_IteratesCorrectly() | Improve this Doc View Source GetEnumerator_ResetsCorrectly() Declaration public void GetEnumerator_ResetsCorrectly() | Improve this Doc View Source Indexer_FollowsRotation() Declaration public void Indexer_FollowsRotation() Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.TextWithTerminator.html": {
    "href": "api/MoreStructures.TextWithTerminator.html",
    "title": "Class TextWithTerminator",
    "keywords": "Class TextWithTerminator A text string with a terminator character, not present in the text. Inheritance System.Object TextWithTerminator Implements IValueEnumerable < System.Char > IEnumerable < System.Char > System.IEquatable < TextWithTerminator > Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures Assembly : MoreStructures.dll Syntax public class TextWithTerminator : IValueEnumerable<char>, IEquatable<TextWithTerminator> Remarks USECASES - A terminator-terminated text is required by data structures like Suffix Tries, Trees or Arrays. - This object provides type safety, as it allows to tell apart terminator-terminated strings from generic ones. - Consistently using TextWithTerminator , rather than System.String , in all library functionalities ensures that the invariant of a terminator-terminated string is always respected. - Most string-related functionalities provided by TextWithTerminator , such as Length and Item[Index] , as well as and System.Collections.IEnumerable support, are delegated to the underlying string. Constructors | Improve this Doc View Source TextWithTerminator(IEnumerable<Char>, Char, Boolean) A text string with a terminator character, not present in the text. Declaration public TextWithTerminator(IEnumerable<char> Text, char Terminator = '$', bool ValidateInput = true) Parameters Type Name Description System.Collections.IEnumerable < System.Char > Text A sequence of chars, of any length (including the empty sequence). System.Char Terminator A terminator character, not present in Text . If not specified DefaultTerminator is used. System.Boolean ValidateInput Whether the input, and in particular Text should be validated, while this object is created. Validation takes O(n) time, where n = number of chars in Text and can be an heavy operation. Remarks USECASES - A terminator-terminated text is required by data structures like Suffix Tries, Trees or Arrays. - This object provides type safety, as it allows to tell apart terminator-terminated strings from generic ones. - Consistently using TextWithTerminator , rather than System.String , in all library functionalities ensures that the invariant of a terminator-terminated string is always respected. - Most string-related functionalities provided by TextWithTerminator , such as Length and Item[Index] , as well as and System.Collections.IEnumerable support, are delegated to the underlying string. Fields | Improve this Doc View Source DefaultTerminator The special character used as a default terminator for the text to build the Suffix Tree of, when no custom terminator is specified. Should not be present in the text. Declaration public const char DefaultTerminator = '$' Field Value Type Description System.Char A single char. Properties | Improve this Doc View Source Item[Index] Select a part of this text by the provided index (either w.r.t. the start or to the end of the text). Declaration public char this[Index index] { get; } Parameters Type Name Description Index index The index applied to the underlying string. Property Value Type Description System.Char A char containing the selected part. | Improve this Doc View Source Item[TextWithTerminator.ISelector] Select a part of this text by the provided selector. Declaration public string this[TextWithTerminator.ISelector selector] { get; } Parameters Type Name Description TextWithTerminator.ISelector selector Any selector acting on a TextWithTerminator . Property Value Type Description System.String A string containing the selected part. | Improve this Doc View Source Item[Range] Select a part of this text by the provided range (start index included, end index excluded). Declaration public IEnumerable<char> this[Range range] { get; } Parameters Type Name Description Range range The range applied to the underlying string. Property Value Type Description System.Collections.IEnumerable < System.Char > An of chars containing the selected part. | Improve this Doc View Source Length The total length of this text, including the terminator. Declaration public int Length { get; } Property Value Type Description System.Int32 A positive integer (at least 1). Remarks CACHING Calculated just once, and cached for later use. Immutability guarantees correctness. COMPLEXITY - If the text was built with a System.String as input, the operation is O(1) in time. - If the text was built with a type optimized by CountO1<TSource>(IEnumerable<TSource>) , such as an System.Collections.IList or the operation is O(1) as well. - Otherwise, the operation is O(n), where n is the length of Text . | Improve this Doc View Source Terminator Declaration public char Terminator { get; set; } Property Value Type Description System.Char A single char. | Improve this Doc View Source TerminatorIndex Returns the index of Terminator in this MoreStructures.TextWithTerminator.TextAndTerminator . Declaration public int TerminatorIndex { get; } Property Value Type Description System.Int32 A 0-based index. 0 when Text is empty, positive otherwise. | Improve this Doc View Source Text Declaration public IEnumerable<char> Text { get; set; } Property Value Type Description System.Collections.IEnumerable < System.Char > A sequence of chars. Remarks Wrapped into a IValueEnumerable<T> to preserve value equality. | Improve this Doc View Source ValidateInput Declaration public bool ValidateInput { get; set; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source EndsWith(IEnumerable<Char>) Whether this text ends with the provided suffix. Declaration public bool EndsWith(IEnumerable<char> suffix) Parameters Type Name Description System.Collections.IEnumerable < System.Char > suffix A terminator-included of System.Char . Returns Type Description System.Boolean True if this text ends by the suffix. | Improve this Doc View Source GetEnumerator() Returns an enumerator that iterates through the collection of chars of the underlying Text string, including the Terminator char. Declaration public IEnumerator<char> GetEnumerator() Returns Type Description System.Collections.IEnumerator < System.Char > | Improve this Doc View Source StartsWith(IEnumerable<Char>) Whether this text starts with the provided suffix. Declaration public bool StartsWith(IEnumerable<char> prefix) Parameters Type Name Description System.Collections.IEnumerable < System.Char > prefix A terminator-included of System.Char . Returns Type Description System.Boolean True if this text starts by the prefix. Explicit Interface Implementations | Improve this Doc View Source IEnumerable.GetEnumerator() Returns an enumerator that iterates through the collection of chars of the underlying Text string, including the Terminator char. Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator Implements IValueEnumerable<T> IEnumerable<> System.IEquatable<T> Extension Methods TextWithTerminatorExtensions.ToVirtuallyRotated(TextWithTerminator, Int32) SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.TextWithTerminator.ISelector.html": {
    "href": "api/MoreStructures.TextWithTerminator.ISelector.html",
    "title": "Interface TextWithTerminator.ISelector",
    "keywords": "Interface TextWithTerminator.ISelector A selector of a part of a TextWithTerminator or RotatedTextWithTerminator . Namespace : MoreStructures Assembly : MoreStructures.dll Syntax public interface ISelector Methods | Improve this Doc View Source Of(TextWithTerminator) Extract the substring identified by this selector, out of the provided TextWithTerminator . Declaration string Of(TextWithTerminator text) Parameters Type Name Description TextWithTerminator text The text with terminator, to extract a substring of. Returns Type Description System.String A substring, whose length depends on the selector. | Improve this Doc View Source OfRotated(RotatedTextWithTerminator) Extract the substring identified by this selector, out of the provided RotatedTextWithTerminator . Declaration string OfRotated(RotatedTextWithTerminator text) Parameters Type Name Description RotatedTextWithTerminator text The text with terminator, to extract a substring of. Returns Type Description System.String A substring, whose length depends on the selector. Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.TextWithTerminatorExtensions.html": {
    "href": "api/MoreStructures.TextWithTerminatorExtensions.html",
    "title": "Class TextWithTerminatorExtensions",
    "keywords": "Class TextWithTerminatorExtensions Extension methods for TextWithTerminator . Inheritance System.Object TextWithTerminatorExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures Assembly : MoreStructures.dll Syntax public static class TextWithTerminatorExtensions Methods | Improve this Doc View Source GenerateFullText(TextWithTerminator[]) Builds a single TextWithTerminator , concatenating the TextWithTerminator instances in texts . Returns as well the of all the terminators and their indexes. Declaration public static (TextWithTerminator fullText, ISet<char> terminators) GenerateFullText(this TextWithTerminator[] texts) Parameters Type Name Description TextWithTerminator [] texts The text instances to join into a single text. Returns Type Description System.ValueTuple < TextWithTerminator , ISet < System.Char >> A text with the Text of all items of texts concatenated, each followed by its own Terminator except the last, and the Terminator of the last item. Remarks COMPLEXITY Requires iterating over the TextWithTerminator items of texts , but not on their content. Therefore, Time Complexity is O(n), where n is the number of items of texts , and not O(t), where t is the length of the concatenated text. Space Complexity is also O(n), since the of terminators contains n items and the generated full text receives a lazy evaluated of the System.Char in each TextWithTerminator of texts . | Improve this Doc View Source ToVirtuallyRotated(TextWithTerminator, Int32) Builds a virtual rotation of the provided TextWithTerminator , by a number of chars defined by rotation , in constant time. Declaration public static VirtuallyRotatedTextWithTerminator ToVirtuallyRotated(this TextWithTerminator text, int rotation) Parameters Type Name Description TextWithTerminator text The text which has to be rotated. System.Int32 rotation The number of chars to virtually rotate text . Returns Type Description VirtuallyRotatedTextWithTerminator An object constructed in constant time and behaving like a rotation of the provided text. Remarks COMPLEXITY - The rotation is \"virtual\" because no new string of length n is computed (which would make the constructor take linear time in the number of chars of text ). - Instead, a new object storing the rotation and keeping the reference to text is created in O(1) time and space. - Such an object is able to appear as if the underlying string was recomputed, taking into account the rotation in all its exposed functionalities."
  },
  "api/MoreStructures.Utilities.CharOrTerminatorComparer.html": {
    "href": "api/MoreStructures.Utilities.CharOrTerminatorComparer.html",
    "title": "Class CharOrTerminatorComparer",
    "keywords": "Class CharOrTerminatorComparer An implementation of for System.Char , which compares chars taking into account the fact that the char may be a special char, called terminator, which has to be considered smaller than any other char. Inheritance System.Object CharOrTerminatorComparer Namespace : MoreStructures.Utilities Assembly : MoreStructures.dll Syntax public class CharOrTerminatorComparer : IComparer<char> Properties | Improve this Doc View Source Terminator The character acting as terminator, and which has to be considered smaller than any other char. Declaration public char Terminator { get; } Property Value Type Description System.Char Methods | Improve this Doc View Source Build(Char) Builds a CharOrTerminatorComparer with the provided terminator . Caches instances. Declaration public static CharOrTerminatorComparer Build(char terminator) Parameters Type Name Description System.Char terminator Returns Type Description CharOrTerminatorComparer An instance of CharOrTerminatorComparer , new or previously created and cached. | Improve this Doc View Source Compare(Char, Char) Declaration public int Compare(char x, char y) Parameters Type Name Description System.Char x System.Char y Returns Type Description System.Int32 Remarks Special rules applied by CharOrTerminatorComparer : If one char is the terminator, and the other isn't, the one which is the terminator is smaller. If none of the cases above applies, System.Char.CompareTo(System.Char) is used on x and y . | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Remarks Two CharOrTerminatorComparer are equal if they have the same Terminator . | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Remarks The GetHashCode() is based on Terminator hash. Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.Utilities.EnumerableExtensions.html": {
    "href": "api/MoreStructures.Utilities.EnumerableExtensions.html",
    "title": "Class EnumerableExtensions",
    "keywords": "Class EnumerableExtensions Extension methods for all concretions. Inheritance System.Object EnumerableExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Utilities Assembly : MoreStructures.dll Syntax public static class EnumerableExtensions Methods | Improve this Doc View Source CountO1<TSource>(IEnumerable<TSource>) Optimized version of , which runs in constant time on source of type System.String , System.Collections.IDictionary , and System.Collections.IList , and calls for any source which cannot be assigned to either of these types. Declaration public static int CountO1<TSource>(this IEnumerable<TSource> source) Parameters Type Name Description System.Collections.IEnumerable <TSource> source Returns Type Description System.Int32 Type Parameters Name Description TSource | Improve this Doc View Source ElementAtO1<TSource>(IEnumerable<TSource>, Index) Optimized version of , which runs in constant time on source of type System.String , and System.Collections.IList , and calls for any source which cannot be assigned to either of these types. Declaration public static TSource ElementAtO1<TSource>(this IEnumerable<TSource> source, Index index) Parameters Type Name Description System.Collections.IEnumerable <TSource> source Index index Returns Type Description TSource Type Parameters Name Description TSource | Improve this Doc View Source ElementAtO1<TSource>(IEnumerable<TSource>, Int32) Optimized version of , which runs in constant time on source of type System.String , and System.Collections.IList , and calls for any source which cannot be assigned to either of these types. Declaration public static TSource ElementAtO1<TSource>(this IEnumerable<TSource> source, int index) Parameters Type Name Description System.Collections.IEnumerable <TSource> source System.Int32 index Returns Type Description TSource Type Parameters Name Description TSource | Improve this Doc View Source ElementAtO1OrDefault<TSource>(IEnumerable<TSource>, Int32) Optimized version of , which runs in constant time on source of type System.String , and System.Collections.IList , and calls for any source which cannot be assigned to either of these types. Declaration public static TSource ElementAtO1OrDefault<TSource>(this IEnumerable<TSource> source, int index) Parameters Type Name Description System.Collections.IEnumerable <TSource> source System.Int32 index Returns Type Description TSource Type Parameters Name Description TSource | Improve this Doc View Source EnumerateAtMostFirst<TSource>(IEnumerable<TSource>, Int32) Eagerly enumerates the first count items of source , or less if there aren't enough, returning an of them and the reminder, as a lazily evaluated . Declaration public static (IList<TSource> firstNItems, IEnumerable<TSource> reminder) EnumerateAtMostFirst<TSource>(this IEnumerable<TSource> source, int count) Parameters Type Name Description System.Collections.IEnumerable <TSource> source The to split into two pieces. System.Int32 count The number of items of source to eagerly evaluate and return (at most). Returns Type Description System.ValueTuple < System.Collections.IList <TSource>, System.Collections.IEnumerable <TSource>> A couple of an instance and an instance. Type Parameters Name Description TSource The type of elements of source . | Improve this Doc View Source EnumerateExactlyFirst<TSource>(IEnumerable<TSource>, Int32) Eagerly enumerates the first count items of source , returning an of them and the reminder, as a lazily evaluated . Declaration public static (IList<TSource> firstNItems, IEnumerable<TSource> reminder) EnumerateExactlyFirst<TSource>(this IEnumerable<TSource> source, int count) Parameters Type Name Description System.Collections.IEnumerable <TSource> source The to split into two pieces. System.Int32 count The number of items of source to eagerly evaluate and return. Returns Type Description System.ValueTuple < System.Collections.IList <TSource>, System.Collections.IEnumerable <TSource>> A couple of an instance and an instance. Type Parameters Name Description TSource The type of elements of source ."
  },
  "api/MoreStructures.Utilities.html": {
    "href": "api/MoreStructures.Utilities.html",
    "title": "Namespace MoreStructures.Utilities",
    "keywords": "Namespace MoreStructures.Utilities Classes CharOrTerminatorComparer An implementation of for System.Char , which compares chars taking into account the fact that the char may be a special char, called terminator, which has to be considered smaller than any other char. EnumerableExtensions Extension methods for all concretions. LockValueObject An empty object with value equality (always true), to be used as lock object in records and other value structures. StringIncludingTerminatorComparer An implementation of for System.String , which compares string taking into account the fact that the string may contain (at any index, not necessarily at then end) a special char, called terminator, which has to be considered smaller than any other char. StringUtilities Generic utilities and extensions for strings. StringValueEnumerable A IValueEnumerable<T> implementation, wrapping a System.String . ValueEnumerable<T> A IValueEnumerable<T> implementation, wrapping a generic . ValueEnumerableExtensions Extension methods for IValueEnumerable<T> . ValueReadOnlyCollection<T> A readonly immutable generic collection of non-null items which performs equality by value. ValueReadOnlyCollectionsExtensions Extension methods for value readonly collections defined in MoreStructures.Utilities . ValueReadOnlyDictionary<TKey, TValue> A readonly immutable generic dictionary of non-null keys and values which performs equality by value. Interfaces IValueEnumerable<T> An which is compared by value, by using . To be used to be used as interface for enumerables in records and other value structures."
  },
  "api/MoreStructures.Utilities.IValueEnumerable-1.html": {
    "href": "api/MoreStructures.Utilities.IValueEnumerable-1.html",
    "title": "Interface IValueEnumerable<T>",
    "keywords": "Interface IValueEnumerable<T> An which is compared by value, by using . To be used to be used as interface for enumerables in records and other value structures. Namespace : MoreStructures.Utilities Assembly : MoreStructures.dll Syntax public interface IValueEnumerable<out T> Type Parameters Name Description T Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.Utilities.LockValueObject.html": {
    "href": "api/MoreStructures.Utilities.LockValueObject.html",
    "title": "Class LockValueObject",
    "keywords": "Class LockValueObject An empty object with value equality (always true), to be used as lock object in records and other value structures. Inheritance System.Object LockValueObject Implements System.IEquatable < LockValueObject > Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Utilities Assembly : MoreStructures.dll Syntax public class LockValueObject : IEquatable<LockValueObject> Remarks Since all instances are empty, and equality is done by value, always returns true , when the provided object is of type , and always returns the same value (0). Examples record ARecord() { private readonly LockValueObject _lockObject = new LockValueObject(); private void AMethod() { ... lock (_lockObject) { ... } ... } } Implements System.IEquatable<T> Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.Utilities.StringIncludingTerminatorComparer.html": {
    "href": "api/MoreStructures.Utilities.StringIncludingTerminatorComparer.html",
    "title": "Class StringIncludingTerminatorComparer",
    "keywords": "Class StringIncludingTerminatorComparer An implementation of for System.String , which compares string taking into account the fact that the string may contain (at any index, not necessarily at then end) a special char, called terminator, which has to be considered smaller than any other char. Inheritance System.Object StringIncludingTerminatorComparer Namespace : MoreStructures.Utilities Assembly : MoreStructures.dll Syntax public class StringIncludingTerminatorComparer : IComparer<string> Properties | Improve this Doc View Source Terminator The character acting as terminator, and which has to be considered smaller than any other char. Declaration public char Terminator { get; } Property Value Type Description System.Char Methods | Improve this Doc View Source Build(Char) Builds a StringIncludingTerminatorComparer with the provided terminator . Caches instances. Declaration public static StringIncludingTerminatorComparer Build(char terminator) Parameters Type Name Description System.Char terminator Returns Type Description StringIncludingTerminatorComparer An instance of StringIncludingTerminatorComparer , new or previously created and cached. | Improve this Doc View Source Compare(String, String) Declaration public int Compare(string x, string y) Parameters Type Name Description System.String x System.String y Returns Type Description System.Int32 Remarks Special rules applied by StringIncludingTerminatorComparer : Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.Utilities.StringUtilities.html": {
    "href": "api/MoreStructures.Utilities.StringUtilities.html",
    "title": "Class StringUtilities",
    "keywords": "Class StringUtilities Generic utilities and extensions for strings. Inheritance System.Object StringUtilities Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Utilities Assembly : MoreStructures.dll Syntax public static class StringUtilities Methods | Improve this Doc View Source LongestPrefixInCommon(IEnumerable<Char>, IEnumerable<Char>) Returns the length of the longest prefix in common between the provided of System.Char . Declaration public static int LongestPrefixInCommon(IEnumerable<char> enumerable1, IEnumerable<char> enumerable2) Parameters Type Name Description IEnumerable < System.Char > enumerable1 IEnumerable < System.Char > enumerable2 Returns Type Description System.Int32 An integer betwen 0 and the length of the shortest of the enumerabbles provided."
  },
  "api/MoreStructures.Utilities.StringValueEnumerable.html": {
    "href": "api/MoreStructures.Utilities.StringValueEnumerable.html",
    "title": "Class StringValueEnumerable",
    "keywords": "Class StringValueEnumerable A IValueEnumerable<T> implementation, wrapping a System.String . Inheritance System.Object ValueEnumerable < System.Char > StringValueEnumerable Implements IValueEnumerable < System.Char > IEnumerable < System.Char > Inherited Members ValueEnumerable<Char>.GetEnumerator() ValueEnumerable<Char>.IEnumerable.GetEnumerator() ValueEnumerable<Char>.Equals(Object) ValueEnumerable<Char>.GetHashCode() ValueEnumerable<Char>.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : MoreStructures.Utilities Assembly : MoreStructures.dll Syntax public class StringValueEnumerable : ValueEnumerable<char>, IValueEnumerable<char> Remarks Useful when a System.String property/field should be equatable to an by value. For example, when a property or field is declared as of System.Char , and can be assigned either a System.String or a generic , and it has to be solely compared by value (i.e. on the actual chars in the System.String and ). Constructors | Improve this Doc View Source StringValueEnumerable(String) Builds a ValueEnumerable<T> around the provided stringValue . Declaration public StringValueEnumerable(string stringValue) Parameters Type Name Description System.String stringValue The string to wrap. Remarks Time and Space Complexity are O(1), as this constructor doesn't iterate over stringValue . Properties | Improve this Doc View Source StringValue The System.String value underlying this IValueEnumerable<T> . Declaration public string StringValue { get; } Property Value Type Description System.String Implements IValueEnumerable<T> IEnumerable<> Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.Utilities.ValueEnumerable-1.html": {
    "href": "api/MoreStructures.Utilities.ValueEnumerable-1.html",
    "title": "Class ValueEnumerable<T>",
    "keywords": "Class ValueEnumerable<T> A IValueEnumerable<T> implementation, wrapping a generic . Inheritance System.Object ValueEnumerable<T> StringValueEnumerable Implements IValueEnumerable <T> IEnumerable <T> Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : MoreStructures.Utilities Assembly : MoreStructures.dll Syntax public class ValueEnumerable<T> : IValueEnumerable<T> Type Parameters Name Description T The type of objects of the wrapped enumerable. Remarks Useful to preserve equality by value in records and other value structures which contain enumerable objects. It doesn't cache nor enumerate the underlying MoreStructures.Utilities.ValueEnumerable`1.Enumerable unless GetEnumerator() or a method requiring MoreStructures.Utilities.ValueEnumerable`1.Enumerable items is called. Constructors | Improve this Doc View Source ValueEnumerable(IEnumerable<T>) Builds a ValueEnumerable<T> around the provided enumerable . Declaration public ValueEnumerable(IEnumerable<T> enumerable) Parameters Type Name Description System.Collections.IEnumerable <T> enumerable The enumerable to wrap. Remarks Time and Space Complexity is O(1), as this constructor doesn't enumerate enumerable . Methods | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) Remarks In the specific case, equality is based on the of the wrapped objects. Therefore, Time Complexity is O(n * Te) and Space Complexity is O(Se), where n is the number of elements of the longest MoreStructures.Utilities.ValueEnumerable`1.Enumerable and Te/Se are the time and space costs of System.Object.Equals(System.Object) of two T instances. | Improve this Doc View Source GetEnumerator() Declaration public IEnumerator<T> GetEnumerator() Returns Type Description System.Collections.IEnumerator <T> | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() Remarks In the specific case, the hash is calculated as an aggregation of the hash codes of the items of the wrapped MoreStructures.Utilities.ValueEnumerable`1.Enumerable object. Therefore, Time Complexity is O(n * Te) and Space Complexity is O(Se), where n is the number of elements of the longest MoreStructures.Utilities.ValueEnumerable`1.Enumerable and Te/Se are the time and space costs of System.Object.GetHashCode() of a T instance. | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Remarks In the specific case, the string calculation is delegated to the wrapped object. Therefore, Time and Space Complexity are the ones of the specific implementation of System.Object.ToString() of the underlying MoreStructures.Utilities.ValueEnumerable`1.Enumerable . Explicit Interface Implementations | Improve this Doc View Source IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator Implements IValueEnumerable<T> IEnumerable<> Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.Utilities.ValueEnumerableExtensions.html": {
    "href": "api/MoreStructures.Utilities.ValueEnumerableExtensions.html",
    "title": "Class ValueEnumerableExtensions",
    "keywords": "Class ValueEnumerableExtensions Extension methods for IValueEnumerable<T> . Inheritance System.Object ValueEnumerableExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Utilities Assembly : MoreStructures.dll Syntax public static class ValueEnumerableExtensions Methods | Improve this Doc View Source AsValue<T>(IEnumerable<T>) Wraps the provided enumerable into a IValueEnumerable<T> , which uses to check for equality. Declaration public static IValueEnumerable<T> AsValue<T>(this IEnumerable<T> enumerable) Parameters Type Name Description IEnumerable <T> enumerable The enumerable to wrap. Returns Type Description IValueEnumerable <T> A IValueEnumerable<T> wrapping the provided . Type Parameters Name Description T The type of objects of enumerable . Remarks Useful to preserve equality by value in records and other value structures which contain enumerable objects. Passing a System.String as enumerable will result in the instantiation of a specialized concretion of IValueEnumerable<T> which handles strings specifically: StringValueEnumerable . Time and Space Complexity are O(1), as this method doesn't iterate over enumerable ."
  },
  "api/MoreStructures.Utilities.ValueReadOnlyCollection-1.html": {
    "href": "api/MoreStructures.Utilities.ValueReadOnlyCollection-1.html",
    "title": "Class ValueReadOnlyCollection<T>",
    "keywords": "Class ValueReadOnlyCollection<T> A readonly immutable generic collection of non-null items which performs equality by value. Inheritance System.Object System.Collections.ObjectModel.ReadOnlyCollection <T> ValueReadOnlyCollection<T> Implements System.Collections.Generic.IList <T> System.Collections.Generic.ICollection <T> System.Collections.Generic.IReadOnlyList <T> System.Collections.Generic.IReadOnlyCollection <T> System.Collections.Generic.IEnumerable <T> System.Collections.IList System.Collections.ICollection System.Collections.IEnumerable Inherited Members System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.Generic.IList<T>.get_Item(System.Int32) System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.Generic.IList<T>.set_Item(System.Int32, T) System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.IList.get_Item(System.Int32) System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.IList.set_Item(System.Int32, System.Object) System.Collections.ObjectModel.ReadOnlyCollection<T>.Contains(T) System.Collections.ObjectModel.ReadOnlyCollection<T>.CopyTo(T[], System.Int32) System.Collections.ObjectModel.ReadOnlyCollection<T>.GetEnumerator() System.Collections.ObjectModel.ReadOnlyCollection<T>.IndexOf(T) System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.Generic.ICollection<T>.Add(T) System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.Generic.ICollection<T>.Clear() System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.Generic.ICollection<T>.Remove(T) System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.Generic.IList<T>.Insert(System.Int32, T) System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.Generic.IList<T>.RemoveAt(System.Int32) System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.ICollection.CopyTo(System.Array, System.Int32) System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.IEnumerable.GetEnumerator() System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.IList.Add(System.Object) System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.IList.Clear() System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.IList.Contains(System.Object) System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.IList.IndexOf(System.Object) System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.IList.Insert(System.Int32, System.Object) System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.IList.Remove(System.Object) System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.IList.RemoveAt(System.Int32) System.Collections.ObjectModel.ReadOnlyCollection<T>.Count System.Collections.ObjectModel.ReadOnlyCollection<T>.Item[System.Int32] System.Collections.ObjectModel.ReadOnlyCollection<T>.Items System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.Generic.ICollection<T>.IsReadOnly System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.Generic.IList<T>.Item[System.Int32] System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.ICollection.IsSynchronized System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.ICollection.SyncRoot System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.IList.IsFixedSize System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.IList.IsReadOnly System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.IList.Item[System.Int32] System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : MoreStructures.Utilities Assembly : MoreStructures.dll Syntax public class ValueReadOnlyCollection<T> : ReadOnlyCollection<T>, IList<T>, ICollection<T>, IReadOnlyList<T>, IReadOnlyCollection<T>, IEnumerable<T>, IList, ICollection, IEnumerable Type Parameters Name Description T The type of items in the collection. Remarks Immutability can be guaranteed by cloning the provided enumerable and exposing a readonly view of it, but only if immutability of underlying T is provided, for example, by using immutable records. Constructors | Improve this Doc View Source ValueReadOnlyCollection(IEnumerable<T>) Creates value readonly collection out of the provided enumerable, and independent from it. Declaration public ValueReadOnlyCollection(IEnumerable<T> enumerable) Parameters Type Name Description IEnumerable <T> enumerable The enumerable to be used to build the readonly collection. Methods | Improve this Doc View Source Equals(Object) Equality is calculated by value, i.e. on the collections items directly. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean True if the specified object is equal to the current collection by value; otherwise, false. Overrides System.Object.Equals(System.Object) | Improve this Doc View Source GetHashCode() The hash code is calculated by value, as an aggregate of the hash codes of its items. Declaration public override int GetHashCode() Returns Type Description System.Int32 A 32-bit signed integer hash code. Overrides System.Object.GetHashCode() | Improve this Doc View Source ToString() Format: \"[v1, v2, ...]\". Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Operators | Improve this Doc View Source Equality(ValueReadOnlyCollection<T>, ValueReadOnlyCollection<T>) Compare the two provided value read-only collections for equality by value. Declaration public static bool operator ==(ValueReadOnlyCollection<T> left, ValueReadOnlyCollection<T> right) Parameters Type Name Description ValueReadOnlyCollection <T> left The first term of comparison. ValueReadOnlyCollection <T> right The second term of comparison. Returns Type Description System.Boolean True if the two collections are equal by their items, false otherwise. | Improve this Doc View Source Inequality(ValueReadOnlyCollection<T>, ValueReadOnlyCollection<T>) Compare the two provided value read-only collections for inequality by value. Declaration public static bool operator !=(ValueReadOnlyCollection<T> left, ValueReadOnlyCollection<T> right) Parameters Type Name Description ValueReadOnlyCollection <T> left The first term of comparison. ValueReadOnlyCollection <T> right The second term of comparison. Returns Type Description System.Boolean True if the two collections are different by their items, false otherwise. Implements System.Collections.Generic.IList<T> System.Collections.Generic.ICollection<T> System.Collections.Generic.IReadOnlyList<T> System.Collections.Generic.IReadOnlyCollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IList System.Collections.ICollection System.Collections.IEnumerable Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.Utilities.ValueReadOnlyCollectionsExtensions.html": {
    "href": "api/MoreStructures.Utilities.ValueReadOnlyCollectionsExtensions.html",
    "title": "Class ValueReadOnlyCollectionsExtensions",
    "keywords": "Class ValueReadOnlyCollectionsExtensions Extension methods for value readonly collections defined in MoreStructures.Utilities . Inheritance System.Object ValueReadOnlyCollectionsExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures.Utilities Assembly : MoreStructures.dll Syntax public static class ValueReadOnlyCollectionsExtensions Methods | Improve this Doc View Source ToValueReadOnlyCollection<T>(IEnumerable<T>) Builds a ValueReadOnlyCollection<T> out of the provided dictionary. Declaration public static ValueReadOnlyCollection<T> ToValueReadOnlyCollection<T>(this IEnumerable<T> enumerable) Parameters Type Name Description IEnumerable <T> enumerable Returns Type Description ValueReadOnlyCollection <T> An instance of ValueReadOnlyCollection<T> , independent from the provided enumerable. Type Parameters Name Description T | Improve this Doc View Source ToValueReadOnlyDictionary<TKey, TValue>(IDictionary<TKey, TValue>) Builds a ValueReadOnlyDictionary<TKey, TValue> out of the provided dictionary. Declaration public static ValueReadOnlyDictionary<TKey, TValue> ToValueReadOnlyDictionary<TKey, TValue>(this IDictionary<TKey, TValue> dictionary) Parameters Type Name Description IDictionary <TKey, TValue> dictionary Returns Type Description ValueReadOnlyDictionary <TKey, TValue> An instance of ValueReadOnlyDictionary<TKey, TValue> , independent from the provided dictionary. Type Parameters Name Description TKey TValue | Improve this Doc View Source ToValueReadOnlyDictionary<TKey, TValue>(IEnumerable<KeyValuePair<TKey, TValue>>) Builds a ValueReadOnlyDictionary<TKey, TValue> out of the provided enumerable of entries. Declaration public static ValueReadOnlyDictionary<TKey, TValue> ToValueReadOnlyDictionary<TKey, TValue>(this IEnumerable<KeyValuePair<TKey, TValue>> entries) Parameters Type Name Description IEnumerable < KeyValuePair <TKey, TValue>> entries Returns Type Description ValueReadOnlyDictionary <TKey, TValue> An instance of ValueReadOnlyDictionary<TKey, TValue> , independent from the provided enumerable of entries. Type Parameters Name Description TKey TValue"
  },
  "api/MoreStructures.Utilities.ValueReadOnlyDictionary-2.html": {
    "href": "api/MoreStructures.Utilities.ValueReadOnlyDictionary-2.html",
    "title": "Class ValueReadOnlyDictionary<TKey, TValue>",
    "keywords": "Class ValueReadOnlyDictionary<TKey, TValue> A readonly immutable generic dictionary of non-null keys and values which performs equality by value. Inheritance System.Object System.Collections.ObjectModel.ReadOnlyDictionary <TKey, TValue> ValueReadOnlyDictionary<TKey, TValue> Implements System.Collections.Generic.IDictionary <TKey, TValue> System.Collections.Generic.ICollection < System.Collections.Generic.KeyValuePair <TKey, TValue>> System.Collections.Generic.IReadOnlyDictionary <TKey, TValue> System.Collections.Generic.IReadOnlyCollection < System.Collections.Generic.KeyValuePair <TKey, TValue>> System.Collections.Generic.IEnumerable < System.Collections.Generic.KeyValuePair <TKey, TValue>> System.Collections.IDictionary System.Collections.ICollection System.Collections.IEnumerable Inherited Members System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.System.Collections.Generic.IDictionary<TKey, TValue>.get_Item(TKey) System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.System.Collections.Generic.IDictionary<TKey, TValue>.set_Item(TKey, TValue) System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.System.Collections.IDictionary.get_Item(System.Object) System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.System.Collections.IDictionary.set_Item(System.Object, System.Object) System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.ContainsKey(TKey) System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.GetEnumerator() System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.Add(System.Collections.Generic.KeyValuePair<TKey, TValue>) System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.Clear() System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.Contains(System.Collections.Generic.KeyValuePair<TKey, TValue>) System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.CopyTo(System.Collections.Generic.KeyValuePair<TKey, TValue>[], System.Int32) System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.Remove(System.Collections.Generic.KeyValuePair<TKey, TValue>) System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.System.Collections.Generic.IDictionary<TKey, TValue>.Add(TKey, TValue) System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.System.Collections.Generic.IDictionary<TKey, TValue>.Remove(TKey) System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.System.Collections.ICollection.CopyTo(System.Array, System.Int32) System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.System.Collections.IDictionary.Add(System.Object, System.Object) System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.System.Collections.IDictionary.Clear() System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.System.Collections.IDictionary.Contains(System.Object) System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.System.Collections.IDictionary.GetEnumerator() System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.System.Collections.IDictionary.Remove(System.Object) System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.System.Collections.IEnumerable.GetEnumerator() System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.TryGetValue(TKey, TValue) System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.Count System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.Dictionary System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.Item[TKey] System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.Keys System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.IsReadOnly System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.System.Collections.Generic.IDictionary<TKey, TValue>.Item[TKey] System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.System.Collections.Generic.IDictionary<TKey, TValue>.Keys System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.System.Collections.Generic.IDictionary<TKey, TValue>.Values System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>.Keys System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>.Values System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.System.Collections.ICollection.IsSynchronized System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.System.Collections.ICollection.SyncRoot System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.System.Collections.IDictionary.IsFixedSize System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.System.Collections.IDictionary.IsReadOnly System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.System.Collections.IDictionary.Item[System.Object] System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.System.Collections.IDictionary.Keys System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.System.Collections.IDictionary.Values System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.Values System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : MoreStructures.Utilities Assembly : MoreStructures.dll Syntax public class ValueReadOnlyDictionary<TKey, TValue> : ReadOnlyDictionary<TKey, TValue>, IDictionary<TKey, TValue>, ICollection<KeyValuePair<TKey, TValue>>, IReadOnlyDictionary<TKey, TValue>, IReadOnlyCollection<KeyValuePair<TKey, TValue>>, IEnumerable<KeyValuePair<TKey, TValue>>, IDictionary, ICollection, IEnumerable Type Parameters Name Description TKey The type of keys in the dictionary. TValue The type of values in the dictionary. Remarks Immutability can be guaranteed by cloning the provided dictionary and exposing a readonly view of it, but only if immutability of underlying TKey and TValue is provided, for example, by using immutable records. Constructors | Improve this Doc View Source ValueReadOnlyDictionary(IDictionary<TKey, TValue>) Creates value readonly dictionary out of the provided dictionary, and independent from it. Declaration public ValueReadOnlyDictionary(IDictionary<TKey, TValue> dictionary) Parameters Type Name Description IDictionary <TKey, TValue> dictionary The dictionary to be used to build the readonly dictionary. | Improve this Doc View Source ValueReadOnlyDictionary(IEnumerable<KeyValuePair<TKey, TValue>>) Creates value readonly dictionary out of the provided entries, and independent from the provided enumerable of them. Declaration public ValueReadOnlyDictionary(IEnumerable<KeyValuePair<TKey, TValue>> entries) Parameters Type Name Description IEnumerable < KeyValuePair <TKey, TValue>> entries The enumerable of entries to be used to build the readonly dictionary. Methods | Improve this Doc View Source Equals(Object) Equality is calculated by value, i.e. on the dictionary key-value pairs directly. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean True if the specified object is equal to the current dictionary by value; otherwise, false. Two dictionaries are considered equal by value if they have the same set of keys and the value associated with each of the key by the two dictionaries are equal with each other. Overrides System.Object.Equals(System.Object) | Improve this Doc View Source GetHashCode() The hash code is calculated by value, as an aggregate of the hash codes of its key value pairs. Declaration public override int GetHashCode() Returns Type Description System.Int32 A 32-bit signed integer hash code. Overrides System.Object.GetHashCode() | Improve this Doc View Source ToString() Format: \"{[k1] = v1, [k2] = v2, ...}\". Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Operators | Improve this Doc View Source Equality(ValueReadOnlyDictionary<TKey, TValue>, ValueReadOnlyDictionary<TKey, TValue>) Compare the two provided value read-only dictionaries for equality by value. Declaration public static bool operator ==(ValueReadOnlyDictionary<TKey, TValue> left, ValueReadOnlyDictionary<TKey, TValue> right) Parameters Type Name Description ValueReadOnlyDictionary <TKey, TValue> left The first term of comparison. ValueReadOnlyDictionary <TKey, TValue> right The second term of comparison. Returns Type Description System.Boolean True if the two dictionaries are equal by their items, false otherwise. | Improve this Doc View Source Inequality(ValueReadOnlyDictionary<TKey, TValue>, ValueReadOnlyDictionary<TKey, TValue>) Compare the two provided value read-only dictionaries for inequality by value. Declaration public static bool operator !=(ValueReadOnlyDictionary<TKey, TValue> left, ValueReadOnlyDictionary<TKey, TValue> right) Parameters Type Name Description ValueReadOnlyDictionary <TKey, TValue> left The first term of comparison. ValueReadOnlyDictionary <TKey, TValue> right The second term of comparison. Returns Type Description System.Boolean True if the two dictionaries are different by their items, false otherwise. Implements System.Collections.Generic.IDictionary<TKey, TValue> System.Collections.Generic.ICollection<T> System.Collections.Generic.IReadOnlyDictionary<TKey, TValue> System.Collections.Generic.IReadOnlyCollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IDictionary System.Collections.ICollection System.Collections.IEnumerable Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "api/MoreStructures.VirtuallyRotatedTextWithTerminator.html": {
    "href": "api/MoreStructures.VirtuallyRotatedTextWithTerminator.html",
    "title": "Class VirtuallyRotatedTextWithTerminator",
    "keywords": "Class VirtuallyRotatedTextWithTerminator A text string with a terminator character which has been rotated leftwards or rightwards, of a number of positions (0 included). Inheritance System.Object VirtuallyRotatedTextWithTerminator Implements IValueEnumerable < System.Char > IEnumerable < System.Char > IComparable < VirtuallyRotatedTextWithTerminator > System.IEquatable < VirtuallyRotatedTextWithTerminator > Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MoreStructures Assembly : MoreStructures.dll Syntax public class VirtuallyRotatedTextWithTerminator : IValueEnumerable<char>, IEquatable<VirtuallyRotatedTextWithTerminator> Remarks A virtually rotated terminator-terminated text is required by Burrows-Wheeler Transform construction, when the length of the text is too high to build the Burrows-Wheeler Matrix, which would have n^2 items. Constructors | Improve this Doc View Source VirtuallyRotatedTextWithTerminator(RotatedTextWithTerminator, Int32) A text string with a terminator character which has been rotated leftwards or rightwards, of a number of positions (0 included). Declaration public VirtuallyRotatedTextWithTerminator(RotatedTextWithTerminator Underlying, int Rotation) Parameters Type Name Description RotatedTextWithTerminator Underlying The TextWithTerminator instance which has been rotated. System.Int32 Rotation The number of characters to rotate: positive = rightwards, negative = leftwards. Remarks A virtually rotated terminator-terminated text is required by Burrows-Wheeler Transform construction, when the length of the text is too high to build the Burrows-Wheeler Matrix, which would have n^2 items. Properties | Improve this Doc View Source Item[Index] Select a part of Underlying by the provided index (either w.r.t. the start or to the end of the text), applying the Rotation . Treat index as circular, over modulo the length of Underlying . Declaration public char this[Index index] { get; } Parameters Type Name Description Index index The index applied to the underlying string. Property Value Type Description System.Char A char containing the selected part. | Improve this Doc View Source Rotation Declaration public int Rotation { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source Underlying Declaration public RotatedTextWithTerminator Underlying { get; set; } Property Value Type Description RotatedTextWithTerminator Methods | Improve this Doc View Source CompareTo(VirtuallyRotatedTextWithTerminator) Declaration public int CompareTo(VirtuallyRotatedTextWithTerminator other) Parameters Type Name Description VirtuallyRotatedTextWithTerminator other Returns Type Description System.Int32 | Improve this Doc View Source GetEnumerator() Declaration public IEnumerator<char> GetEnumerator() Returns Type Description IEnumerator < System.Char > Explicit Interface Implementations | Improve this Doc View Source IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator Implements IValueEnumerable<T> IEnumerable<> IComparable<> System.IEquatable<T> Extension Methods SuffixStructureNodeExtensions.GetAllSuffixesFor<TEdge, TNode>(TNode, TextWithTerminator)"
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "",
    "keywords": "Sorry, no articles for the time being..."
  },
  "index.html": {
    "href": "index.html",
    "title": "More Structures .NET",
    "keywords": "More Structures .NET More Structure .NET is a OS-agnostic library written in .NET6 and C# 10, targeting Any CPU. API Documentation The API Documentation, generated from XML documentation comments , and compiled into a navigable website via DocFX , is available here . Prerequisites Windows, Linux or macOS Having .NET6 or later installed check here for supported OS, macOS releases and Linux distributions, dependencies and installation instructions. You can check whether and which .NET is installed in your system by running the following command dotnet --list-sdks dotnet --list-runtimes Build The library can be built on Windows, Linux and macOS. To build a Release version of the library, run the following commands in the directory containing MoreStructures.sln : dotnet restore dotnet build --no-restore --configuration Release To build a Debug version of the library, run the following commands in the directory containing MoreStructures.sln : dotnet restore dotnet build --no-restore --configuration Debug Test To run unit tests, after having built the project, run the following command in the directory containing MoreStructures.sln : dotnet test --no-build --verbosity normal --configuration Debug Dependencies The library is 100% C# and .NET Managed code, with no OS dependencies and with minimal nuget external dependencies, listed below. MoreLINQ More Structures depends on MoreLINQ, a battle-tested library used for many typical LINQ operations which are not out of the box in .NET. Visit https://morelinq.github.io/ for further information."
  }
}